/*! For license information please see main.75ede99af283fc861786.js.LICENSE.txt */
(()=>{var t={769:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,'/*\n! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n6. Use the user\'s configured `sans` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.mb-4 {\n  margin-bottom: 1rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.flex {\n  display: flex;\n}\n.grid {\n  display: grid;\n}\n.hidden {\n  display: none;\n}\n.w-28 {\n  width: 7rem;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-fit {\n  width: -moz-fit-content;\n  width: fit-content;\n}\n.max-w-7xl {\n  max-width: 80rem;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.grid-cols-2 {\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n.flex-col {\n  flex-direction: column;\n}\n.gap-1 {\n  gap: 0.25rem;\n}\n.gap-2 {\n  gap: 0.5rem;\n}\n.gap-3 {\n  gap: 0.75rem;\n}\n.gap-4 {\n  gap: 1rem;\n}\n.gap-5 {\n  gap: 1.25rem;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-l-2 {\n  border-left-width: 2px;\n}\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.border-gray-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(156 163 175 / var(--tw-border-opacity));\n}\n.border-red-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(239 68 68 / var(--tw-border-opacity));\n}\n.bg-purple-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(126 34 206 / var(--tw-bg-opacity));\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.pl-4 {\n  padding-left: 1rem;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.text-purple-50 {\n  --tw-text-opacity: 1;\n  color: rgb(250 245 255 / var(--tw-text-opacity));\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n.hover\\:bg-purple-900:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(88 28 135 / var(--tw-bg-opacity));\n}\n.hover\\:text-white:hover {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.disabled\\:cursor-not-allowed:disabled {\n  cursor: not-allowed;\n}\n.disabled\\:bg-purple-400:disabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(192 132 252 / var(--tw-bg-opacity));\n}\n.disabled\\:text-purple-100:disabled {\n  --tw-text-opacity: 1;\n  color: rgb(243 232 255 / var(--tw-text-opacity));\n}\n',"",{version:3,sources:["webpack://./src/main.css","<no source>"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",null],sourceRoot:""}]);const a=o},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&o[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},162:function(t,e,n){var r,i;void 0===(i="function"==typeof(r=function(){"use strict";function e(t,e,n){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){a(r.response,e,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var s="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n.g&&n.g.global===n.g?n.g:void 0,o=s.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=s.saveAs||("object"!=typeof window||window!==s?function(){}:"download"in HTMLAnchorElement.prototype&&!o?function(t,n,o){var a=s.URL||s.webkitURL,h=document.createElement("a");n=n||t.name||"download",h.download=n,h.rel="noopener","string"==typeof t?(h.href=t,h.origin===location.origin?i(h):r(h.href)?e(t,n,o):i(h,h.target="_blank")):(h.href=a.createObjectURL(t),setTimeout((function(){a.revokeObjectURL(h.href)}),4e4),setTimeout((function(){i(h)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,n,s){if(n=n||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,s),n);else if(r(t))e(t,n,s);else{var o=document.createElement("a");o.href=t,o.target="_blank",setTimeout((function(){i(o)}))}}:function(t,n,r,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,n,r);var a="application/octet-stream"===t.type,h=/constructor/i.test(s.HTMLElement)||s.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||a&&h||o)&&"undefined"!=typeof FileReader){var c=new FileReader;c.onloadend=function(){var t=c.result;t=u?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},c.readAsDataURL(t)}else{var l=s.URL||s.webkitURL,d=l.createObjectURL(t);i?i.location=d:location.href=d,i=null,setTimeout((function(){l.revokeObjectURL(d)}),4e4)}});s.saveAs=a.saveAs=a,t.exports=a})?r.apply(e,[]):r)||(t.exports=i)},733:(t,e,n)=>{t.exports=function t(e,n,r){function i(o,a){if(!n[o]){if(!e[o]){if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var u=n[o]={exports:{}};e[o][0].call(u.exports,(function(t){return i(e[o][1][t]||t)}),u,u.exports,t,e,n,r)}return n[o].exports}for(var s=void 0,o=0;o<r.length;o++)i(r[o]);return i}({1:[function(t,e,n){"use strict";var r=t("./utils"),i=t("./support"),s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(t){for(var e,n,i,o,a,h,u,c=[],l=0,d=t.length,f=d,p="string"!==r.getTypeOf(t);l<t.length;)f=d-l,i=p?(e=t[l++],n=l<d?t[l++]:0,l<d?t[l++]:0):(e=t.charCodeAt(l++),n=l<d?t.charCodeAt(l++):0,l<d?t.charCodeAt(l++):0),o=e>>2,a=(3&e)<<4|n>>4,h=1<f?(15&n)<<2|i>>6:64,u=2<f?63&i:64,c.push(s.charAt(o)+s.charAt(a)+s.charAt(h)+s.charAt(u));return c.join("")},n.decode=function(t){var e,n,r,o,a,h,u=0,c=0,l="data:";if(t.substr(0,5)===l)throw new Error("Invalid base64 input, it looks like a data url.");var d,f=3*(t=t.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(t.charAt(t.length-1)===s.charAt(64)&&f--,t.charAt(t.length-2)===s.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(d=i.uint8array?new Uint8Array(0|f):new Array(0|f);u<t.length;)e=s.indexOf(t.charAt(u++))<<2|(o=s.indexOf(t.charAt(u++)))>>4,n=(15&o)<<4|(a=s.indexOf(t.charAt(u++)))>>2,r=(3&a)<<6|(h=s.indexOf(t.charAt(u++))),d[c++]=e,64!==a&&(d[c++]=n),64!==h&&(d[c++]=r);return d}},{"./support":30,"./utils":32}],2:[function(t,e,n){"use strict";var r=t("./external"),i=t("./stream/DataWorker"),s=t("./stream/Crc32Probe"),o=t("./stream/DataLengthProbe");function a(t,e,n,r,i){this.compressedSize=t,this.uncompressedSize=e,this.crc32=n,this.compression=r,this.compressedContent=i}a.prototype={getContentWorker:function(){var t=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(t,e,n){return t.pipe(new s).pipe(new o("uncompressedSize")).pipe(e.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",e)},e.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,n){"use strict";var r=t("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},n.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,n){"use strict";var r=t("./utils"),i=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==r.getTypeOf(t)?function(t,e,n,r){var s=i,o=0+n;t^=-1;for(var a=0;a<o;a++)t=t>>>8^s[255&(t^e[a])];return-1^t}(0|e,t,t.length):function(t,e,n,r){var s=i,o=0+n;t^=-1;for(var a=0;a<o;a++)t=t>>>8^s[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length):0}},{"./utils":32}],5:[function(t,e,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(t,e,n){"use strict";var r;r="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:r}},{lie:37}],7:[function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=t("pako"),s=t("./utils"),o=t("./stream/GenericWorker"),a=r?"uint8array":"array";function h(t,e){o.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}n.magic="\b\0",s.inherits(h,o),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(a,t.data),!1)},h.prototype.flush=function(){o.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},n.compressWorker=function(t){return new h("Deflate",t)},n.uncompressWorker=function(){return new h("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,n){"use strict";function r(t,e){var n,r="";for(n=0;n<e;n++)r+=String.fromCharCode(255&t),t>>>=8;return r}function i(t,e,n,i,o,c){var l,d,f=t.file,p=t.compression,A=c!==a.utf8encode,m=s.transformTo("string",c(f.name)),g=s.transformTo("string",a.utf8encode(f.name)),_=f.comment,w=s.transformTo("string",c(_)),y=s.transformTo("string",a.utf8encode(_)),b=g.length!==f.name.length,v=y.length!==_.length,x="",k="",E="",B=f.dir,C=f.date,S={crc32:0,compressedSize:0,uncompressedSize:0};e&&!n||(S.crc32=t.crc32,S.compressedSize=t.compressedSize,S.uncompressedSize=t.uncompressedSize);var z=0;e&&(z|=8),A||!b&&!v||(z|=2048);var O=0,T=0;B&&(O|=16),"UNIX"===o?(T=798,O|=function(t,e){var n=t;return t||(n=e?16893:33204),(65535&n)<<16}(f.unixPermissions,B)):(T=20,O|=function(t){return 63&(t||0)}(f.dosPermissions)),l=C.getUTCHours(),l<<=6,l|=C.getUTCMinutes(),l<<=5,l|=C.getUTCSeconds()/2,d=C.getUTCFullYear()-1980,d<<=4,d|=C.getUTCMonth()+1,d<<=5,d|=C.getUTCDate(),b&&(k=r(1,1)+r(h(m),4)+g,x+="up"+r(k.length,2)+k),v&&(E=r(1,1)+r(h(w),4)+y,x+="uc"+r(E.length,2)+E);var I="";return I+="\n\0",I+=r(z,2),I+=p.magic,I+=r(l,2),I+=r(d,2),I+=r(S.crc32,4),I+=r(S.compressedSize,4),I+=r(S.uncompressedSize,4),I+=r(m.length,2),I+=r(x.length,2),{fileRecord:u.LOCAL_FILE_HEADER+I+m+x,dirRecord:u.CENTRAL_FILE_HEADER+r(T,2)+I+r(w.length,2)+"\0\0\0\0"+r(O,4)+r(i,4)+m+x+w}}var s=t("../utils"),o=t("../stream/GenericWorker"),a=t("../utf8"),h=t("../crc32"),u=t("../signature");function c(t,e,n,r){o.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}s.inherits(c,o),c.prototype.push=function(t){var e=t.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,o.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:n?(e+100*(n-r-1))/n:100}}))},c.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var n=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},c.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,n=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),e)this.push({data:function(t){return u.DATA_DESCRIPTOR+r(t.crc32,4)+r(t.compressedSize,4)+r(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},c.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var n=this.bytesWritten-t,i=function(t,e,n,i,o){var a=s.transformTo("string",o(i));return u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(t,2)+r(t,2)+r(e,4)+r(n,4)+r(a.length,2)+a}(this.dirRecords.length,n,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},c.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},c.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()})),t.on("error",(function(t){e.error(t)})),this},c.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},c.prototype.error=function(t){var e=this._sources;if(!o.prototype.error.call(this,t))return!1;for(var n=0;n<e.length;n++)try{e[n].error(t)}catch(t){}return!0},c.prototype.lock=function(){o.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=c},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,n){"use strict";var r=t("../compressions"),i=t("./ZipFileWorker");n.generateWorker=function(t,e,n){var s=new i(e.streamFiles,n,e.platform,e.encodeFileName),o=0;try{t.forEach((function(t,n){o++;var i=function(t,e){var n=t||e,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,e.compression),a=n.options.compressionOptions||e.compressionOptions||{},h=n.dir,u=n.date;n._compressWorker(i,a).withStreamInfo("file",{name:t,dir:h,date:u,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(s)})),s.entriesCount=o}catch(t){s.error(t)}return s}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new r;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(r.prototype=t("./object")).loadAsync=t("./load"),r.support=t("./support"),r.defaults=t("./defaults"),r.version="3.10.1",r.loadAsync=function(t,e){return(new r).loadAsync(t,e)},r.external=t("./external"),e.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,n){"use strict";var r=t("./utils"),i=t("./external"),s=t("./utf8"),o=t("./zipEntries"),a=t("./stream/Crc32Probe"),h=t("./nodejsUtils");function u(t){return new i.Promise((function(e,n){var r=t.decompressed.getContentWorker().pipe(new a);r.on("error",(function(t){n(t)})).on("end",(function(){r.streamInfo.crc32!==t.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):e()})).resume()}))}e.exports=function(t,e){var n=this;return e=r.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:s.utf8decode}),h.isNode&&h.isStream(t)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var n=new o(e);return n.load(t),n})).then((function(t){var n=[i.Promise.resolve(t)],r=t.files;if(e.checkCRC32)for(var s=0;s<r.length;s++)n.push(u(r[s]));return i.Promise.all(n)})).then((function(t){for(var i=t.shift(),s=i.files,o=0;o<s.length;o++){var a=s[o],h=a.fileNameStr,u=r.resolve(a.fileNameStr);n.file(u,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:e.createFolders}),a.dir||(n.file(u).unsafeOriginalName=h)}return i.zipComment.length&&(n.comment=i.zipComment),n}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,n){"use strict";var r=t("../utils"),i=t("../stream/GenericWorker");function s(t,e){i.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}r.inherits(s,i),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}})})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t)})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end()}))},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,n){"use strict";var r=t("readable-stream").Readable;function i(t,e,n){r.call(this,e),this._helper=t;var i=this;t.on("data",(function(t,e){i.push(t)||i._helper.pause(),n&&n(e)})).on("error",(function(t){i.emit("error",t)})).on("end",(function(){i.push(null)}))}t("../utils").inherits(i,r),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,n){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,n){"use strict";function r(t,e,n){var r,i=s.getTypeOf(e),a=s.extend(n||{},h);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(t=A(t)),a.createFolders&&(r=p(t))&&m.call(this,r,!0);var l="string"===i&&!1===a.binary&&!1===a.base64;n&&void 0!==n.binary||(a.binary=!l),(e instanceof u&&0===e.uncompressedSize||a.dir||!e||0===e.length)&&(a.base64=!1,a.binary=!0,e="",a.compression="STORE",i="string");var g;g=e instanceof u||e instanceof o?e:d.isNode&&d.isStream(e)?new f(t,e):s.prepareContent(t,e,a.binary,a.optimizedBinaryString,a.base64);var _=new c(t,g,a);this.files[t]=_}var i=t("./utf8"),s=t("./utils"),o=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),h=t("./defaults"),u=t("./compressedObject"),c=t("./zipObject"),l=t("./generate"),d=t("./nodejsUtils"),f=t("./nodejs/NodejsStreamInputAdapter"),p=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},A=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},m=function(t,e){return e=void 0!==e?e:h.createFolders,t=A(t),this.files[t]||r.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function g(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var _={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,n,r;for(e in this.files)r=this.files[e],(n=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(n,r)},filter:function(t){var e=[];return this.forEach((function(n,r){t(n,r)&&e.push(r)})),e},file:function(t,e,n){if(1!==arguments.length)return t=this.root+t,r.call(this,t,e,n),this;if(g(t)){var i=t;return this.filter((function(t,e){return!e.dir&&i.test(t)}))}var s=this.files[this.root+t];return s&&!s.dir?s:null},folder:function(t){if(!t)return this;if(g(t))return this.filter((function(e,n){return n.dir&&t.test(e)}));var e=this.root+t,n=m.call(this,e),r=this.clone();return r.root=n.name,r},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var n=this.filter((function(e,n){return n.name.slice(0,t.length)===t})),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,n={};try{if((n=s.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");s.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var r=n.comment||this.comment||"";e=l.generateWorker(this,n,r)}catch(t){(e=new o("error")).error(t)}return new a(e,n.type||"string",n.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=_},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,n){"use strict";e.exports=t("stream")},{stream:void 0}],17:[function(t,e,n){"use strict";var r=t("./DataReader");function i(t){r.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(i,r),i.prototype.byteAt=function(t){return this.data[this.zero+t]},i.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===n&&this.data[s+2]===r&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&n===s[1]&&r===s[2]&&i===s[3]},i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],18:[function(t,e,n){"use strict";var r=t("../utils");function i(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(){},readInt:function(t){var e,n=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)n=(n<<8)+this.byteAt(e);return this.index+=t,n},readString:function(t){return r.transformTo("string",this.readData(t))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=i},{"../utils":32}],19:[function(t,e,n){"use strict";var r=t("./Uint8ArrayReader");function i(t){r.call(this,t)}t("../utils").inherits(i,r),i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,n){"use strict";var r=t("./DataReader");function i(t){r.call(this,t)}t("../utils").inherits(i,r),i.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},i.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},i.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],21:[function(t,e,n){"use strict";var r=t("./ArrayReader");function i(t){r.call(this,t)}t("../utils").inherits(i,r),i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,n){"use strict";var r=t("../utils"),i=t("../support"),s=t("./ArrayReader"),o=t("./StringReader"),a=t("./NodeBufferReader"),h=t("./Uint8ArrayReader");e.exports=function(t){var e=r.getTypeOf(t);return r.checkSupport(e),"string"!==e||i.uint8array?"nodebuffer"===e?new a(t):i.uint8array?new h(r.transformTo("uint8array",t)):new s(r.transformTo("array",t)):new o(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(t,e,n){"use strict";var r=t("./GenericWorker"),i=t("../utils");function s(t){r.call(this,"ConvertWorker to "+t),this.destType=t}i.inherits(s,r),s.prototype.processChunk=function(t){this.push({data:i.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,n){"use strict";var r=t("./GenericWorker"),i=t("../crc32");function s(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(s,r),s.prototype.processChunk=function(t){this.streamInfo.crc32=i(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,n){"use strict";var r=t("../utils"),i=t("./GenericWorker");function s(t){i.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}r.inherits(s,i),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}i.prototype.processChunk.call(this,t)},e.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,n){"use strict";var r=t("../utils"),i=t("./GenericWorker");function s(t){i.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=r.getTypeOf(t),e.isPaused||e._tickAndRepeat()}),(function(t){e.error(t)}))}r.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,n){"use strict";function r(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var n=0;n<this._listeners[t].length;n++)this._listeners[t][n].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.error(t)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=r},{}],29:[function(t,e,n){"use strict";var r=t("../utils"),i=t("./ConvertWorker"),s=t("./GenericWorker"),o=t("../base64"),a=t("../support"),h=t("../external"),u=null;if(a.nodestream)try{u=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function c(t,e,n){var o=e;switch(e){case"blob":case"arraybuffer":o="uint8array";break;case"base64":o="string"}try{this._internalType=o,this._outputType=e,this._mimeType=n,r.checkSupport(o),this._worker=t.pipe(new i(o)),t.lock()}catch(t){this._worker=new s("error"),this._worker.error(t)}}c.prototype={accumulate:function(t){return function(t,e){return new h.Promise((function(n,i){var s=[],a=t._internalType,h=t._outputType,u=t._mimeType;t.on("data",(function(t,n){s.push(t),e&&e(n)})).on("error",(function(t){s=[],i(t)})).on("end",(function(){try{var t=function(t,e,n){switch(t){case"blob":return r.newBlob(r.transformTo("arraybuffer",e),n);case"base64":return o.encode(e);default:return r.transformTo(t,e)}}(h,function(t,e){var n,r=0,i=null,s=0;for(n=0;n<e.length;n++)s+=e[n].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(i=new Uint8Array(s),n=0;n<e.length;n++)i.set(e[n],r),r+=e[n].length;return i;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(a,s),u);n(t)}catch(t){i(t)}s=[]})).resume()}))}(this,t)},on:function(t,e){var n=this;return"data"===t?this._worker.on(t,(function(t){e.call(n,t.data,t.meta)})):this._worker.on(t,(function(){r.delay(e,arguments,n)})),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new u(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=c},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer="undefined"!=typeof Buffer,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var r=new ArrayBuffer(0);try{n.blob=0===new Blob([r],{type:"application/zip"}).size}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(r),n.blob=0===i.getBlob("application/zip").size}catch(t){n.blob=!1}}}try{n.nodestream=!!t("readable-stream").Readable}catch(t){n.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,n){"use strict";for(var r=t("./utils"),i=t("./support"),s=t("./nodejsUtils"),o=t("./stream/GenericWorker"),a=new Array(256),h=0;h<256;h++)a[h]=252<=h?6:248<=h?5:240<=h?4:224<=h?3:192<=h?2:1;function u(){o.call(this,"utf-8 decode"),this.leftOver=null}function c(){o.call(this,"utf-8 encode")}a[254]=a[254]=1,n.utf8encode=function(t){return i.nodebuffer?s.newBufferFrom(t,"utf-8"):function(t){var e,n,r,s,o,a=t.length,h=0;for(s=0;s<a;s++)55296==(64512&(n=t.charCodeAt(s)))&&s+1<a&&56320==(64512&(r=t.charCodeAt(s+1)))&&(n=65536+(n-55296<<10)+(r-56320),s++),h+=n<128?1:n<2048?2:n<65536?3:4;for(e=i.uint8array?new Uint8Array(h):new Array(h),s=o=0;o<h;s++)55296==(64512&(n=t.charCodeAt(s)))&&s+1<a&&56320==(64512&(r=t.charCodeAt(s+1)))&&(n=65536+(n-55296<<10)+(r-56320),s++),n<128?e[o++]=n:(n<2048?e[o++]=192|n>>>6:(n<65536?e[o++]=224|n>>>12:(e[o++]=240|n>>>18,e[o++]=128|n>>>12&63),e[o++]=128|n>>>6&63),e[o++]=128|63&n);return e}(t)},n.utf8decode=function(t){return i.nodebuffer?r.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,n,i,s,o=t.length,h=new Array(2*o);for(e=n=0;e<o;)if((i=t[e++])<128)h[n++]=i;else if(4<(s=a[i]))h[n++]=65533,e+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&e<o;)i=i<<6|63&t[e++],s--;1<s?h[n++]=65533:i<65536?h[n++]=i:(i-=65536,h[n++]=55296|i>>10&1023,h[n++]=56320|1023&i)}return h.length!==n&&(h.subarray?h=h.subarray(0,n):h.length=n),r.applyFromCharCode(h)}(t=r.transformTo(i.uint8array?"uint8array":"array",t))},r.inherits(u,o),u.prototype.processChunk=function(t){var e=r.transformTo(i.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var s=e;(e=new Uint8Array(s.length+this.leftOver.length)).set(this.leftOver,0),e.set(s,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var o=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;0<=n&&128==(192&t[n]);)n--;return n<0||0===n?e:n+a[t[n]]>e?n:e}(e),h=e;o!==e.length&&(i.uint8array?(h=e.subarray(0,o),this.leftOver=e.subarray(o,e.length)):(h=e.slice(0,o),this.leftOver=e.slice(o,e.length))),this.push({data:n.utf8decode(h),meta:t.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=u,r.inherits(c,o),c.prototype.processChunk=function(t){this.push({data:n.utf8encode(t.data),meta:t.meta})},n.Utf8EncodeWorker=c},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,n){"use strict";var r=t("./support"),i=t("./base64"),s=t("./nodejsUtils"),o=t("./external");function a(t){return t}function h(t,e){for(var n=0;n<t.length;++n)e[n]=255&t.charCodeAt(n);return e}t("setimmediate"),n.newBlob=function(t,e){n.checkSupport("blob");try{return new Blob([t],{type:e})}catch(n){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(t),r.getBlob(e)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var u={stringifyByChunk:function(t,e,n){var r=[],i=0,s=t.length;if(s<=n)return String.fromCharCode.apply(null,t);for(;i<s;)"array"===e||"nodebuffer"===e?r.push(String.fromCharCode.apply(null,t.slice(i,Math.min(i+n,s)))):r.push(String.fromCharCode.apply(null,t.subarray(i,Math.min(i+n,s)))),i+=n;return r.join("")},stringifyByChar:function(t){for(var e="",n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,s.allocBuffer(1)).length}catch(t){return!1}}()}};function c(t){var e=65536,r=n.getTypeOf(t),i=!0;if("uint8array"===r?i=u.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=u.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return u.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return u.stringifyByChar(t)}function l(t,e){for(var n=0;n<t.length;n++)e[n]=t[n];return e}n.applyFromCharCode=c;var d={};d.string={string:a,array:function(t){return h(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return h(t,new Uint8Array(t.length))},nodebuffer:function(t){return h(t,s.allocBuffer(t.length))}},d.array={string:c,array:a,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return s.newBufferFrom(t)}},d.arraybuffer={string:function(t){return c(new Uint8Array(t))},array:function(t){return l(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:a,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return s.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:c,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:a,nodebuffer:function(t){return s.newBufferFrom(t)}},d.nodebuffer={string:c,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:a},n.transformTo=function(t,e){if(e=e||"",!t)return e;n.checkSupport(t);var r=n.getTypeOf(e);return d[r][t](e)},n.resolve=function(t){for(var e=t.split("/"),n=[],r=0;r<e.length;r++){var i=e[r];"."===i||""===i&&0!==r&&r!==e.length-1||(".."===i?n.pop():n.push(i))}return n.join("/")},n.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":r.nodebuffer&&s.isBuffer(t)?"nodebuffer":r.uint8array&&t instanceof Uint8Array?"uint8array":r.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},n.checkSupport=function(t){if(!r[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},n.MAX_VALUE_16BITS=65535,n.MAX_VALUE_32BITS=-1,n.pretty=function(t){var e,n,r="";for(n=0;n<(t||"").length;n++)r+="\\x"+((e=t.charCodeAt(n))<16?"0":"")+e.toString(16).toUpperCase();return r},n.delay=function(t,e,n){setImmediate((function(){t.apply(n||null,e||[])}))},n.inherits=function(t,e){function n(){}n.prototype=e.prototype,t.prototype=new n},n.extend=function(){var t,e,n={};for(t=0;t<arguments.length;t++)for(e in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],e)&&void 0===n[e]&&(n[e]=arguments[t][e]);return n},n.prepareContent=function(t,e,s,a,u){return o.Promise.resolve(e).then((function(t){return r.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new o.Promise((function(e,n){var r=new FileReader;r.onload=function(t){e(t.target.result)},r.onerror=function(t){n(t.target.error)},r.readAsArrayBuffer(t)})):t})).then((function(e){var c=n.getTypeOf(e);return c?("arraybuffer"===c?e=n.transformTo("uint8array",e):"string"===c&&(u?e=i.decode(e):s&&!0!==a&&(e=function(t){return h(t,r.uint8array?new Uint8Array(t.length):new Array(t.length))}(e))),e):o.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(t,e,n){"use strict";var r=t("./reader/readerFor"),i=t("./utils"),s=t("./signature"),o=t("./zipEntry"),a=t("./support");function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(e)+", expected "+i.pretty(t)+")")}},isSignature:function(t,e){var n=this.reader.index;this.reader.setIndex(t);var r=this.reader.readString(4)===e;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=a.uint8array?"uint8array":"array",n=i.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,n,r=this.zip64EndOfCentralSize-44;0<r;)t=this.reader.readInt(2),e=this.reader.readInt(4),n=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=e-n;if(0<r)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(t){this.reader=r(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(t,e,n){"use strict";var r=t("./reader/readerFor"),i=t("./utils"),s=t("./compressedObject"),o=t("./crc32"),a=t("./utf8"),h=t("./compressions"),u=t("./support");function c(t,e){this.options=t,this.loadOptions=e}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,n;if(t.skip(22),this.fileNameLength=t.readInt(2),n=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(Object.prototype.hasOwnProperty.call(h,e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new s(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var t=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(t){var e,n,r,i=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<i;)e=t.readInt(2),n=t.readInt(2),r=t.readData(n),this.extraFields[e]={id:e,length:n,value:r};t.setIndex(i)},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var n=i.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var s=i.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(s)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=r(t.value);return 1!==e.readInt(1)||o(this.fileName)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=r(t.value);return 1!==e.readInt(1)||o(this.fileComment)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))}return null}},e.exports=c},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,n){"use strict";function r(t,e,n){this.name=t,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=e,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var i=t("./stream/StreamHelper"),s=t("./stream/DataWorker"),o=t("./utf8"),a=t("./compressedObject"),h=t("./stream/GenericWorker");r.prototype={internalStream:function(t){var e=null,n="string";try{if(!t)throw new Error("No output type specified.");var r="string"===(n=t.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),e=this._decompressWorker();var s=!this._dataBinary;s&&!r&&(e=e.pipe(new o.Utf8EncodeWorker)),!s&&r&&(e=e.pipe(new o.Utf8DecodeWorker))}catch(t){(e=new h("error")).error(t)}return new i(e,n,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof a&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new o.Utf8EncodeWorker)),a.createWorkerFrom(n,t,e)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof h?this._data:new s(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<u.length;l++)r.prototype[u[l]]=c;e.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,e,r){(function(t){"use strict";var n,r,i=t.MutationObserver||t.WebKitMutationObserver;if(i){var s=0,o=new i(c),a=t.document.createTextNode("");o.observe(a,{characterData:!0}),n=function(){a.data=s=++s%2}}else if(t.setImmediate||void 0===t.MessageChannel)n="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){c(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(c,0)};else{var h=new t.MessageChannel;h.port1.onmessage=c,n=function(){h.port2.postMessage(0)}}var u=[];function c(){var t,e;r=!0;for(var n=u.length;n;){for(e=u,u=[],t=-1;++t<n;)e[t]();n=u.length}r=!1}e.exports=function(t){1!==u.push(t)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,n){"use strict";var r=t("immediate");function i(){}var s={},o=["REJECTED"],a=["FULFILLED"],h=["PENDING"];function u(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=h,this.queue=[],this.outcome=void 0,t!==i&&f(this,t)}function c(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function l(t,e,n){r((function(){var r;try{r=e(n)}catch(r){return s.reject(t,r)}r===t?s.reject(t,new TypeError("Cannot resolve promise with itself")):s.resolve(t,r)}))}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function f(t,e){var n=!1;function r(e){n||(n=!0,s.reject(t,e))}function i(e){n||(n=!0,s.resolve(t,e))}var o=p((function(){e(i,r)}));"error"===o.status&&r(o.value)}function p(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}(e.exports=u).prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))},u.prototype.catch=function(t){return this.then(null,t)},u.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===o)return this;var n=new this.constructor(i);return this.state!==h?l(n,this.state===a?t:e,this.outcome):this.queue.push(new c(n,t,e)),n},c.prototype.callFulfilled=function(t){s.resolve(this.promise,t)},c.prototype.otherCallFulfilled=function(t){l(this.promise,this.onFulfilled,t)},c.prototype.callRejected=function(t){s.reject(this.promise,t)},c.prototype.otherCallRejected=function(t){l(this.promise,this.onRejected,t)},s.resolve=function(t,e){var n=p(d,e);if("error"===n.status)return s.reject(t,n.value);var r=n.value;if(r)f(t,r);else{t.state=a,t.outcome=e;for(var i=-1,o=t.queue.length;++i<o;)t.queue[i].callFulfilled(e)}return t},s.reject=function(t,e){t.state=o,t.outcome=e;for(var n=-1,r=t.queue.length;++n<r;)t.queue[n].callRejected(e);return t},u.resolve=function(t){return t instanceof this?t:s.resolve(new this(i),t)},u.reject=function(t){var e=new this(i);return s.reject(e,t)},u.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,r=!1;if(!n)return this.resolve([]);for(var o=new Array(n),a=0,h=-1,u=new this(i);++h<n;)c(t[h],h);return u;function c(t,i){e.resolve(t).then((function(t){o[i]=t,++a!==n||r||(r=!0,s.resolve(u,o))}),(function(t){r||(r=!0,s.reject(u,t))}))}},u.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,n=!1;if(!e)return this.resolve([]);for(var r,o=-1,a=new this(i);++o<e;)r=t[o],this.resolve(r).then((function(t){n||(n=!0,s.resolve(a,t))}),(function(t){n||(n=!0,s.reject(a,t))}));return a}},{immediate:36}],38:[function(t,e,n){"use strict";var r={};(0,t("./lib/utils/common").assign)(r,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,n){"use strict";var r=t("./zlib/deflate"),i=t("./utils/common"),s=t("./utils/strings"),o=t("./zlib/messages"),a=t("./zlib/zstream"),h=Object.prototype.toString,u=0,c=-1,l=0,d=8;function f(t){if(!(this instanceof f))return new f(t);this.options=i.assign({level:c,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:l,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(n!==u)throw new Error(o[n]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var p;if(p="string"==typeof e.dictionary?s.string2buf(e.dictionary):"[object ArrayBuffer]"===h.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(n=r.deflateSetDictionary(this.strm,p))!==u)throw new Error(o[n]);this._dict_set=!0}}function p(t,e){var n=new f(e);if(n.push(t,!0),n.err)throw n.msg||o[n.err];return n.result}f.prototype.push=function(t,e){var n,o,a=this.strm,c=this.options.chunkSize;if(this.ended)return!1;o=e===~~e?e:!0===e?4:0,"string"==typeof t?a.input=s.string2buf(t):"[object ArrayBuffer]"===h.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new i.Buf8(c),a.next_out=0,a.avail_out=c),1!==(n=r.deflate(a,o))&&n!==u)return this.onEnd(n),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(s.buf2binstring(i.shrinkBuf(a.output,a.next_out))):this.onData(i.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&1!==n);return 4===o?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===u):2!==o||(this.onEnd(u),!(a.avail_out=0))},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){t===u&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},n.Deflate=f,n.deflate=p,n.deflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},n.gzip=function(t,e){return(e=e||{}).gzip=!0,p(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,n){"use strict";var r=t("./zlib/inflate"),i=t("./utils/common"),s=t("./utils/strings"),o=t("./zlib/constants"),a=t("./zlib/messages"),h=t("./zlib/zstream"),u=t("./zlib/gzheader"),c=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new h,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,e.windowBits);if(n!==o.Z_OK)throw new Error(a[n]);this.header=new u,r.inflateGetHeader(this.strm,this.header)}function d(t,e){var n=new l(e);if(n.push(t,!0),n.err)throw n.msg||a[n.err];return n.result}l.prototype.push=function(t,e){var n,a,h,u,l,d,f=this.strm,p=this.options.chunkSize,A=this.options.dictionary,m=!1;if(this.ended)return!1;a=e===~~e?e:!0===e?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof t?f.input=s.binstring2buf(t):"[object ArrayBuffer]"===c.call(t)?f.input=new Uint8Array(t):f.input=t,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new i.Buf8(p),f.next_out=0,f.avail_out=p),(n=r.inflate(f,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&A&&(d="string"==typeof A?s.string2buf(A):"[object ArrayBuffer]"===c.call(A)?new Uint8Array(A):A,n=r.inflateSetDictionary(this.strm,d)),n===o.Z_BUF_ERROR&&!0===m&&(n=o.Z_OK,m=!1),n!==o.Z_STREAM_END&&n!==o.Z_OK)return this.onEnd(n),!(this.ended=!0);f.next_out&&(0!==f.avail_out&&n!==o.Z_STREAM_END&&(0!==f.avail_in||a!==o.Z_FINISH&&a!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(h=s.utf8border(f.output,f.next_out),u=f.next_out-h,l=s.buf2string(f.output,h),f.next_out=u,f.avail_out=p-u,u&&i.arraySet(f.output,f.output,h,u,0),this.onData(l)):this.onData(i.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(m=!0)}while((0<f.avail_in||0===f.avail_out)&&n!==o.Z_STREAM_END);return n===o.Z_STREAM_END&&(a=o.Z_FINISH),a===o.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===o.Z_OK):a!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),!(f.avail_out=0))},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){t===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},n.Inflate=l,n.inflate=d,n.inflateRaw=function(t,e){return(e=e||{}).raw=!0,d(t,e)},n.ungzip=d},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])}}return t},n.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,n,r,i){if(e.subarray&&t.subarray)t.set(e.subarray(n,n+r),i);else for(var s=0;s<r;s++)t[i+s]=e[n+s]},flattenChunks:function(t){var e,n,r,i,s,o;for(e=r=0,n=t.length;e<n;e++)r+=t[e].length;for(o=new Uint8Array(r),e=i=0,n=t.length;e<n;e++)s=t[e],o.set(s,i),i+=s.length;return o}},s={arraySet:function(t,e,n,r,i){for(var s=0;s<r;s++)t[i+s]=e[n+s]},flattenChunks:function(t){return[].concat.apply([],t)}};n.setTyped=function(t){t?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,i)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,s))},n.setTyped(r)},{}],42:[function(t,e,n){"use strict";var r=t("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new r.Buf8(256),a=0;a<256;a++)o[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function h(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(t,e));for(var n="",o=0;o<e;o++)n+=String.fromCharCode(t[o]);return n}o[254]=o[254]=1,n.string2buf=function(t){var e,n,i,s,o,a=t.length,h=0;for(s=0;s<a;s++)55296==(64512&(n=t.charCodeAt(s)))&&s+1<a&&56320==(64512&(i=t.charCodeAt(s+1)))&&(n=65536+(n-55296<<10)+(i-56320),s++),h+=n<128?1:n<2048?2:n<65536?3:4;for(e=new r.Buf8(h),s=o=0;o<h;s++)55296==(64512&(n=t.charCodeAt(s)))&&s+1<a&&56320==(64512&(i=t.charCodeAt(s+1)))&&(n=65536+(n-55296<<10)+(i-56320),s++),n<128?e[o++]=n:(n<2048?e[o++]=192|n>>>6:(n<65536?e[o++]=224|n>>>12:(e[o++]=240|n>>>18,e[o++]=128|n>>>12&63),e[o++]=128|n>>>6&63),e[o++]=128|63&n);return e},n.buf2binstring=function(t){return h(t,t.length)},n.binstring2buf=function(t){for(var e=new r.Buf8(t.length),n=0,i=e.length;n<i;n++)e[n]=t.charCodeAt(n);return e},n.buf2string=function(t,e){var n,r,i,s,a=e||t.length,u=new Array(2*a);for(n=r=0;n<a;)if((i=t[n++])<128)u[r++]=i;else if(4<(s=o[i]))u[r++]=65533,n+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&n<a;)i=i<<6|63&t[n++],s--;1<s?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return h(u,r)},n.utf8border=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;0<=n&&128==(192&t[n]);)n--;return n<0||0===n?e:n+o[t[n]]>e?n:e}},{"./common":41}],43:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){for(var i=65535&t|0,s=t>>>16&65535|0,o=0;0!==n;){for(n-=o=2e3<n?2e3:n;s=s+(i=i+e[r++]|0)|0,--o;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(t,e,n){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,n){"use strict";var r=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();e.exports=function(t,e,n,i){var s=r,o=i+n;t^=-1;for(var a=i;a<o;a++)t=t>>>8^s[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,n){"use strict";var r,i=t("../utils/common"),s=t("./trees"),o=t("./adler32"),a=t("./crc32"),h=t("./messages"),u=0,c=0,l=-2,d=2,f=8,p=286,A=30,m=19,g=2*p+1,_=15,w=3,y=258,b=y+w+1,v=42,x=113;function k(t,e){return t.msg=h[e],e}function E(t){return(t<<1)-(4<t?9:0)}function B(t){for(var e=t.length;0<=--e;)t[e]=0}function C(t){var e=t.state,n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(i.arraySet(t.output,e.pending_buf,e.pending_out,n,t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))}function S(t,e){s._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,C(t.strm)}function z(t,e){t.pending_buf[t.pending++]=e}function O(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function T(t,e){var n,r,i=t.max_chain_length,s=t.strstart,o=t.prev_length,a=t.nice_match,h=t.strstart>t.w_size-b?t.strstart-(t.w_size-b):0,u=t.window,c=t.w_mask,l=t.prev,d=t.strstart+y,f=u[s+o-1],p=u[s+o];t.prev_length>=t.good_match&&(i>>=2),a>t.lookahead&&(a=t.lookahead);do{if(u[(n=e)+o]===p&&u[n+o-1]===f&&u[n]===u[s]&&u[++n]===u[s+1]){s+=2,n++;do{}while(u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&s<d);if(r=y-(d-s),s=d-y,o<r){if(t.match_start=e,a<=(o=r))break;f=u[s+o-1],p=u[s+o]}}}while((e=l[e&c])>h&&0!=--i);return o<=t.lookahead?o:t.lookahead}function I(t){var e,n,r,s,h,u,c,l,d,f,p=t.w_size;do{if(s=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-b)){for(i.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=n=t.hash_size;r=t.head[--e],t.head[e]=p<=r?r-p:0,--n;);for(e=n=p;r=t.prev[--e],t.prev[e]=p<=r?r-p:0,--n;);s+=p}if(0===t.strm.avail_in)break;if(u=t.strm,c=t.window,l=t.strstart+t.lookahead,f=void 0,(d=s)<(f=u.avail_in)&&(f=d),n=0===f?0:(u.avail_in-=f,i.arraySet(c,u.input,u.next_in,f,l),1===u.state.wrap?u.adler=o(u.adler,c,f,l):2===u.state.wrap&&(u.adler=a(u.adler,c,f,l)),u.next_in+=f,u.total_in+=f,f),t.lookahead+=n,t.lookahead+t.insert>=w)for(h=t.strstart-t.insert,t.ins_h=t.window[h],t.ins_h=(t.ins_h<<t.hash_shift^t.window[h+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[h+w-1])&t.hash_mask,t.prev[h&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=h,h++,t.insert--,!(t.lookahead+t.insert<w)););}while(t.lookahead<b&&0!==t.strm.avail_in)}function M(t,e){for(var n,r;;){if(t.lookahead<b){if(I(t),t.lookahead<b&&e===u)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=w&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-b&&(t.match_length=T(t,n)),t.match_length>=w)if(r=s._tr_tally(t,t.strstart-t.match_start,t.match_length-w),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=w){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else r=s._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(r&&(S(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<w-1?t.strstart:w-1,4===e?(S(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(S(t,!1),0===t.strm.avail_out)?1:2}function R(t,e){for(var n,r,i;;){if(t.lookahead<b){if(I(t),t.lookahead<b&&e===u)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=w&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=w-1,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-b&&(t.match_length=T(t,n),t.match_length<=5&&(1===t.strategy||t.match_length===w&&4096<t.strstart-t.match_start)&&(t.match_length=w-1)),t.prev_length>=w&&t.match_length<=t.prev_length){for(i=t.strstart+t.lookahead-w,r=s._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-w),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+w-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=w-1,t.strstart++,r&&(S(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((r=s._tr_tally(t,0,t.window[t.strstart-1]))&&S(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(r=s._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<w-1?t.strstart:w-1,4===e?(S(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(S(t,!1),0===t.strm.avail_out)?1:2}function N(t,e,n,r,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=r,this.func=i}function D(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=f,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*g),this.dyn_dtree=new i.Buf16(2*(2*A+1)),this.bl_tree=new i.Buf16(2*(2*m+1)),B(this.dyn_ltree),B(this.dyn_dtree),B(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(_+1),this.heap=new i.Buf16(2*p+1),B(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*p+1),B(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function F(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=d,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?v:x,t.adler=2===e.wrap?0:1,e.last_flush=u,s._tr_init(e),c):k(t,l)}function j(t){var e=F(t);return e===c&&function(t){t.window_size=2*t.w_size,B(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=w-1,t.match_available=0,t.ins_h=0}(t.state),e}function L(t,e,n,r,s,o){if(!t)return l;var a=1;if(-1===e&&(e=6),r<0?(a=0,r=-r):15<r&&(a=2,r-=16),s<1||9<s||n!==f||r<8||15<r||e<0||9<e||o<0||4<o)return k(t,l);8===r&&(r=9);var h=new D;return(t.state=h).strm=t,h.wrap=a,h.gzhead=null,h.w_bits=r,h.w_size=1<<h.w_bits,h.w_mask=h.w_size-1,h.hash_bits=s+7,h.hash_size=1<<h.hash_bits,h.hash_mask=h.hash_size-1,h.hash_shift=~~((h.hash_bits+w-1)/w),h.window=new i.Buf8(2*h.w_size),h.head=new i.Buf16(h.hash_size),h.prev=new i.Buf16(h.w_size),h.lit_bufsize=1<<s+6,h.pending_buf_size=4*h.lit_bufsize,h.pending_buf=new i.Buf8(h.pending_buf_size),h.d_buf=1*h.lit_bufsize,h.l_buf=3*h.lit_bufsize,h.level=e,h.strategy=o,h.method=n,j(t)}r=[new N(0,0,0,0,(function(t,e){var n=65535;for(n>t.pending_buf_size-5&&(n=t.pending_buf_size-5);;){if(t.lookahead<=1){if(I(t),0===t.lookahead&&e===u)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var r=t.block_start+n;if((0===t.strstart||t.strstart>=r)&&(t.lookahead=t.strstart-r,t.strstart=r,S(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-b&&(S(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(S(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(S(t,!1),t.strm.avail_out),1)})),new N(4,4,8,4,M),new N(4,5,16,8,M),new N(4,6,32,32,M),new N(4,4,16,16,R),new N(8,16,32,32,R),new N(8,16,128,128,R),new N(8,32,128,256,R),new N(32,128,258,1024,R),new N(32,258,258,4096,R)],n.deflateInit=function(t,e){return L(t,e,f,15,8,0)},n.deflateInit2=L,n.deflateReset=j,n.deflateResetKeep=F,n.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?l:(t.state.gzhead=e,c):l},n.deflate=function(t,e){var n,i,o,h;if(!t||!t.state||5<e||e<0)return t?k(t,l):l;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&4!==e)return k(t,0===t.avail_out?-5:l);if(i.strm=t,n=i.last_flush,i.last_flush=e,i.status===v)if(2===i.wrap)t.adler=0,z(i,31),z(i,139),z(i,8),i.gzhead?(z(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),z(i,255&i.gzhead.time),z(i,i.gzhead.time>>8&255),z(i,i.gzhead.time>>16&255),z(i,i.gzhead.time>>24&255),z(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),z(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(z(i,255&i.gzhead.extra.length),z(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=a(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(z(i,0),z(i,0),z(i,0),z(i,0),z(i,0),z(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),z(i,3),i.status=x);else{var d=f+(i.w_bits-8<<4)<<8;d|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(d|=32),d+=31-d%31,i.status=x,O(i,d),0!==i.strstart&&(O(i,t.adler>>>16),O(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(o=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),C(t),o=i.pending,i.pending!==i.pending_buf_size));)z(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),C(t),o=i.pending,i.pending===i.pending_buf_size)){h=1;break}h=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,z(i,h)}while(0!==h);i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),0===h&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),C(t),o=i.pending,i.pending===i.pending_buf_size)){h=1;break}h=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,z(i,h)}while(0!==h);i.gzhead.hcrc&&i.pending>o&&(t.adler=a(t.adler,i.pending_buf,i.pending-o,o)),0===h&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&C(t),i.pending+2<=i.pending_buf_size&&(z(i,255&t.adler),z(i,t.adler>>8&255),t.adler=0,i.status=x)):i.status=x),0!==i.pending){if(C(t),0===t.avail_out)return i.last_flush=-1,c}else if(0===t.avail_in&&E(e)<=E(n)&&4!==e)return k(t,-5);if(666===i.status&&0!==t.avail_in)return k(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==u&&666!==i.status){var p=2===i.strategy?function(t,e){for(var n;;){if(0===t.lookahead&&(I(t),0===t.lookahead)){if(e===u)return 1;break}if(t.match_length=0,n=s._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(S(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(S(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(S(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var n,r,i,o,a=t.window;;){if(t.lookahead<=y){if(I(t),t.lookahead<=y&&e===u)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=w&&0<t.strstart&&(r=a[i=t.strstart-1])===a[++i]&&r===a[++i]&&r===a[++i]){o=t.strstart+y;do{}while(r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&i<o);t.match_length=y-(o-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=w?(n=s._tr_tally(t,1,t.match_length-w),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=s._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(S(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(S(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(S(t,!1),0===t.strm.avail_out)?1:2}(i,e):r[i.level].func(i,e);if(3!==p&&4!==p||(i.status=666),1===p||3===p)return 0===t.avail_out&&(i.last_flush=-1),c;if(2===p&&(1===e?s._tr_align(i):5!==e&&(s._tr_stored_block(i,0,0,!1),3===e&&(B(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),C(t),0===t.avail_out))return i.last_flush=-1,c}return 4!==e?c:i.wrap<=0?1:(2===i.wrap?(z(i,255&t.adler),z(i,t.adler>>8&255),z(i,t.adler>>16&255),z(i,t.adler>>24&255),z(i,255&t.total_in),z(i,t.total_in>>8&255),z(i,t.total_in>>16&255),z(i,t.total_in>>24&255)):(O(i,t.adler>>>16),O(i,65535&t.adler)),C(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?c:1)},n.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==v&&69!==e&&73!==e&&91!==e&&103!==e&&e!==x&&666!==e?k(t,l):(t.state=null,e===x?k(t,-3):c):l},n.deflateSetDictionary=function(t,e){var n,r,s,a,h,u,d,f,p=e.length;if(!t||!t.state)return l;if(2===(a=(n=t.state).wrap)||1===a&&n.status!==v||n.lookahead)return l;for(1===a&&(t.adler=o(t.adler,e,p,0)),n.wrap=0,p>=n.w_size&&(0===a&&(B(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new i.Buf8(n.w_size),i.arraySet(f,e,p-n.w_size,n.w_size,0),e=f,p=n.w_size),h=t.avail_in,u=t.next_in,d=t.input,t.avail_in=p,t.next_in=0,t.input=e,I(n);n.lookahead>=w;){for(r=n.strstart,s=n.lookahead-(w-1);n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+w-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++,--s;);n.strstart=r,n.lookahead=w-1,I(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=w-1,n.match_available=0,t.next_in=u,t.input=d,t.avail_in=h,n.wrap=a,c},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,n){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,n){"use strict";e.exports=function(t,e){var n,r,i,s,o,a,h,u,c,l,d,f,p,A,m,g,_,w,y,b,v,x,k,E,B;n=t.state,r=t.next_in,E=t.input,i=r+(t.avail_in-5),s=t.next_out,B=t.output,o=s-(e-t.avail_out),a=s+(t.avail_out-257),h=n.dmax,u=n.wsize,c=n.whave,l=n.wnext,d=n.window,f=n.hold,p=n.bits,A=n.lencode,m=n.distcode,g=(1<<n.lenbits)-1,_=(1<<n.distbits)-1;t:do{p<15&&(f+=E[r++]<<p,p+=8,f+=E[r++]<<p,p+=8),w=A[f&g];e:for(;;){if(f>>>=y=w>>>24,p-=y,0==(y=w>>>16&255))B[s++]=65535&w;else{if(!(16&y)){if(0==(64&y)){w=A[(65535&w)+(f&(1<<y)-1)];continue e}if(32&y){n.mode=12;break t}t.msg="invalid literal/length code",n.mode=30;break t}b=65535&w,(y&=15)&&(p<y&&(f+=E[r++]<<p,p+=8),b+=f&(1<<y)-1,f>>>=y,p-=y),p<15&&(f+=E[r++]<<p,p+=8,f+=E[r++]<<p,p+=8),w=m[f&_];n:for(;;){if(f>>>=y=w>>>24,p-=y,!(16&(y=w>>>16&255))){if(0==(64&y)){w=m[(65535&w)+(f&(1<<y)-1)];continue n}t.msg="invalid distance code",n.mode=30;break t}if(v=65535&w,p<(y&=15)&&(f+=E[r++]<<p,(p+=8)<y&&(f+=E[r++]<<p,p+=8)),h<(v+=f&(1<<y)-1)){t.msg="invalid distance too far back",n.mode=30;break t}if(f>>>=y,p-=y,(y=s-o)<v){if(c<(y=v-y)&&n.sane){t.msg="invalid distance too far back",n.mode=30;break t}if(k=d,(x=0)===l){if(x+=u-y,y<b){for(b-=y;B[s++]=d[x++],--y;);x=s-v,k=B}}else if(l<y){if(x+=u+l-y,(y-=l)<b){for(b-=y;B[s++]=d[x++],--y;);if(x=0,l<b){for(b-=y=l;B[s++]=d[x++],--y;);x=s-v,k=B}}}else if(x+=l-y,y<b){for(b-=y;B[s++]=d[x++],--y;);x=s-v,k=B}for(;2<b;)B[s++]=k[x++],B[s++]=k[x++],B[s++]=k[x++],b-=3;b&&(B[s++]=k[x++],1<b&&(B[s++]=k[x++]))}else{for(x=s-v;B[s++]=B[x++],B[s++]=B[x++],B[s++]=B[x++],2<(b-=3););b&&(B[s++]=B[x++],1<b&&(B[s++]=B[x++]))}break}}break}}while(r<i&&s<a);r-=b=p>>3,f&=(1<<(p-=b<<3))-1,t.next_in=r,t.next_out=s,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=s<a?a-s+257:257-(s-a),n.hold=f,n.bits=p}},{}],49:[function(t,e,n){"use strict";var r=t("../utils/common"),i=t("./adler32"),s=t("./crc32"),o=t("./inffast"),a=t("./inftrees"),h=0,u=-2,c=1,l=852,d=592;function f(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function p(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function A(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=c,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new r.Buf32(l),e.distcode=e.distdyn=new r.Buf32(d),e.sane=1,e.back=-1,h):u}function m(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,A(t)):u}function g(t,e){var n,r;return t&&t.state?(r=t.state,e<0?(n=0,e=-e):(n=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?u:(null!==r.window&&r.wbits!==e&&(r.window=null),r.wrap=n,r.wbits=e,m(t))):u}function _(t,e){var n,r;return t?(r=new p,(t.state=r).window=null,(n=g(t,e))!==h&&(t.state=null),n):u}var w,y,b=!0;function v(t){if(b){var e;for(w=new r.Buf32(512),y=new r.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(a(1,t.lens,0,288,w,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;a(2,t.lens,0,32,y,0,t.work,{bits:5}),b=!1}t.lencode=w,t.lenbits=9,t.distcode=y,t.distbits=5}function x(t,e,n,i){var s,o=t.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new r.Buf8(o.wsize)),i>=o.wsize?(r.arraySet(o.window,e,n-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):(i<(s=o.wsize-o.wnext)&&(s=i),r.arraySet(o.window,e,n-i,s,o.wnext),(i-=s)?(r.arraySet(o.window,e,n-i,i,0),o.wnext=i,o.whave=o.wsize):(o.wnext+=s,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=s))),0}n.inflateReset=m,n.inflateReset2=g,n.inflateResetKeep=A,n.inflateInit=function(t){return _(t,15)},n.inflateInit2=_,n.inflate=function(t,e){var n,l,d,p,A,m,g,_,w,y,b,k,E,B,C,S,z,O,T,I,M,R,N,D,F=0,j=new r.Buf8(4),L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return u;12===(n=t.state).mode&&(n.mode=13),A=t.next_out,d=t.output,g=t.avail_out,p=t.next_in,l=t.input,m=t.avail_in,_=n.hold,w=n.bits,y=m,b=g,R=h;t:for(;;)switch(n.mode){case c:if(0===n.wrap){n.mode=13;break}for(;w<16;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(2&n.wrap&&35615===_){j[n.check=0]=255&_,j[1]=_>>>8&255,n.check=s(n.check,j,2,0),w=_=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",n.mode=30;break}if(8!=(15&_)){t.msg="unknown compression method",n.mode=30;break}if(w-=4,M=8+(15&(_>>>=4)),0===n.wbits)n.wbits=M;else if(M>n.wbits){t.msg="invalid window size",n.mode=30;break}n.dmax=1<<M,t.adler=n.check=1,n.mode=512&_?10:12,w=_=0;break;case 2:for(;w<16;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(n.flags=_,8!=(255&n.flags)){t.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=_>>8&1),512&n.flags&&(j[0]=255&_,j[1]=_>>>8&255,n.check=s(n.check,j,2,0)),w=_=0,n.mode=3;case 3:for(;w<32;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.head&&(n.head.time=_),512&n.flags&&(j[0]=255&_,j[1]=_>>>8&255,j[2]=_>>>16&255,j[3]=_>>>24&255,n.check=s(n.check,j,4,0)),w=_=0,n.mode=4;case 4:for(;w<16;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.head&&(n.head.xflags=255&_,n.head.os=_>>8),512&n.flags&&(j[0]=255&_,j[1]=_>>>8&255,n.check=s(n.check,j,2,0)),w=_=0,n.mode=5;case 5:if(1024&n.flags){for(;w<16;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.length=_,n.head&&(n.head.extra_len=_),512&n.flags&&(j[0]=255&_,j[1]=_>>>8&255,n.check=s(n.check,j,2,0)),w=_=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(m<(k=n.length)&&(k=m),k&&(n.head&&(M=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,l,p,k,M)),512&n.flags&&(n.check=s(n.check,l,k,p)),m-=k,p+=k,n.length-=k),n.length))break t;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===m)break t;for(k=0;M=l[p+k++],n.head&&M&&n.length<65536&&(n.head.name+=String.fromCharCode(M)),M&&k<m;);if(512&n.flags&&(n.check=s(n.check,l,k,p)),m-=k,p+=k,M)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===m)break t;for(k=0;M=l[p+k++],n.head&&M&&n.length<65536&&(n.head.comment+=String.fromCharCode(M)),M&&k<m;);if(512&n.flags&&(n.check=s(n.check,l,k,p)),m-=k,p+=k,M)break t}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;w<16;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(_!==(65535&n.check)){t.msg="header crc mismatch",n.mode=30;break}w=_=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=12;break;case 10:for(;w<32;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}t.adler=n.check=f(_),w=_=0,n.mode=11;case 11:if(0===n.havedict)return t.next_out=A,t.avail_out=g,t.next_in=p,t.avail_in=m,n.hold=_,n.bits=w,2;t.adler=n.check=1,n.mode=12;case 12:if(5===e||6===e)break t;case 13:if(n.last){_>>>=7&w,w-=7&w,n.mode=27;break}for(;w<3;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}switch(n.last=1&_,w-=1,3&(_>>>=1)){case 0:n.mode=14;break;case 1:if(v(n),n.mode=20,6!==e)break;_>>>=2,w-=2;break t;case 2:n.mode=17;break;case 3:t.msg="invalid block type",n.mode=30}_>>>=2,w-=2;break;case 14:for(_>>>=7&w,w-=7&w;w<32;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if((65535&_)!=(_>>>16^65535)){t.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&_,w=_=0,n.mode=15,6===e)break t;case 15:n.mode=16;case 16:if(k=n.length){if(m<k&&(k=m),g<k&&(k=g),0===k)break t;r.arraySet(d,l,p,k,A),m-=k,p+=k,g-=k,A+=k,n.length-=k;break}n.mode=12;break;case 17:for(;w<14;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(n.nlen=257+(31&_),_>>>=5,w-=5,n.ndist=1+(31&_),_>>>=5,w-=5,n.ncode=4+(15&_),_>>>=4,w-=4,286<n.nlen||30<n.ndist){t.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;w<3;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.lens[L[n.have++]]=7&_,_>>>=3,w-=3}for(;n.have<19;)n.lens[L[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,N={bits:n.lenbits},R=a(0,n.lens,0,19,n.lencode,0,n.work,N),n.lenbits=N.bits,R){t.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;S=(F=n.lencode[_&(1<<n.lenbits)-1])>>>16&255,z=65535&F,!((C=F>>>24)<=w);){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(z<16)_>>>=C,w-=C,n.lens[n.have++]=z;else{if(16===z){for(D=C+2;w<D;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(_>>>=C,w-=C,0===n.have){t.msg="invalid bit length repeat",n.mode=30;break}M=n.lens[n.have-1],k=3+(3&_),_>>>=2,w-=2}else if(17===z){for(D=C+3;w<D;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}w-=C,M=0,k=3+(7&(_>>>=C)),_>>>=3,w-=3}else{for(D=C+7;w<D;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}w-=C,M=0,k=11+(127&(_>>>=C)),_>>>=7,w-=7}if(n.have+k>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=30;break}for(;k--;)n.lens[n.have++]=M}}if(30===n.mode)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,N={bits:n.lenbits},R=a(1,n.lens,0,n.nlen,n.lencode,0,n.work,N),n.lenbits=N.bits,R){t.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,N={bits:n.distbits},R=a(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,N),n.distbits=N.bits,R){t.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===e)break t;case 20:n.mode=21;case 21:if(6<=m&&258<=g){t.next_out=A,t.avail_out=g,t.next_in=p,t.avail_in=m,n.hold=_,n.bits=w,o(t,b),A=t.next_out,d=t.output,g=t.avail_out,p=t.next_in,l=t.input,m=t.avail_in,_=n.hold,w=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;S=(F=n.lencode[_&(1<<n.lenbits)-1])>>>16&255,z=65535&F,!((C=F>>>24)<=w);){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(S&&0==(240&S)){for(O=C,T=S,I=z;S=(F=n.lencode[I+((_&(1<<O+T)-1)>>O)])>>>16&255,z=65535&F,!(O+(C=F>>>24)<=w);){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}_>>>=O,w-=O,n.back+=O}if(_>>>=C,w-=C,n.back+=C,n.length=z,0===S){n.mode=26;break}if(32&S){n.back=-1,n.mode=12;break}if(64&S){t.msg="invalid literal/length code",n.mode=30;break}n.extra=15&S,n.mode=22;case 22:if(n.extra){for(D=n.extra;w<D;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.length+=_&(1<<n.extra)-1,_>>>=n.extra,w-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;S=(F=n.distcode[_&(1<<n.distbits)-1])>>>16&255,z=65535&F,!((C=F>>>24)<=w);){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(0==(240&S)){for(O=C,T=S,I=z;S=(F=n.distcode[I+((_&(1<<O+T)-1)>>O)])>>>16&255,z=65535&F,!(O+(C=F>>>24)<=w);){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}_>>>=O,w-=O,n.back+=O}if(_>>>=C,w-=C,n.back+=C,64&S){t.msg="invalid distance code",n.mode=30;break}n.offset=z,n.extra=15&S,n.mode=24;case 24:if(n.extra){for(D=n.extra;w<D;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}n.offset+=_&(1<<n.extra)-1,_>>>=n.extra,w-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===g)break t;if(k=b-g,n.offset>k){if((k=n.offset-k)>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=30;break}E=k>n.wnext?(k-=n.wnext,n.wsize-k):n.wnext-k,k>n.length&&(k=n.length),B=n.window}else B=d,E=A-n.offset,k=n.length;for(g<k&&(k=g),g-=k,n.length-=k;d[A++]=B[E++],--k;);0===n.length&&(n.mode=21);break;case 26:if(0===g)break t;d[A++]=n.length,g--,n.mode=21;break;case 27:if(n.wrap){for(;w<32;){if(0===m)break t;m--,_|=l[p++]<<w,w+=8}if(b-=g,t.total_out+=b,n.total+=b,b&&(t.adler=n.check=n.flags?s(n.check,d,b,A-b):i(n.check,d,b,A-b)),b=g,(n.flags?_:f(_))!==n.check){t.msg="incorrect data check",n.mode=30;break}w=_=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;w<32;){if(0===m)break t;m--,_+=l[p++]<<w,w+=8}if(_!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=30;break}w=_=0}n.mode=29;case 29:R=1;break t;case 30:R=-3;break t;case 31:return-4;default:return u}return t.next_out=A,t.avail_out=g,t.next_in=p,t.avail_in=m,n.hold=_,n.bits=w,(n.wsize||b!==t.avail_out&&n.mode<30&&(n.mode<27||4!==e))&&x(t,t.output,t.next_out,b-t.avail_out)?(n.mode=31,-4):(y-=t.avail_in,b-=t.avail_out,t.total_in+=y,t.total_out+=b,n.total+=b,n.wrap&&b&&(t.adler=n.check=n.flags?s(n.check,d,b,t.next_out-b):i(n.check,d,b,t.next_out-b)),t.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==y&&0===b||4===e)&&R===h&&(R=-5),R)},n.inflateEnd=function(t){if(!t||!t.state)return u;var e=t.state;return e.window&&(e.window=null),t.state=null,h},n.inflateGetHeader=function(t,e){var n;return t&&t.state?0==(2&(n=t.state).wrap)?u:((n.head=e).done=!1,h):u},n.inflateSetDictionary=function(t,e){var n,r=e.length;return t&&t.state?0!==(n=t.state).wrap&&11!==n.mode?u:11===n.mode&&i(1,e,r,0)!==n.check?-3:x(t,e,r,r)?(n.mode=31,-4):(n.havedict=1,h):u},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,n){"use strict";var r=t("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],s=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,n,h,u,c,l,d){var f,p,A,m,g,_,w,y,b,v=d.bits,x=0,k=0,E=0,B=0,C=0,S=0,z=0,O=0,T=0,I=0,M=null,R=0,N=new r.Buf16(16),D=new r.Buf16(16),F=null,j=0;for(x=0;x<=15;x++)N[x]=0;for(k=0;k<h;k++)N[e[n+k]]++;for(C=v,B=15;1<=B&&0===N[B];B--);if(B<C&&(C=B),0===B)return u[c++]=20971520,u[c++]=20971520,d.bits=1,0;for(E=1;E<B&&0===N[E];E++);for(C<E&&(C=E),x=O=1;x<=15;x++)if(O<<=1,(O-=N[x])<0)return-1;if(0<O&&(0===t||1!==B))return-1;for(D[1]=0,x=1;x<15;x++)D[x+1]=D[x]+N[x];for(k=0;k<h;k++)0!==e[n+k]&&(l[D[e[n+k]]++]=k);if(_=0===t?(M=F=l,19):1===t?(M=i,R-=257,F=s,j-=257,256):(M=o,F=a,-1),x=E,g=c,z=k=I=0,A=-1,m=(T=1<<(S=C))-1,1===t&&852<T||2===t&&592<T)return 1;for(;;){for(w=x-z,b=l[k]<_?(y=0,l[k]):l[k]>_?(y=F[j+l[k]],M[R+l[k]]):(y=96,0),f=1<<x-z,E=p=1<<S;u[g+(I>>z)+(p-=f)]=w<<24|y<<16|b|0,0!==p;);for(f=1<<x-1;I&f;)f>>=1;if(0!==f?(I&=f-1,I+=f):I=0,k++,0==--N[x]){if(x===B)break;x=e[n+l[k]]}if(C<x&&(I&m)!==A){for(0===z&&(z=C),g+=E,O=1<<(S=x-z);S+z<B&&!((O-=N[S+z])<=0);)S++,O<<=1;if(T+=1<<S,1===t&&852<T||2===t&&592<T)return 1;u[A=I&m]=C<<24|S<<16|g-c|0}}return 0!==I&&(u[g+I]=x-z<<24|64<<16|0),d.bits=C,0}},{"../utils/common":41}],51:[function(t,e,n){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,n){"use strict";var r=t("../utils/common");function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=256,o=286,a=30,h=15,u=16,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],d=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);i(p);var A=new Array(60);i(A);var m=new Array(512);i(m);var g=new Array(256);i(g);var _=new Array(29);i(_);var w,y,b,v=new Array(a);function x(t,e,n,r,i){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=t&&t.length}function k(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function E(t){return t<256?m[t]:m[256+(t>>>7)]}function B(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function C(t,e,n){t.bi_valid>u-n?(t.bi_buf|=e<<t.bi_valid&65535,B(t,t.bi_buf),t.bi_buf=e>>u-t.bi_valid,t.bi_valid+=n-u):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)}function S(t,e,n){C(t,n[2*e],n[2*e+1])}function z(t,e){for(var n=0;n|=1&t,t>>>=1,n<<=1,0<--e;);return n>>>1}function O(t,e,n){var r,i,s=new Array(h+1),o=0;for(r=1;r<=h;r++)s[r]=o=o+n[r-1]<<1;for(i=0;i<=e;i++){var a=t[2*i+1];0!==a&&(t[2*i]=z(s[a]++,a))}}function T(t){var e;for(e=0;e<o;e++)t.dyn_ltree[2*e]=0;for(e=0;e<a;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function I(t){8<t.bi_valid?B(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function M(t,e,n,r){var i=2*e,s=2*n;return t[i]<t[s]||t[i]===t[s]&&r[e]<=r[n]}function R(t,e,n){for(var r=t.heap[n],i=n<<1;i<=t.heap_len&&(i<t.heap_len&&M(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!M(e,r,t.heap[i],t.depth));)t.heap[n]=t.heap[i],n=i,i<<=1;t.heap[n]=r}function N(t,e,n){var r,i,o,a,h=0;if(0!==t.last_lit)for(;r=t.pending_buf[t.d_buf+2*h]<<8|t.pending_buf[t.d_buf+2*h+1],i=t.pending_buf[t.l_buf+h],h++,0===r?S(t,i,e):(S(t,(o=g[i])+s+1,e),0!==(a=c[o])&&C(t,i-=_[o],a),S(t,o=E(--r),n),0!==(a=l[o])&&C(t,r-=v[o],a)),h<t.last_lit;);S(t,256,e)}function D(t,e){var n,r,i,s=e.dyn_tree,o=e.stat_desc.static_tree,a=e.stat_desc.has_stree,u=e.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=573,n=0;n<u;n++)0!==s[2*n]?(t.heap[++t.heap_len]=c=n,t.depth[n]=0):s[2*n+1]=0;for(;t.heap_len<2;)s[2*(i=t.heap[++t.heap_len]=c<2?++c:0)]=1,t.depth[i]=0,t.opt_len--,a&&(t.static_len-=o[2*i+1]);for(e.max_code=c,n=t.heap_len>>1;1<=n;n--)R(t,s,n);for(i=u;n=t.heap[1],t.heap[1]=t.heap[t.heap_len--],R(t,s,1),r=t.heap[1],t.heap[--t.heap_max]=n,t.heap[--t.heap_max]=r,s[2*i]=s[2*n]+s[2*r],t.depth[i]=(t.depth[n]>=t.depth[r]?t.depth[n]:t.depth[r])+1,s[2*n+1]=s[2*r+1]=i,t.heap[1]=i++,R(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var n,r,i,s,o,a,u=e.dyn_tree,c=e.max_code,l=e.stat_desc.static_tree,d=e.stat_desc.has_stree,f=e.stat_desc.extra_bits,p=e.stat_desc.extra_base,A=e.stat_desc.max_length,m=0;for(s=0;s<=h;s++)t.bl_count[s]=0;for(u[2*t.heap[t.heap_max]+1]=0,n=t.heap_max+1;n<573;n++)A<(s=u[2*u[2*(r=t.heap[n])+1]+1]+1)&&(s=A,m++),u[2*r+1]=s,c<r||(t.bl_count[s]++,o=0,p<=r&&(o=f[r-p]),a=u[2*r],t.opt_len+=a*(s+o),d&&(t.static_len+=a*(l[2*r+1]+o)));if(0!==m){do{for(s=A-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[A]--,m-=2}while(0<m);for(s=A;0!==s;s--)for(r=t.bl_count[s];0!==r;)c<(i=t.heap[--n])||(u[2*i+1]!==s&&(t.opt_len+=(s-u[2*i+1])*u[2*i],u[2*i+1]=s),r--)}}(t,e),O(s,c,t.bl_count)}function F(t,e,n){var r,i,s=-1,o=e[1],a=0,h=7,u=4;for(0===o&&(h=138,u=3),e[2*(n+1)+1]=65535,r=0;r<=n;r++)i=o,o=e[2*(r+1)+1],++a<h&&i===o||(a<u?t.bl_tree[2*i]+=a:0!==i?(i!==s&&t.bl_tree[2*i]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=i,u=(a=0)===o?(h=138,3):i===o?(h=6,3):(h=7,4))}function j(t,e,n){var r,i,s=-1,o=e[1],a=0,h=7,u=4;for(0===o&&(h=138,u=3),r=0;r<=n;r++)if(i=o,o=e[2*(r+1)+1],!(++a<h&&i===o)){if(a<u)for(;S(t,i,t.bl_tree),0!=--a;);else 0!==i?(i!==s&&(S(t,i,t.bl_tree),a--),S(t,16,t.bl_tree),C(t,a-3,2)):a<=10?(S(t,17,t.bl_tree),C(t,a-3,3)):(S(t,18,t.bl_tree),C(t,a-11,7));s=i,u=(a=0)===o?(h=138,3):i===o?(h=6,3):(h=7,4)}}i(v);var L=!1;function P(t,e,n,i){C(t,0+(i?1:0),3),function(t,e,n,i){I(t),B(t,n),B(t,~n),r.arraySet(t.pending_buf,t.window,e,n,t.pending),t.pending+=n}(t,e,n)}n._tr_init=function(t){L||(function(){var t,e,n,r,i,s=new Array(h+1);for(r=n=0;r<28;r++)for(_[r]=n,t=0;t<1<<c[r];t++)g[n++]=r;for(g[n-1]=r,r=i=0;r<16;r++)for(v[r]=i,t=0;t<1<<l[r];t++)m[i++]=r;for(i>>=7;r<a;r++)for(v[r]=i<<7,t=0;t<1<<l[r]-7;t++)m[256+i++]=r;for(e=0;e<=h;e++)s[e]=0;for(t=0;t<=143;)p[2*t+1]=8,t++,s[8]++;for(;t<=255;)p[2*t+1]=9,t++,s[9]++;for(;t<=279;)p[2*t+1]=7,t++,s[7]++;for(;t<=287;)p[2*t+1]=8,t++,s[8]++;for(O(p,287,s),t=0;t<a;t++)A[2*t+1]=5,A[2*t]=z(t,5);w=new x(p,c,257,o,h),y=new x(A,l,0,a,h),b=new x(new Array(0),d,0,19,7)}(),L=!0),t.l_desc=new k(t.dyn_ltree,w),t.d_desc=new k(t.dyn_dtree,y),t.bl_desc=new k(t.bl_tree,b),t.bi_buf=0,t.bi_valid=0,T(t)},n._tr_stored_block=P,n._tr_flush_block=function(t,e,n,r){var i,o,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<s;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),D(t,t.l_desc),D(t,t.d_desc),a=function(t){var e;for(F(t,t.dyn_ltree,t.l_desc.max_code),F(t,t.dyn_dtree,t.d_desc.max_code),D(t,t.bl_desc),e=18;3<=e&&0===t.bl_tree[2*f[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!==e?P(t,e,n,r):4===t.strategy||o===i?(C(t,2+(r?1:0),3),N(t,p,A)):(C(t,4+(r?1:0),3),function(t,e,n,r){var i;for(C(t,e-257,5),C(t,n-1,5),C(t,r-4,4),i=0;i<r;i++)C(t,t.bl_tree[2*f[i]+1],3);j(t,t.dyn_ltree,e-1),j(t,t.dyn_dtree,n-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),N(t,t.dyn_ltree,t.dyn_dtree)),T(t),r&&I(t)},n._tr_tally=function(t,e,n){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&n,t.last_lit++,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(g[n]+s+1)]++,t.dyn_dtree[2*E(e)]++),t.last_lit===t.lit_bufsize-1},n._tr_align=function(t){C(t,2,3),S(t,256,p),function(t){16===t.bi_valid?(B(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,n){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){(function(t){!function(t,e){"use strict";if(!t.setImmediate){var n,r,i,s,o=1,a={},h=!1,u=t.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(t);c=c&&c.setTimeout?c:t,n="[object process]"==={}.toString.call(t.process)?function(t){process.nextTick((function(){d(t)}))}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?(s="setImmediate$"+Math.random()+"$",t.addEventListener?t.addEventListener("message",f,!1):t.attachEvent("onmessage",f),function(e){t.postMessage(s+e,"*")}):t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){d(t.data)},function(t){i.port2.postMessage(t)}):u&&"onreadystatechange"in u.createElement("script")?(r=u.documentElement,function(t){var e=u.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,r.removeChild(e),e=null},r.appendChild(e)}):function(t){setTimeout(d,0,t)},c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var i={callback:t,args:e};return a[o]=i,n(o),o++},c.clearImmediate=l}function l(t){delete a[t]}function d(t){if(h)setTimeout(d,0,t);else{var n=a[t];if(n){h=!0;try{!function(t){var n=t.callback,r=t.args;switch(r.length){case 0:n();break;case 1:n(r[0]);break;case 2:n(r[0],r[1]);break;case 3:n(r[0],r[1],r[2]);break;default:n.apply(e,r)}}(n)}finally{l(t),h=!1}}}}function f(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&d(+e.data.slice(s.length))}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},o=[],a=0;a<t.length;a++){var h=t[a],u=r.base?h[0]+r.base:h[0],c=s[u]||0,l="".concat(u," ").concat(c);s[u]=c+1;var d=n(l),f={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=i(f,r);r.byIndex=a,e.splice(a,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=n(s[o]);e[a].references--}for(var h=r(t,i),u=0;u<s.length;u++){var c=n(s[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}s=h}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={id:r,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.u=t=>t+".aa6bd4ba8c43d5e8dd93.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.p="",n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),r=n(795),i=n.n(r),s=n(569),o=n.n(s),a=n(565),h=n.n(a),u=n(216),c=n.n(u),l=n(589),d=n.n(l),f=n(769),p={};function A(t,e){try{if(null==e){const e=localStorage.getItem(t);if(null!=e)return Number(e)}else localStorage.setItem(t,e)}catch(t){console.log(t)}}p.styleTagTransform=d(),p.setAttributes=h(),p.insert=o().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=c(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;const m={},g=[];function _(t,e){if(Array.isArray(t))for(const n of t)_(n,e);else if("object"!=typeof t)y(Object.getOwnPropertyNames(e)),m[t]=Object.assign(m[t]||{},e);else for(const e in t)_(e,t[e])}function w(t){return m[t]||{}}function y(t){g.push(...t)}function b(t,e){let n;const r=t.length,i=[];for(n=0;n<r;n++)i.push(e(t[n]));return i}function v(t){return t%360*Math.PI/180}function x(t){return t.toLowerCase().replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))}function k(t){return t.charAt(0).toUpperCase()+t.slice(1)}function E(t,e,n,r){return null!=e&&null!=n||(r=r||t.bbox(),null==e?e=r.width/r.height*n:null==n&&(n=r.height/r.width*e)),{width:e,height:n}}function B(t,e){const n=t.origin;let r=null!=t.ox?t.ox:null!=t.originX?t.originX:"center",i=null!=t.oy?t.oy:null!=t.originY?t.originY:"center";null!=n&&([r,i]=Array.isArray(n)?n:"object"==typeof n?[n.x,n.y]:[n,n]);const s="string"==typeof r,o="string"==typeof i;if(s||o){const{height:t,width:n,x:a,y:h}=e.bbox();s&&(r=r.includes("left")?a:r.includes("right")?a+n:a+n/2),o&&(i=i.includes("top")?h:i.includes("bottom")?h+t:h+t/2)}return[r,i]}const C="http://www.w3.org/2000/svg",S="http://www.w3.org/2000/xmlns/",z="http://www.w3.org/1999/xlink",O={window:"undefined"==typeof window?null:window,document:"undefined"==typeof document?null:document};class T{}const I={},M="___SYMBOL___ROOT___";function R(t,e=C){return O.document.createElementNS(e,t)}function N(t,e=!1){if(t instanceof T)return t;if("object"==typeof t)return j(t);if(null==t)return new I[M];if("string"==typeof t&&"<"!==t.charAt(0))return j(O.document.querySelector(t));const n=e?O.document.createElement("div"):R("svg");return n.innerHTML=t,t=j(n.firstChild),n.removeChild(n.firstChild),t}function D(t,e){return e&&e.ownerDocument&&e instanceof e.ownerDocument.defaultView.Node?e:R(t)}function F(t){if(!t)return null;if(t.instance instanceof T)return t.instance;if("#document-fragment"===t.nodeName)return new I.Fragment(t);let e=k(t.nodeName||"Dom");return"LinearGradient"===e||"RadialGradient"===e?e="Gradient":I[e]||(e="Dom"),new I[e](t)}let j=F;function L(t,e=t.name,n=!1){return I[e]=t,n&&(I[M]=t),y(Object.getOwnPropertyNames(t.prototype)),t}let P=1e3;function U(t){return"Svgjs"+k(t)+P++}function W(t){for(let e=t.children.length-1;e>=0;e--)W(t.children[e]);return t.id?(t.id=U(t.nodeName),t):t}function Z(t,e){let n,r;for(r=(t=Array.isArray(t)?t:[t]).length-1;r>=0;r--)for(n in e)t[r].prototype[n]=e[n]}function q(t){return function(...e){const n=e[e.length-1];return!n||n.constructor!==Object||n instanceof Array?t.apply(this,e):t.apply(this,e.slice(0,-1)).attr(n)}}_("Dom",{siblings:function(){return this.parent().children()},position:function(){return this.parent().index(this)},next:function(){return this.siblings()[this.position()+1]},prev:function(){return this.siblings()[this.position()-1]},forward:function(){const t=this.position();return this.parent().add(this.remove(),t+1),this},backward:function(){const t=this.position();return this.parent().add(this.remove(),t?t-1:0),this},front:function(){return this.parent().add(this.remove()),this},back:function(){return this.parent().add(this.remove(),0),this},before:function(t){(t=N(t)).remove();const e=this.position();return this.parent().add(t,e),this},after:function(t){(t=N(t)).remove();const e=this.position();return this.parent().add(t,e+1),this},insertBefore:function(t){return(t=N(t)).before(this),this},insertAfter:function(t){return(t=N(t)).after(this),this}});const H=/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,G=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,Y=/rgb\((\d+),(\d+),(\d+)\)/,X=/(#[a-z_][a-z0-9\-_]*)/i,K=/\)\s*,?\s*/,V=/\s/g,$=/^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i,J=/^rgb\(/,Q=/^(\s+)?$/,tt=/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,et=/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,nt=/[\s,]+/,rt=/[MLHVCSQTAZ]/i;function it(t){const e=Math.round(t),n=Math.max(0,Math.min(255,e)).toString(16);return 1===n.length?"0"+n:n}function st(t,e){for(let n=e.length;n--;)if(null==t[e[n]])return!1;return!0}function ot(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}_("Dom",{classes:function(){const t=this.attr("class");return null==t?[]:t.trim().split(nt)},hasClass:function(t){return-1!==this.classes().indexOf(t)},addClass:function(t){if(!this.hasClass(t)){const e=this.classes();e.push(t),this.attr("class",e.join(" "))}return this},removeClass:function(t){return this.hasClass(t)&&this.attr("class",this.classes().filter((function(e){return e!==t})).join(" ")),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t)}}),_("Dom",{css:function(t,e){const n={};if(0===arguments.length)return this.node.style.cssText.split(/\s*;\s*/).filter((function(t){return!!t.length})).forEach((function(t){const e=t.split(/\s*:\s*/);n[e[0]]=e[1]})),n;if(arguments.length<2){if(Array.isArray(t)){for(const e of t){const t=x(e);n[e]=this.node.style[t]}return n}if("string"==typeof t)return this.node.style[x(t)];if("object"==typeof t)for(const e in t)this.node.style[x(e)]=null==t[e]||Q.test(t[e])?"":t[e]}return 2===arguments.length&&(this.node.style[x(t)]=null==e||Q.test(e)?"":e),this},show:function(){return this.css("display","")},hide:function(){return this.css("display","none")},visible:function(){return"none"!==this.css("display")}}),_("Dom",{data:function(t,e,n){if(null==t)return this.data(b(function(t,e){let n;const r=t.length,i=[];for(n=0;n<r;n++)e(t[n])&&i.push(t[n]);return i}(this.node.attributes,(t=>0===t.nodeName.indexOf("data-"))),(t=>t.nodeName.slice(5))));if(t instanceof Array){const e={};for(const n of t)e[n]=this.data(n);return e}if("object"==typeof t)for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch(e){return this.attr("data-"+t)}else this.attr("data-"+t,null===e?null:!0===n||"string"==typeof e||"number"==typeof e?e:JSON.stringify(e));return this}}),_("Dom",{remember:function(t,e){if("object"==typeof arguments[0])for(const e in t)this.remember(e,t[e]);else{if(1===arguments.length)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(0===arguments.length)this._memory={};else for(let t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory=this._memory||{}}});class at{constructor(...t){this.init(...t)}static isColor(t){return t&&(t instanceof at||this.isRgb(t)||this.test(t))}static isRgb(t){return t&&"number"==typeof t.r&&"number"==typeof t.g&&"number"==typeof t.b}static random(t="vibrant",e,n){const{random:r,round:i,sin:s,PI:o}=Math;if("vibrant"===t){const t=24*r()+57,e=38*r()+45,n=360*r();return new at(t,e,n,"lch")}if("sine"===t){const t=i(80*s(2*o*(e=null==e?r():e)/.5+.01)+150),n=i(50*s(2*o*e/.5+4.6)+200),a=i(100*s(2*o*e/.5+2.3)+150);return new at(t,n,a)}if("pastel"===t){const t=8*r()+86,e=17*r()+9,n=360*r();return new at(t,e,n,"lch")}if("dark"===t){const t=10+10*r(),e=50*r()+86,n=360*r();return new at(t,e,n,"lch")}if("rgb"===t){const t=255*r(),e=255*r(),n=255*r();return new at(t,e,n)}if("lab"===t){const t=100*r(),e=256*r()-128,n=256*r()-128;return new at(t,e,n,"lab")}if("grey"===t){const t=255*r();return new at(t,t,t)}throw new Error("Unsupported random color mode")}static test(t){return"string"==typeof t&&($.test(t)||J.test(t))}cmyk(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=Math.min(1-r,1-i,1-s);return 1===o?new at(0,0,0,1,"cmyk"):new at((1-r-o)/(1-o),(1-i-o)/(1-o),(1-s-o)/(1-o),o,"cmyk")}hsl(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=Math.max(r,i,s),a=Math.min(r,i,s),h=(o+a)/2,u=o===a,c=o-a;return new at(360*(u?0:o===r?((i-s)/c+(i<s?6:0))/6:o===i?((s-r)/c+2)/6:o===s?((r-i)/c+4)/6:0),100*(u?0:h>.5?c/(2-o-a):c/(o+a)),100*h,"hsl")}init(t=0,e=0,n=0,r=0,i="rgb"){if(t=t||0,this.space)for(const t in this.space)delete this[this.space[t]];if("number"==typeof t)i="string"==typeof r?r:i,r="string"==typeof r?0:r,Object.assign(this,{_a:t,_b:e,_c:n,_d:r,space:i});else if(t instanceof Array)this.space=e||("string"==typeof t[3]?t[3]:t[4])||"rgb",Object.assign(this,{_a:t[0],_b:t[1],_c:t[2],_d:t[3]||0});else if(t instanceof Object){const n=function(t,e){const n=st(t,"rgb")?{_a:t.r,_b:t.g,_c:t.b,_d:0,space:"rgb"}:st(t,"xyz")?{_a:t.x,_b:t.y,_c:t.z,_d:0,space:"xyz"}:st(t,"hsl")?{_a:t.h,_b:t.s,_c:t.l,_d:0,space:"hsl"}:st(t,"lab")?{_a:t.l,_b:t.a,_c:t.b,_d:0,space:"lab"}:st(t,"lch")?{_a:t.l,_b:t.c,_c:t.h,_d:0,space:"lch"}:st(t,"cmyk")?{_a:t.c,_b:t.m,_c:t.y,_d:t.k,space:"cmyk"}:{_a:0,_b:0,_c:0,space:"rgb"};return n.space=e||n.space,n}(t,e);Object.assign(this,n)}else if("string"==typeof t)if(J.test(t)){const e=t.replace(V,""),[n,r,i]=Y.exec(e).slice(1,4).map((t=>parseInt(t)));Object.assign(this,{_a:n,_b:r,_c:i,_d:0,space:"rgb"})}else{if(!$.test(t))throw Error("Unsupported string format, can't construct Color");{const e=t=>parseInt(t,16),[,n,r,i]=G.exec(function(t){return 4===t.length?["#",t.substring(1,2),t.substring(1,2),t.substring(2,3),t.substring(2,3),t.substring(3,4),t.substring(3,4)].join(""):t}(t)).map(e);Object.assign(this,{_a:n,_b:r,_c:i,_d:0,space:"rgb"})}}const{_a:s,_b:o,_c:a,_d:h}=this,u="rgb"===this.space?{r:s,g:o,b:a}:"xyz"===this.space?{x:s,y:o,z:a}:"hsl"===this.space?{h:s,s:o,l:a}:"lab"===this.space?{l:s,a:o,b:a}:"lch"===this.space?{l:s,c:o,h:a}:"cmyk"===this.space?{c:s,m:o,y:a,k:h}:{};Object.assign(this,u)}lab(){const{x:t,y:e,z:n}=this.xyz();return new at(116*e-16,500*(t-e),200*(e-n),"lab")}lch(){const{l:t,a:e,b:n}=this.lab(),r=Math.sqrt(e**2+n**2);let i=180*Math.atan2(n,e)/Math.PI;return i<0&&(i*=-1,i=360-i),new at(t,r,i,"lch")}rgb(){if("rgb"===this.space)return this;if("lab"===(t=this.space)||"xyz"===t||"lch"===t){let{x:t,y:e,z:n}=this;if("lab"===this.space||"lch"===this.space){let{l:r,a:i,b:s}=this;if("lch"===this.space){const{c:t,h:e}=this,n=Math.PI/180;i=t*Math.cos(n*e),s=t*Math.sin(n*e)}const o=(r+16)/116,a=i/500+o,h=o-s/200,u=16/116,c=.008856,l=7.787;t=.95047*(a**3>c?a**3:(a-u)/l),e=1*(o**3>c?o**3:(o-u)/l),n=1.08883*(h**3>c?h**3:(h-u)/l)}const r=3.2406*t+-1.5372*e+-.4986*n,i=-.9689*t+1.8758*e+.0415*n,s=.0557*t+-.204*e+1.057*n,o=Math.pow,a=.0031308,h=r>a?1.055*o(r,1/2.4)-.055:12.92*r,u=i>a?1.055*o(i,1/2.4)-.055:12.92*i,c=s>a?1.055*o(s,1/2.4)-.055:12.92*s;return new at(255*h,255*u,255*c)}if("hsl"===this.space){let{h:t,s:e,l:n}=this;if(t/=360,e/=100,n/=100,0===e)return n*=255,new at(n,n,n);const r=n<.5?n*(1+e):n+e-n*e,i=2*n-r,s=255*ot(i,r,t+1/3),o=255*ot(i,r,t),a=255*ot(i,r,t-1/3);return new at(s,o,a)}if("cmyk"===this.space){const{c:t,m:e,y:n,k:r}=this,i=255*(1-Math.min(1,t*(1-r)+r)),s=255*(1-Math.min(1,e*(1-r)+r)),o=255*(1-Math.min(1,n*(1-r)+r));return new at(i,s,o)}return this;var t}toArray(){const{_a:t,_b:e,_c:n,_d:r,space:i}=this;return[t,e,n,r,i]}toHex(){const[t,e,n]=this._clamped().map(it);return`#${t}${e}${n}`}toRgb(){const[t,e,n]=this._clamped();return`rgb(${t},${e},${n})`}toString(){return this.toHex()}xyz(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,a=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92,h=s>.04045?Math.pow((s+.055)/1.055,2.4):s/12.92,u=(.4124*o+.3576*a+.1805*h)/.95047,c=(.2126*o+.7152*a+.0722*h)/1,l=(.0193*o+.1192*a+.9505*h)/1.08883,d=u>.008856?Math.pow(u,1/3):7.787*u+16/116,f=c>.008856?Math.pow(c,1/3):7.787*c+16/116,p=l>.008856?Math.pow(l,1/3):7.787*l+16/116;return new at(d,f,p,"xyz")}_clamped(){const{_a:t,_b:e,_c:n}=this.rgb(),{max:r,min:i,round:s}=Math;return[t,e,n].map((t=>r(0,i(s(t),255))))}}class ht{constructor(...t){this.init(...t)}clone(){return new ht(this)}init(t,e){const n=Array.isArray(t)?{x:t[0],y:t[1]}:"object"==typeof t?{x:t.x,y:t.y}:{x:t,y:e};return this.x=null==n.x?0:n.x,this.y=null==n.y?0:n.y,this}toArray(){return[this.x,this.y]}transform(t){return this.clone().transformO(t)}transformO(t){ct.isMatrixLike(t)||(t=new ct(t));const{x:e,y:n}=this;return this.x=t.a*e+t.c*n+t.e,this.y=t.b*e+t.d*n+t.f,this}}function ut(t,e,n){return Math.abs(e-t)<(n||1e-6)}class ct{constructor(...t){this.init(...t)}static formatTransforms(t){const e="both"===t.flip||!0===t.flip,n=t.flip&&(e||"x"===t.flip)?-1:1,r=t.flip&&(e||"y"===t.flip)?-1:1,i=t.skew&&t.skew.length?t.skew[0]:isFinite(t.skew)?t.skew:isFinite(t.skewX)?t.skewX:0,s=t.skew&&t.skew.length?t.skew[1]:isFinite(t.skew)?t.skew:isFinite(t.skewY)?t.skewY:0,o=t.scale&&t.scale.length?t.scale[0]*n:isFinite(t.scale)?t.scale*n:isFinite(t.scaleX)?t.scaleX*n:n,a=t.scale&&t.scale.length?t.scale[1]*r:isFinite(t.scale)?t.scale*r:isFinite(t.scaleY)?t.scaleY*r:r,h=t.shear||0,u=t.rotate||t.theta||0,c=new ht(t.origin||t.around||t.ox||t.originX,t.oy||t.originY),l=c.x,d=c.y,f=new ht(t.position||t.px||t.positionX||NaN,t.py||t.positionY||NaN),p=f.x,A=f.y,m=new ht(t.translate||t.tx||t.translateX,t.ty||t.translateY),g=m.x,_=m.y,w=new ht(t.relative||t.rx||t.relativeX,t.ry||t.relativeY);return{scaleX:o,scaleY:a,skewX:i,skewY:s,shear:h,theta:u,rx:w.x,ry:w.y,tx:g,ty:_,ox:l,oy:d,px:p,py:A}}static fromArray(t){return{a:t[0],b:t[1],c:t[2],d:t[3],e:t[4],f:t[5]}}static isMatrixLike(t){return null!=t.a||null!=t.b||null!=t.c||null!=t.d||null!=t.e||null!=t.f}static matrixMultiply(t,e,n){const r=t.a*e.a+t.c*e.b,i=t.b*e.a+t.d*e.b,s=t.a*e.c+t.c*e.d,o=t.b*e.c+t.d*e.d,a=t.e+t.a*e.e+t.c*e.f,h=t.f+t.b*e.e+t.d*e.f;return n.a=r,n.b=i,n.c=s,n.d=o,n.e=a,n.f=h,n}around(t,e,n){return this.clone().aroundO(t,e,n)}aroundO(t,e,n){const r=t||0,i=e||0;return this.translateO(-r,-i).lmultiplyO(n).translateO(r,i)}clone(){return new ct(this)}decompose(t=0,e=0){const n=this.a,r=this.b,i=this.c,s=this.d,o=this.e,a=this.f,h=n*s-r*i,u=h>0?1:-1,c=u*Math.sqrt(n*n+r*r),l=Math.atan2(u*r,u*n),d=180/Math.PI*l,f=Math.cos(l),p=Math.sin(l),A=(n*i+r*s)/h,m=i*c/(A*n-r)||s*c/(A*r+n);return{scaleX:c,scaleY:m,shear:A,rotate:d,translateX:o-t+t*f*c+e*(A*f*c-p*m),translateY:a-e+t*p*c+e*(A*p*c+f*m),originX:t,originY:e,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}equals(t){if(t===this)return!0;const e=new ct(t);return ut(this.a,e.a)&&ut(this.b,e.b)&&ut(this.c,e.c)&&ut(this.d,e.d)&&ut(this.e,e.e)&&ut(this.f,e.f)}flip(t,e){return this.clone().flipO(t,e)}flipO(t,e){return"x"===t?this.scaleO(-1,1,e,0):"y"===t?this.scaleO(1,-1,0,e):this.scaleO(-1,-1,t,e||t)}init(t){const e=ct.fromArray([1,0,0,1,0,0]);return t=t instanceof Rt?t.matrixify():"string"==typeof t?ct.fromArray(t.split(nt).map(parseFloat)):Array.isArray(t)?ct.fromArray(t):"object"==typeof t&&ct.isMatrixLike(t)?t:"object"==typeof t?(new ct).transform(t):6===arguments.length?ct.fromArray([].slice.call(arguments)):e,this.a=null!=t.a?t.a:e.a,this.b=null!=t.b?t.b:e.b,this.c=null!=t.c?t.c:e.c,this.d=null!=t.d?t.d:e.d,this.e=null!=t.e?t.e:e.e,this.f=null!=t.f?t.f:e.f,this}inverse(){return this.clone().inverseO()}inverseO(){const t=this.a,e=this.b,n=this.c,r=this.d,i=this.e,s=this.f,o=t*r-e*n;if(!o)throw new Error("Cannot invert "+this);const a=r/o,h=-e/o,u=-n/o,c=t/o,l=-(a*i+u*s),d=-(h*i+c*s);return this.a=a,this.b=h,this.c=u,this.d=c,this.e=l,this.f=d,this}lmultiply(t){return this.clone().lmultiplyO(t)}lmultiplyO(t){const e=t instanceof ct?t:new ct(t);return ct.matrixMultiply(e,this,this)}multiply(t){return this.clone().multiplyO(t)}multiplyO(t){const e=t instanceof ct?t:new ct(t);return ct.matrixMultiply(this,e,this)}rotate(t,e,n){return this.clone().rotateO(t,e,n)}rotateO(t,e=0,n=0){t=v(t);const r=Math.cos(t),i=Math.sin(t),{a:s,b:o,c:a,d:h,e:u,f:c}=this;return this.a=s*r-o*i,this.b=o*r+s*i,this.c=a*r-h*i,this.d=h*r+a*i,this.e=u*r-c*i+n*i-e*r+e,this.f=c*r+u*i-e*i-n*r+n,this}scale(t,e,n,r){return this.clone().scaleO(...arguments)}scaleO(t,e=t,n=0,r=0){3===arguments.length&&(r=n,n=e,e=t);const{a:i,b:s,c:o,d:a,e:h,f:u}=this;return this.a=i*t,this.b=s*e,this.c=o*t,this.d=a*e,this.e=h*t-n*t+n,this.f=u*e-r*e+r,this}shear(t,e,n){return this.clone().shearO(t,e,n)}shearO(t,e=0,n=0){const{a:r,b:i,c:s,d:o,e:a,f:h}=this;return this.a=r+i*t,this.c=s+o*t,this.e=a+h*t-n*t,this}skew(t,e,n,r){return this.clone().skewO(...arguments)}skewO(t,e=t,n=0,r=0){3===arguments.length&&(r=n,n=e,e=t),t=v(t),e=v(e);const i=Math.tan(t),s=Math.tan(e),{a:o,b:a,c:h,d:u,e:c,f:l}=this;return this.a=o+a*i,this.b=a+o*s,this.c=h+u*i,this.d=u+h*s,this.e=c+l*i-r*i,this.f=l+c*s-n*s,this}skewX(t,e,n){return this.skew(t,0,e,n)}skewY(t,e,n){return this.skew(0,t,e,n)}toArray(){return[this.a,this.b,this.c,this.d,this.e,this.f]}toString(){return"matrix("+this.a+","+this.b+","+this.c+","+this.d+","+this.e+","+this.f+")"}transform(t){if(ct.isMatrixLike(t))return new ct(t).multiplyO(this);const e=ct.formatTransforms(t),{x:n,y:r}=new ht(e.ox,e.oy).transform(this),i=(new ct).translateO(e.rx,e.ry).lmultiplyO(this).translateO(-n,-r).scaleO(e.scaleX,e.scaleY).skewO(e.skewX,e.skewY).shearO(e.shear).rotateO(e.theta).translateO(n,r);if(isFinite(e.px)||isFinite(e.py)){const t=new ht(n,r).transform(i),s=isFinite(e.px)?e.px-t.x:0,o=isFinite(e.py)?e.py-t.y:0;i.translateO(s,o)}return i.translateO(e.tx,e.ty),i}translate(t,e){return this.clone().translateO(t,e)}translateO(t,e){return this.e+=t||0,this.f+=e||0,this}valueOf(){return{a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}}function lt(){if(!lt.nodes){const t=N().size(2,0);t.node.style.cssText=["opacity: 0","position: absolute","left: -100%","top: -100%","overflow: hidden"].join(";"),t.attr("focusable","false"),t.attr("aria-hidden","true");const e=t.path().node;lt.nodes={svg:t,path:e}}if(!lt.nodes.svg.node.parentNode){const t=O.document.body||O.document.documentElement;lt.nodes.svg.addTo(t)}return lt.nodes}function dt(t){return!(t.width||t.height||t.x||t.y)}L(ct,"Matrix");class ft{constructor(...t){this.init(...t)}addOffset(){return this.x+=O.window.pageXOffset,this.y+=O.window.pageYOffset,new ft(this)}init(t){return t="string"==typeof t?t.split(nt).map(parseFloat):Array.isArray(t)?t:"object"==typeof t?[null!=t.left?t.left:t.x,null!=t.top?t.top:t.y,t.width,t.height]:4===arguments.length?[].slice.call(arguments):[0,0,0,0],this.x=t[0]||0,this.y=t[1]||0,this.width=this.w=t[2]||0,this.height=this.h=t[3]||0,this.x2=this.x+this.w,this.y2=this.y+this.h,this.cx=this.x+this.w/2,this.cy=this.y+this.h/2,this}isNulled(){return dt(this)}merge(t){const e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),r=Math.max(this.x+this.width,t.x+t.width)-e,i=Math.max(this.y+this.height,t.y+t.height)-n;return new ft(e,n,r,i)}toArray(){return[this.x,this.y,this.width,this.height]}toString(){return this.x+" "+this.y+" "+this.width+" "+this.height}transform(t){t instanceof ct||(t=new ct(t));let e=1/0,n=-1/0,r=1/0,i=-1/0;return[new ht(this.x,this.y),new ht(this.x2,this.y),new ht(this.x,this.y2),new ht(this.x2,this.y2)].forEach((function(s){s=s.transform(t),e=Math.min(e,s.x),n=Math.max(n,s.x),r=Math.min(r,s.y),i=Math.max(i,s.y)})),new ft(e,r,n-e,i-r)}}function pt(t,e,n){let r;try{if(r=e(t.node),dt(r)&&(i=t.node)!==O.document&&!(O.document.documentElement.contains||function(t){for(;t.parentNode;)t=t.parentNode;return t===O.document}).call(O.document.documentElement,i))throw new Error("Element not in the dom")}catch(e){r=n(t)}var i;return r}_({viewbox:{viewbox(t,e,n,r){return null==t?new ft(this.attr("viewBox")):this.attr("viewBox",new ft(t,e,n,r))},zoom(t,e){let{width:n,height:r}=this.attr(["width","height"]);if((n||r)&&"string"!=typeof n&&"string"!=typeof r||(n=this.node.clientWidth,r=this.node.clientHeight),!n||!r)throw new Error("Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element");const i=this.viewbox(),s=n/i.width,o=r/i.height,a=Math.min(s,o);if(null==t)return a;let h=a/t;h===1/0&&(h=Number.MAX_SAFE_INTEGER/100),e=e||new ht(n/2/s+i.x,r/2/o+i.y);const u=new ft(i).transform(new ct({scale:h,origin:e}));return this.viewbox(u)}}}),L(ft,"Box");class At extends Array{constructor(t=[],...e){if(super(t,...e),"number"==typeof t)return this;this.length=0,this.push(...t)}}Z([At],{each(t,...e){return"function"==typeof t?this.map(((e,n,r)=>t.call(e,e,n,r))):this.map((n=>n[t](...e)))},toArray(){return Array.prototype.concat.apply([],this)}});const mt=["toArray","constructor","each"];function gt(t,e){return new At(b((e||O.document).querySelectorAll(t),(function(t){return F(t)})))}At.extend=function(t){t=t.reduce(((t,e)=>(mt.includes(e)||"_"===e[0]||(t[e]=function(...t){return this.each(e,...t)}),t)),{}),Z([At],t)};let _t=0;const wt={};function yt(t){let e=t.getEventHolder();return e===O.window&&(e=wt),e.events||(e.events={}),e.events}function bt(t){return t.getEventTarget()}function vt(t,e,n,r,i){const s=n.bind(r||t),o=N(t),a=yt(o),h=bt(o);e=Array.isArray(e)?e:e.split(nt),n._svgjsListenerId||(n._svgjsListenerId=++_t),e.forEach((function(t){const e=t.split(".")[0],r=t.split(".")[1]||"*";a[e]=a[e]||{},a[e][r]=a[e][r]||{},a[e][r][n._svgjsListenerId]=s,h.addEventListener(e,s,i||!1)}))}function xt(t,e,n,r){const i=N(t),s=yt(i),o=bt(i);("function"!=typeof n||(n=n._svgjsListenerId))&&(e=Array.isArray(e)?e:(e||"").split(nt)).forEach((function(t){const e=t&&t.split(".")[0],a=t&&t.split(".")[1];let h,u;if(n)s[e]&&s[e][a||"*"]&&(o.removeEventListener(e,s[e][a||"*"][n],r||!1),delete s[e][a||"*"][n]);else if(e&&a){if(s[e]&&s[e][a]){for(u in s[e][a])xt(o,[e,a].join("."),u);delete s[e][a]}}else if(a)for(t in s)for(h in s[t])a===h&&xt(o,[t,a].join("."));else if(e){if(s[e]){for(h in s[e])xt(o,[e,h].join("."));delete s[e]}}else{for(t in s)xt(o,t);!function(t){let e=t.getEventHolder();e===O.window&&(e=wt),e.events&&(e.events={})}(i)}}))}class kt extends T{addEventListener(){}dispatch(t,e,n){return function(t,e,n,r){const i=bt(t);return e instanceof O.window.Event||(e=new O.window.CustomEvent(e,{detail:n,cancelable:!0,...r})),i.dispatchEvent(e),e}(this,t,e,n)}dispatchEvent(t){const e=this.getEventHolder().events;if(!e)return!0;const n=e[t.type];for(const e in n)for(const r in n[e])n[e][r](t);return!t.defaultPrevented}fire(t,e,n){return this.dispatch(t,e,n),this}getEventHolder(){return this}getEventTarget(){return this}off(t,e,n){return xt(this,t,e,n),this}on(t,e,n,r){return vt(this,t,e,n,r),this}removeEventListener(){}}function Et(){}L(kt,"EventTarget");const Bt=400,Ct=">",St=0,zt={"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","text-anchor":"start"};class Ot extends Array{constructor(...t){super(...t),this.init(...t)}clone(){return new this.constructor(this)}init(t){return"number"==typeof t||(this.length=0,this.push(...this.parse(t))),this}parse(t=[]){return t instanceof Array?t:t.trim().split(nt).map(parseFloat)}toArray(){return Array.prototype.concat.apply([],this)}toSet(){return new Set(this)}toString(){return this.join(" ")}valueOf(){const t=[];return t.push(...this),t}}class Tt{constructor(...t){this.init(...t)}convert(t){return new Tt(this.value,t)}divide(t){return t=new Tt(t),new Tt(this/t,this.unit||t.unit)}init(t,e){return e=Array.isArray(t)?t[1]:e,t=Array.isArray(t)?t[0]:t,this.value=0,this.unit=e||"","number"==typeof t?this.value=isNaN(t)?0:isFinite(t)?t:t<0?-34e37:34e37:"string"==typeof t?(e=t.match(H))&&(this.value=parseFloat(e[1]),"%"===e[5]?this.value/=100:"s"===e[5]&&(this.value*=1e3),this.unit=e[5]):t instanceof Tt&&(this.value=t.valueOf(),this.unit=t.unit),this}minus(t){return t=new Tt(t),new Tt(this-t,this.unit||t.unit)}plus(t){return t=new Tt(t),new Tt(this+t,this.unit||t.unit)}times(t){return t=new Tt(t),new Tt(this*t,this.unit||t.unit)}toArray(){return[this.value,this.unit]}toJSON(){return this.toString()}toString(){return("%"===this.unit?~~(1e8*this.value)/1e6:"s"===this.unit?this.value/1e3:this.value)+this.unit}valueOf(){return this.value}}const It=[];class Mt extends kt{constructor(t,e){super(),this.node=t,this.type=t.nodeName,e&&t!==e&&this.attr(e)}add(t,e){return(t=N(t)).removeNamespace&&this.node instanceof O.window.SVGElement&&t.removeNamespace(),null==e?this.node.appendChild(t.node):t.node!==this.node.childNodes[e]&&this.node.insertBefore(t.node,this.node.childNodes[e]),this}addTo(t,e){return N(t).put(this,e)}children(){return new At(b(this.node.children,(function(t){return F(t)})))}clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this}clone(t=!0){return this.writeDataToDom(),new this.constructor(W(this.node.cloneNode(t)))}each(t,e){const n=this.children();let r,i;for(r=0,i=n.length;r<i;r++)t.apply(n[r],[r,n]),e&&n[r].each(t,e);return this}element(t,e){return this.put(new Mt(R(t),e))}first(){return F(this.node.firstChild)}get(t){return F(this.node.childNodes[t])}getEventHolder(){return this.node}getEventTarget(){return this.node}has(t){return this.index(t)>=0}html(t,e){return this.xml(t,e,"http://www.w3.org/1999/xhtml")}id(t){return void 0!==t||this.node.id||(this.node.id=U(this.type)),this.attr("id",t)}index(t){return[].slice.call(this.node.childNodes).indexOf(t.node)}last(){return F(this.node.lastChild)}matches(t){const e=this.node,n=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector||null;return n&&n.call(e,t)}parent(t){let e=this;if(!e.node.parentNode)return null;if(e=F(e.node.parentNode),!t)return e;do{if("string"==typeof t?e.matches(t):e instanceof t)return e}while(e=F(e.node.parentNode));return e}put(t,e){return t=N(t),this.add(t,e),t}putIn(t,e){return N(t).add(this,e)}remove(){return this.parent()&&this.parent().removeElement(this),this}removeElement(t){return this.node.removeChild(t.node),this}replace(t){return t=N(t),this.node.parentNode&&this.node.parentNode.replaceChild(t.node,this.node),t}round(t=2,e=null){const n=10**t,r=this.attr(e);for(const t in r)"number"==typeof r[t]&&(r[t]=Math.round(r[t]*n)/n);return this.attr(r),this}svg(t,e){return this.xml(t,e,C)}toString(){return this.id()}words(t){return this.node.textContent=t,this}wrap(t){const e=this.parent();if(!e)return this.addTo(t);const n=e.index(this);return e.put(t,n).put(this)}writeDataToDom(){return this.each((function(){this.writeDataToDom()})),this}xml(t,e,n){if("boolean"==typeof t&&(n=e,e=t,t=null),null==t||"function"==typeof t){e=null==e||e,this.writeDataToDom();let n=this;if(null!=t){if(n=F(n.node.cloneNode(!0)),e){const e=t(n);if(n=e||n,!1===e)return""}n.each((function(){const e=t(this),n=e||this;!1===e?this.remove():e&&this!==n&&this.replace(n)}),!0)}return e?n.node.outerHTML:n.node.innerHTML}e=null!=e&&e;const r=R("wrapper",n),i=O.document.createDocumentFragment();r.innerHTML=t;for(let t=r.children.length;t--;)i.appendChild(r.firstElementChild);const s=this.parent();return e?this.replace(i)&&s:this.add(i)}}Z(Mt,{attr:function(t,e,n){if(null==t){t={},e=this.node.attributes;for(const n of e)t[n.nodeName]=tt.test(n.nodeValue)?parseFloat(n.nodeValue):n.nodeValue;return t}if(t instanceof Array)return t.reduce(((t,e)=>(t[e]=this.attr(e),t)),{});if("object"==typeof t&&t.constructor===Object)for(e in t)this.attr(e,t[e]);else if(null===e)this.node.removeAttribute(t);else{if(null==e)return null==(e=this.node.getAttribute(t))?zt[t]:tt.test(e)?parseFloat(e):e;"number"==typeof(e=It.reduce(((e,n)=>n(t,e,this)),e))?e=new Tt(e):at.isColor(e)?e=new at(e):e.constructor===Array&&(e=new Ot(e)),"leading"===t?this.leading&&this.leading(e):"string"==typeof n?this.node.setAttributeNS(n,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||"font-size"!==t&&"x"!==t||this.rebuild()}return this},find:function(t){return gt(t,this.node)},findOne:function(t){return F(this.node.querySelector(t))}}),L(Mt,"Dom");class Rt extends Mt{constructor(t,e){super(t,e),this.dom={},this.node.instance=this,t.hasAttribute("svgjs:data")&&this.setData(JSON.parse(t.getAttribute("svgjs:data"))||{})}center(t,e){return this.cx(t).cy(e)}cx(t){return null==t?this.x()+this.width()/2:this.x(t-this.width()/2)}cy(t){return null==t?this.y()+this.height()/2:this.y(t-this.height()/2)}defs(){const t=this.root();return t&&t.defs()}dmove(t,e){return this.dx(t).dy(e)}dx(t=0){return this.x(new Tt(t).plus(this.x()))}dy(t=0){return this.y(new Tt(t).plus(this.y()))}getEventHolder(){return this}height(t){return this.attr("height",t)}move(t,e){return this.x(t).y(e)}parents(t=this.root()){const e="string"==typeof t;e||(t=N(t));const n=new At;let r=this;for(;(r=r.parent())&&r.node!==O.document&&"#document-fragment"!==r.nodeName&&(n.push(r),e||r.node!==t.node)&&(!e||!r.matches(t));)if(r.node===this.root().node)return null;return n}reference(t){if(!(t=this.attr(t)))return null;const e=(t+"").match(X);return e?N(e[1]):null}root(){const t=this.parent(I[M]);return t&&t.root()}setData(t){return this.dom=t,this}size(t,e){const n=E(this,t,e);return this.width(new Tt(n.width)).height(new Tt(n.height))}width(t){return this.attr("width",t)}writeDataToDom(){return this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),super.writeDataToDom()}x(t){return this.attr("x",t)}y(t){return this.attr("y",t)}}Z(Rt,{bbox:function(){const t=pt(this,(t=>t.getBBox()),(t=>{try{const e=t.clone().addTo(lt().svg).show(),n=e.node.getBBox();return e.remove(),n}catch(e){throw new Error(`Getting bbox of element "${t.node.nodeName}" is not possible: ${e.toString()}`)}}));return new ft(t)},rbox:function(t){const e=pt(this,(t=>t.getBoundingClientRect()),(t=>{throw new Error(`Getting rbox of element "${t.node.nodeName}" is not possible`)})),n=new ft(e);return t?n.transform(t.screenCTM().inverseO()):n.addOffset()},inside:function(t,e){const n=this.bbox();return t>n.x&&e>n.y&&t<n.x+n.width&&e<n.y+n.height},point:function(t,e){return new ht(t,e).transform(this.screenCTM().inverse())},ctm:function(){return new ct(this.node.getCTM())},screenCTM:function(){if("function"==typeof this.isRoot&&!this.isRoot()){const t=this.rect(1,1),e=t.node.getScreenCTM();return t.remove(),new ct(e)}return new ct(this.node.getScreenCTM())}}),L(Rt,"Element");const Nt={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return"color"===e?t:t+"-"+e}};["fill","stroke"].forEach((function(t){const e={};let n;e[t]=function(e){if(void 0===e)return this.attr(t);if("string"==typeof e||e instanceof at||at.isRgb(e)||e instanceof Rt)this.attr(t,e);else for(n=Nt[t].length-1;n>=0;n--)null!=e[Nt[t][n]]&&this.attr(Nt.prefix(t,Nt[t][n]),e[Nt[t][n]]);return this},_(["Element","Runner"],e)})),_(["Element","Runner"],{matrix:function(t,e,n,r,i,s){return null==t?new ct(this):this.attr("transform",new ct(t,e,n,r,i,s))},rotate:function(t,e,n){return this.transform({rotate:t,ox:e,oy:n},!0)},skew:function(t,e,n,r){return 1===arguments.length||3===arguments.length?this.transform({skew:t,ox:e,oy:n},!0):this.transform({skew:[t,e],ox:n,oy:r},!0)},shear:function(t,e,n){return this.transform({shear:t,ox:e,oy:n},!0)},scale:function(t,e,n,r){return 1===arguments.length||3===arguments.length?this.transform({scale:t,ox:e,oy:n},!0):this.transform({scale:[t,e],ox:n,oy:r},!0)},translate:function(t,e){return this.transform({translate:[t,e]},!0)},relative:function(t,e){return this.transform({relative:[t,e]},!0)},flip:function(t="both",e="center"){return-1==="xybothtrue".indexOf(t)&&(e=t,t="both"),this.transform({flip:t,origin:e},!0)},opacity:function(t){return this.attr("opacity",t)}}),_("radius",{radius:function(t,e=t){return"radialGradient"===(this._element||this).type?this.attr("r",new Tt(t)):this.rx(t).ry(e)}}),_("Path",{length:function(){return this.node.getTotalLength()},pointAt:function(t){return new ht(this.node.getPointAtLength(t))}}),_(["Element","Runner"],{font:function(t,e){if("object"==typeof t){for(e in t)this.font(e,t[e]);return this}return"leading"===t?this.leading(e):"anchor"===t?this.attr("text-anchor",e):"size"===t||"family"===t||"weight"===t||"stretch"===t||"variant"===t||"style"===t?this.attr("font-"+t,e):this.attr(t,e)}}),_("Element",["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].reduce((function(t,e){return t[e]=function(t){return null===t?this.off(e):this.on(e,t),this},t}),{})),_("Element",{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(K).slice(0,-1).map((function(t){const e=t.trim().split("(");return[e[0],e[1].split(nt).map((function(t){return parseFloat(t)}))]})).reverse().reduce((function(t,e){return"matrix"===e[0]?t.lmultiply(ct.fromArray(e[1])):t[e[0]].apply(t,e[1])}),new ct)},toParent:function(t,e){if(this===t)return this;const n=this.screenCTM(),r=t.screenCTM().inverse();return this.addTo(t,e).untransform().transform(r.multiply(n)),this},toRoot:function(t){return this.toParent(this.root(),t)},transform:function(t,e){if(null==t||"string"==typeof t){const e=new ct(this).decompose();return null==t?e:e[t]}ct.isMatrixLike(t)||(t={...t,origin:B(t,this)});const n=new ct(!0===e?this:e||!1).transform(t);return this.attr("transform",n)}});class Dt extends Rt{flatten(t=this,e){return this.each((function(){if(this instanceof Dt)return this.flatten().ungroup()})),this}ungroup(t=this.parent(),e=t.index(this)){return e=-1===e?t.children().length:e,this.each((function(n,r){return r[r.length-n-1].toParent(t,e)})),this.remove()}}L(Dt,"Container");class Ft extends Dt{constructor(t,e=t){super(D("defs",t),e)}flatten(){return this}ungroup(){return this}}L(Ft,"Defs");class jt extends Rt{}function Lt(t){return this.attr("rx",t)}function Pt(t){return this.attr("ry",t)}function Ut(t){return null==t?this.cx()-this.rx():this.cx(t+this.rx())}function Wt(t){return null==t?this.cy()-this.ry():this.cy(t+this.ry())}function Zt(t){return this.attr("cx",t)}function qt(t){return this.attr("cy",t)}function Ht(t){return null==t?2*this.rx():this.rx(new Tt(t).divide(2))}function Gt(t){return null==t?2*this.ry():this.ry(new Tt(t).divide(2))}L(jt,"Shape");var Yt={__proto__:null,rx:Lt,ry:Pt,x:Ut,y:Wt,cx:Zt,cy:qt,width:Ht,height:Gt};class Xt extends jt{constructor(t,e=t){super(D("ellipse",t),e)}size(t,e){const n=E(this,t,e);return this.rx(new Tt(n.width).divide(2)).ry(new Tt(n.height).divide(2))}}Z(Xt,Yt),_("Container",{ellipse:q((function(t=0,e=t){return this.put(new Xt).size(t,e).move(0,0)}))}),L(Xt,"Ellipse");class Kt extends Mt{constructor(t=O.document.createDocumentFragment()){super(t)}xml(t,e,n){if("boolean"==typeof t&&(n=e,e=t,t=null),null==t||"function"==typeof t){const t=new Mt(R("wrapper",n));return t.add(this.node.cloneNode(!0)),t.xml(!1,n)}return super.xml(t,!1,n)}}function Vt(t,e){return"radialGradient"===(this._element||this).type?this.attr({fx:new Tt(t),fy:new Tt(e)}):this.attr({x1:new Tt(t),y1:new Tt(e)})}function $t(t,e){return"radialGradient"===(this._element||this).type?this.attr({cx:new Tt(t),cy:new Tt(e)}):this.attr({x2:new Tt(t),y2:new Tt(e)})}L(Kt,"Fragment");var Jt,Qt={__proto__:null,from:Vt,to:$t};class te extends Dt{constructor(t,e){super(D(t+"Gradient","string"==typeof t?null:t),e)}attr(t,e,n){return"transform"===t&&(t="gradientTransform"),super.attr(t,e,n)}bbox(){return new ft}targets(){return gt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}Z(te,Qt),_({Container:{gradient(...t){return this.defs().gradient(...t)}},Defs:{gradient:q((function(t,e){return this.put(new te(t)).update(e)}))}}),L(te,"Gradient");class ee extends Dt{constructor(t,e=t){super(D("pattern",t),e)}attr(t,e,n){return"transform"===t&&(t="patternTransform"),super.attr(t,e,n)}bbox(){return new ft}targets(){return gt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}_({Container:{pattern(...t){return this.defs().pattern(...t)}},Defs:{pattern:q((function(t,e,n){return this.put(new ee).update(n).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})}))}}),L(ee,"Pattern");class ne extends jt{constructor(t,e=t){super(D("image",t),e)}load(t,e){if(!t)return this;const n=new O.window.Image;return vt(n,"load",(function(t){const r=this.parent(ee);0===this.width()&&0===this.height()&&this.size(n.width,n.height),r instanceof ee&&0===r.width()&&0===r.height()&&r.size(this.width(),this.height()),"function"==typeof e&&e.call(this,t)}),this),vt(n,"load error",(function(){xt(n)})),this.attr("href",n.src=t,z)}}Jt=function(t,e,n){return"fill"!==t&&"stroke"!==t||et.test(e)&&(e=n.root().defs().image(e)),e instanceof ne&&(e=n.root().defs().pattern(0,0,(t=>{t.add(e)}))),e},It.push(Jt),_({Container:{image:q((function(t,e){return this.put(new ne).size(0,0).load(t,e)}))}}),L(ne,"Image");class re extends Ot{bbox(){let t=-1/0,e=-1/0,n=1/0,r=1/0;return this.forEach((function(i){t=Math.max(i[0],t),e=Math.max(i[1],e),n=Math.min(i[0],n),r=Math.min(i[1],r)})),new ft(n,r,t-n,e-r)}move(t,e){const n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(let n=this.length-1;n>=0;n--)this[n]=[this[n][0]+t,this[n][1]+e];return this}parse(t=[0,0]){const e=[];(t=t instanceof Array?Array.prototype.concat.apply([],t):t.trim().split(nt).map(parseFloat)).length%2!=0&&t.pop();for(let n=0,r=t.length;n<r;n+=2)e.push([t[n],t[n+1]]);return e}size(t,e){let n;const r=this.bbox();for(n=this.length-1;n>=0;n--)r.width&&(this[n][0]=(this[n][0]-r.x)*t/r.width+r.x),r.height&&(this[n][1]=(this[n][1]-r.y)*e/r.height+r.y);return this}toLine(){return{x1:this[0][0],y1:this[0][1],x2:this[1][0],y2:this[1][1]}}toString(){const t=[];for(let e=0,n=this.length;e<n;e++)t.push(this[e].join(","));return t.join(" ")}transform(t){return this.clone().transformO(t)}transformO(t){ct.isMatrixLike(t)||(t=new ct(t));for(let e=this.length;e--;){const[n,r]=this[e];this[e][0]=t.a*n+t.c*r+t.e,this[e][1]=t.b*n+t.d*r+t.f}return this}}var ie={__proto__:null,MorphArray:re,x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){const e=this.bbox();return null==t?e.width:this.size(t,e.height)},height:function(t){const e=this.bbox();return null==t?e.height:this.size(e.width,t)}};class se extends jt{constructor(t,e=t){super(D("line",t),e)}array(){return new re([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])}move(t,e){return this.attr(this.array().move(t,e).toLine())}plot(t,e,n,r){return null==t?this.array():(t=void 0!==e?{x1:t,y1:e,x2:n,y2:r}:new re(t).toLine(),this.attr(t))}size(t,e){const n=E(this,t,e);return this.attr(this.array().size(n.width,n.height).toLine())}}Z(se,ie),_({Container:{line:q((function(...t){return se.prototype.plot.apply(this.put(new se),null!=t[0]?t:[0,0,0,0])}))}}),L(se,"Line");class oe extends Dt{constructor(t,e=t){super(D("marker",t),e)}height(t){return this.attr("markerHeight",t)}orient(t){return this.attr("orient",t)}ref(t,e){return this.attr("refX",t).attr("refY",e)}toString(){return"url(#"+this.id()+")"}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}width(t){return this.attr("markerWidth",t)}}function ae(t,e){return function(n){return null==n?this[t]:(this[t]=n,e&&e.call(this),this)}}_({Container:{marker(...t){return this.defs().marker(...t)}},Defs:{marker:q((function(t,e,n){return this.put(new oe).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(n)}))},marker:{marker(t,e,n,r){let i=["marker"];return"all"!==t&&i.push(t),i=i.join("-"),t=arguments[1]instanceof oe?arguments[1]:this.defs().marker(e,n,r),this.attr(i,t)}}}),L(oe,"Marker");const he={"-":function(t){return t},"<>":function(t){return-Math.cos(t*Math.PI)/2+.5},">":function(t){return Math.sin(t*Math.PI/2)},"<":function(t){return 1-Math.cos(t*Math.PI/2)},bezier:function(t,e,n,r){return function(i){return i<0?t>0?e/t*i:n>0?r/n*i:0:i>1?n<1?(1-r)/(1-n)*i+(r-n)/(1-n):t<1?(1-e)/(1-t)*i+(e-t)/(1-t):1:3*i*(1-i)**2*e+3*i**2*(1-i)*r+i**3}},steps:function(t,e="end"){e=e.split("-").reverse()[0];let n=t;return"none"===e?--n:"both"===e&&++n,(r,i=!1)=>{let s=Math.floor(r*t);const o=r*s%1==0;return"start"!==e&&"both"!==e||++s,i&&o&&--s,r>=0&&s<0&&(s=0),r<=1&&s>n&&(s=n),s/n}}};class ue{done(){return!1}}class ce extends ue{constructor(t=Ct){super(),this.ease=he[t]||t}step(t,e,n){return"number"!=typeof t?n<1?t:e:t+(e-t)*this.ease(n)}}class le extends ue{constructor(t){super(),this.stepper=t}done(t){return t.done}step(t,e,n,r){return this.stepper(t,e,n,r)}}function de(){const t=(this._duration||500)/1e3,e=this._overshoot||0,n=Math.PI,r=Math.log(e/100+1e-10),i=-r/Math.sqrt(n*n+r*r),s=3.9/(i*t);this.d=2*i*s,this.k=s*s}Z(class extends le{constructor(t=500,e=0){super(),this.duration(t).overshoot(e)}step(t,e,n,r){if("string"==typeof t)return t;if(r.done=n===1/0,n===1/0)return e;if(0===n)return t;n>100&&(n=16),n/=1e3;const i=r.velocity||0,s=-this.d*i-this.k*(t-e),o=t+i*n+s*n*n/2;return r.velocity=i+s*n,r.done=Math.abs(e-o)+Math.abs(i)<.002,r.done?e:o}},{duration:ae("_duration",de),overshoot:ae("_overshoot",de)}),Z(class extends le{constructor(t=.1,e=.01,n=0,r=1e3){super(),this.p(t).i(e).d(n).windup(r)}step(t,e,n,r){if("string"==typeof t)return t;if(r.done=n===1/0,n===1/0)return e;if(0===n)return t;const i=e-t;let s=(r.integral||0)+i*n;const o=(i-(r.error||0))/n,a=this._windup;return!1!==a&&(s=Math.max(-a,Math.min(s,a))),r.error=i,r.integral=s,r.done=Math.abs(i)<.001,r.done?e:t+(this.P*i+this.I*s+this.D*o)}},{windup:ae("_windup"),p:ae("P"),i:ae("I"),d:ae("D")});const fe={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0},pe={M:function(t,e,n){return e.x=n.x=t[0],e.y=n.y=t[1],["M",e.x,e.y]},L:function(t,e){return e.x=t[0],e.y=t[1],["L",t[0],t[1]]},H:function(t,e){return e.x=t[0],["H",t[0]]},V:function(t,e){return e.y=t[0],["V",t[0]]},C:function(t,e){return e.x=t[4],e.y=t[5],["C",t[0],t[1],t[2],t[3],t[4],t[5]]},S:function(t,e){return e.x=t[2],e.y=t[3],["S",t[0],t[1],t[2],t[3]]},Q:function(t,e){return e.x=t[2],e.y=t[3],["Q",t[0],t[1],t[2],t[3]]},T:function(t,e){return e.x=t[0],e.y=t[1],["T",t[0],t[1]]},Z:function(t,e,n){return e.x=n.x,e.y=n.y,["Z"]},A:function(t,e){return e.x=t[5],e.y=t[6],["A",t[0],t[1],t[2],t[3],t[4],t[5],t[6]]}},Ae="mlhvqtcsaz".split("");for(let t=0,e=Ae.length;t<e;++t)pe[Ae[t]]=function(t){return function(e,n,r){if("H"===t)e[0]=e[0]+n.x;else if("V"===t)e[0]=e[0]+n.y;else if("A"===t)e[5]=e[5]+n.x,e[6]=e[6]+n.y;else for(let t=0,r=e.length;t<r;++t)e[t]=e[t]+(t%2?n.y:n.x);return pe[t](e,n,r)}}(Ae[t].toUpperCase());function me(t){return t.segment.length&&t.segment.length-1===fe[t.segment[0].toUpperCase()]}function ge(t,e){t.inNumber&&_e(t,!1);const n=rt.test(e);if(n)t.segment=[e];else{const e=t.lastCommand,n=e.toLowerCase(),r=e===n;t.segment=["m"===n?r?"l":"L":e]}return t.inSegment=!0,t.lastCommand=t.segment[0],n}function _e(t,e){if(!t.inNumber)throw new Error("Parser Error");t.number&&t.segment.push(parseFloat(t.number)),t.inNumber=e,t.number="",t.pointSeen=!1,t.hasExponent=!1,me(t)&&we(t)}function we(t){t.inSegment=!1,t.absolute&&(t.segment=function(t){const e=t.segment[0];return pe[e](t.segment.slice(1),t.p,t.p0)}(t)),t.segments.push(t.segment)}function ye(t){if(!t.segment.length)return!1;const e="A"===t.segment[0].toUpperCase(),n=t.segment.length;return e&&(4===n||5===n)}function be(t){return"E"===t.lastToken.toUpperCase()}class ve extends Ot{bbox(){return lt().path.setAttribute("d",this.toString()),new ft(lt.nodes.path.getBBox())}move(t,e){const n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(let n,r=this.length-1;r>=0;r--)n=this[r][0],"M"===n||"L"===n||"T"===n?(this[r][1]+=t,this[r][2]+=e):"H"===n?this[r][1]+=t:"V"===n?this[r][1]+=e:"C"===n||"S"===n||"Q"===n?(this[r][1]+=t,this[r][2]+=e,this[r][3]+=t,this[r][4]+=e,"C"===n&&(this[r][5]+=t,this[r][6]+=e)):"A"===n&&(this[r][6]+=t,this[r][7]+=e);return this}parse(t="M0 0"){return Array.isArray(t)&&(t=Array.prototype.concat.apply([],t).toString()),function(t,e=!0){let n=0,r="";const i={segment:[],inNumber:!1,number:"",lastToken:"",inSegment:!1,segments:[],pointSeen:!1,hasExponent:!1,absolute:e,p0:new ht,p:new ht};for(;i.lastToken=r,r=t.charAt(n++);)if(i.inSegment||!ge(i,r))if("."!==r)if(isNaN(parseInt(r)))if(" "!==r&&","!==r)if("-"!==r)if("E"!==r.toUpperCase()){if(rt.test(r)){if(i.inNumber)_e(i,!1);else{if(!me(i))throw new Error("parser Error");we(i)}--n}}else i.number+=r,i.hasExponent=!0;else{if(i.inNumber&&!be(i)){_e(i,!1),--n;continue}i.number+=r,i.inNumber=!0}else i.inNumber&&_e(i,!1);else{if("0"===i.number||ye(i)){i.inNumber=!0,i.number=r,_e(i,!0);continue}i.inNumber=!0,i.number+=r}else{if(i.pointSeen||i.hasExponent){_e(i,!1),--n;continue}i.inNumber=!0,i.pointSeen=!0,i.number+=r}return i.inNumber&&_e(i,!1),i.inSegment&&me(i)&&we(i),i.segments}(t)}size(t,e){const n=this.bbox();let r,i;for(n.width=0===n.width?1:n.width,n.height=0===n.height?1:n.height,r=this.length-1;r>=0;r--)i=this[r][0],"M"===i||"L"===i||"T"===i?(this[r][1]=(this[r][1]-n.x)*t/n.width+n.x,this[r][2]=(this[r][2]-n.y)*e/n.height+n.y):"H"===i?this[r][1]=(this[r][1]-n.x)*t/n.width+n.x:"V"===i?this[r][1]=(this[r][1]-n.y)*e/n.height+n.y:"C"===i||"S"===i||"Q"===i?(this[r][1]=(this[r][1]-n.x)*t/n.width+n.x,this[r][2]=(this[r][2]-n.y)*e/n.height+n.y,this[r][3]=(this[r][3]-n.x)*t/n.width+n.x,this[r][4]=(this[r][4]-n.y)*e/n.height+n.y,"C"===i&&(this[r][5]=(this[r][5]-n.x)*t/n.width+n.x,this[r][6]=(this[r][6]-n.y)*e/n.height+n.y)):"A"===i&&(this[r][1]=this[r][1]*t/n.width,this[r][2]=this[r][2]*e/n.height,this[r][6]=(this[r][6]-n.x)*t/n.width+n.x,this[r][7]=(this[r][7]-n.y)*e/n.height+n.y);return this}toString(){return function(t){let e="";for(let n=0,r=t.length;n<r;n++)e+=t[n][0],null!=t[n][1]&&(e+=t[n][1],null!=t[n][2]&&(e+=" ",e+=t[n][2],null!=t[n][3]&&(e+=" ",e+=t[n][3],e+=" ",e+=t[n][4],null!=t[n][5]&&(e+=" ",e+=t[n][5],e+=" ",e+=t[n][6],null!=t[n][7]&&(e+=" ",e+=t[n][7])))));return e+" "}(this)}}const xe=t=>{const e=typeof t;return"number"===e?Tt:"string"===e?at.isColor(t)?at:nt.test(t)?rt.test(t)?ve:Ot:H.test(t)?Tt:Ee:ze.indexOf(t.constructor)>-1?t.constructor:Array.isArray(t)?Ot:"object"===e?Se:Ee};class ke{constructor(t){this._stepper=t||new ce("-"),this._from=null,this._to=null,this._type=null,this._context=null,this._morphObj=null}at(t){return this._morphObj.morph(this._from,this._to,t,this._stepper,this._context)}done(){return this._context.map(this._stepper.done).reduce((function(t,e){return t&&e}),!0)}from(t){return null==t?this._from:(this._from=this._set(t),this)}stepper(t){return null==t?this._stepper:(this._stepper=t,this)}to(t){return null==t?this._to:(this._to=this._set(t),this)}type(t){return null==t?this._type:(this._type=t,this)}_set(t){this._type||this.type(xe(t));let e=new this._type(t);return this._type===at&&(e=this._to?e[this._to[4]]():this._from?e[this._from[4]]():e),this._type===Se&&(e=this._to?e.align(this._to):this._from?e.align(this._from):e),e=e.toConsumable(),this._morphObj=this._morphObj||new this._type,this._context=this._context||Array.apply(null,Array(e.length)).map(Object).map((function(t){return t.done=!0,t})),e}}class Ee{constructor(...t){this.init(...t)}init(t){return t=Array.isArray(t)?t[0]:t,this.value=t,this}toArray(){return[this.value]}valueOf(){return this.value}}class Be{constructor(...t){this.init(...t)}init(t){return Array.isArray(t)&&(t={scaleX:t[0],scaleY:t[1],shear:t[2],rotate:t[3],translateX:t[4],translateY:t[5],originX:t[6],originY:t[7]}),Object.assign(this,Be.defaults,t),this}toArray(){const t=this;return[t.scaleX,t.scaleY,t.shear,t.rotate,t.translateX,t.translateY,t.originX,t.originY]}}Be.defaults={scaleX:1,scaleY:1,shear:0,rotate:0,translateX:0,translateY:0,originX:0,originY:0};const Ce=(t,e)=>t[0]<e[0]?-1:t[0]>e[0]?1:0;class Se{constructor(...t){this.init(...t)}align(t){const e=this.values;for(let n=0,r=e.length;n<r;++n){if(e[n+1]===t[n+1]){if(e[n+1]===at&&t[n+7]!==e[n+7]){const e=t[n+7],r=new at(this.values.splice(n+3,5))[e]().toArray();this.values.splice(n+3,0,...r)}n+=e[n+2]+2;continue}if(!t[n+1])return this;const r=(new t[n+1]).toArray(),i=e[n+2]+3;e.splice(n,i,t[n],t[n+1],t[n+2],...r),n+=e[n+2]+2}return this}init(t){if(this.values=[],Array.isArray(t))return void(this.values=t.slice());t=t||{};const e=[];for(const n in t){const r=xe(t[n]),i=new r(t[n]).toArray();e.push([n,r,i.length,...i])}return e.sort(Ce),this.values=e.reduce(((t,e)=>t.concat(e)),[]),this}toArray(){return this.values}valueOf(){const t={},e=this.values;for(;e.length;){const n=e.shift(),r=e.shift(),i=e.shift(),s=e.splice(0,i);t[n]=new r(s)}return t}}const ze=[Ee,Be,Se];class Oe extends jt{constructor(t,e=t){super(D("path",t),e)}array(){return this._array||(this._array=new ve(this.attr("d")))}clear(){return delete this._array,this}height(t){return null==t?this.bbox().height:this.size(this.bbox().width,t)}move(t,e){return this.attr("d",this.array().move(t,e))}plot(t){return null==t?this.array():this.clear().attr("d","string"==typeof t?t:this._array=new ve(t))}size(t,e){const n=E(this,t,e);return this.attr("d",this.array().size(n.width,n.height))}width(t){return null==t?this.bbox().width:this.size(t,this.bbox().height)}x(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)}y(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)}}Oe.prototype.MorphArray=ve,_({Container:{path:q((function(t){return this.put(new Oe).plot(t||new ve)}))}}),L(Oe,"Path");var Te={__proto__:null,array:function(){return this._array||(this._array=new re(this.attr("points")))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("points",this.array().move(t,e))},plot:function(t){return null==t?this.array():this.clear().attr("points","string"==typeof t?t:this._array=new re(t))},size:function(t,e){const n=E(this,t,e);return this.attr("points",this.array().size(n.width,n.height))}};class Ie extends jt{constructor(t,e=t){super(D("polygon",t),e)}}_({Container:{polygon:q((function(t){return this.put(new Ie).plot(t||new re)}))}}),Z(Ie,ie),Z(Ie,Te),L(Ie,"Polygon");class Me extends jt{constructor(t,e=t){super(D("polyline",t),e)}}_({Container:{polyline:q((function(t){return this.put(new Me).plot(t||new re)}))}}),Z(Me,ie),Z(Me,Te),L(Me,"Polyline");class Re extends jt{constructor(t,e=t){super(D("rect",t),e)}}Z(Re,{rx:Lt,ry:Pt}),_({Container:{rect:q((function(t,e){return this.put(new Re).size(t,e)}))}}),L(Re,"Rect");class Ne{constructor(){this._first=null,this._last=null}first(){return this._first&&this._first.value}last(){return this._last&&this._last.value}push(t){const e=void 0!==t.next?t:{value:t,next:null,prev:null};return this._last?(e.prev=this._last,this._last.next=e,this._last=e):(this._last=e,this._first=e),e}remove(t){t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next),t.prev=null,t.next=null}shift(){const t=this._first;return t?(this._first=t.next,this._first&&(this._first.prev=null),this._last=this._first?this._last:null,t.value):null}}const De={nextDraw:null,frames:new Ne,timeouts:new Ne,immediates:new Ne,timer:()=>O.window.performance||O.window.Date,transforms:[],frame(t){const e=De.frames.push({run:t});return null===De.nextDraw&&(De.nextDraw=O.window.requestAnimationFrame(De._draw)),e},timeout(t,e){e=e||0;const n=De.timer().now()+e,r=De.timeouts.push({run:t,time:n});return null===De.nextDraw&&(De.nextDraw=O.window.requestAnimationFrame(De._draw)),r},immediate(t){const e=De.immediates.push(t);return null===De.nextDraw&&(De.nextDraw=O.window.requestAnimationFrame(De._draw)),e},cancelFrame(t){null!=t&&De.frames.remove(t)},clearTimeout(t){null!=t&&De.timeouts.remove(t)},cancelImmediate(t){null!=t&&De.immediates.remove(t)},_draw(t){let e=null;const n=De.timeouts.last();for(;(e=De.timeouts.shift())&&(t>=e.time?e.run():De.timeouts.push(e),e!==n););let r=null;const i=De.frames.last();for(;r!==i&&(r=De.frames.shift());)r.run(t);let s=null;for(;s=De.immediates.shift();)s();De.nextDraw=De.timeouts.first()||De.frames.first()?O.window.requestAnimationFrame(De._draw):null}},Fe=function(t){const e=t.start,n=t.runner.duration();return{start:e,duration:n,end:e+n,runner:t.runner}},je=function(){const t=O.window;return(t.performance||t.Date).now()};class Le extends kt{constructor(t=je){super(),this._timeSource=t,this._startTime=0,this._speed=1,this._persist=0,this._nextFrame=null,this._paused=!0,this._runners=[],this._runnerIds=[],this._lastRunnerId=-1,this._time=0,this._lastSourceTime=0,this._lastStepTime=0,this._step=this._stepFn.bind(this,!1),this._stepImmediate=this._stepFn.bind(this,!0)}active(){return!!this._nextFrame}finish(){return this.time(this.getEndTimeOfTimeline()+1),this.pause()}getEndTime(){const t=this.getLastRunnerInfo(),e=t?t.runner.duration():0;return(t?t.start:this._time)+e}getEndTimeOfTimeline(){const t=this._runners.map((t=>t.start+t.runner.duration()));return Math.max(0,...t)}getLastRunnerInfo(){return this.getRunnerInfoById(this._lastRunnerId)}getRunnerInfoById(t){return this._runners[this._runnerIds.indexOf(t)]||null}pause(){return this._paused=!0,this._continue()}persist(t){return null==t?this._persist:(this._persist=t,this)}play(){return this._paused=!1,this.updateTime()._continue()}reverse(t){const e=this.speed();if(null==t)return this.speed(-e);const n=Math.abs(e);return this.speed(t?-n:n)}schedule(t,e,n){if(null==t)return this._runners.map(Fe);let r=0;const i=this.getEndTime();if(e=e||0,null==n||"last"===n||"after"===n)r=i;else if("absolute"===n||"start"===n)r=e,e=0;else if("now"===n)r=this._time;else if("relative"===n){const n=this.getRunnerInfoById(t.id);n&&(r=n.start+e,e=0)}else{if("with-last"!==n)throw new Error('Invalid value for the "when" parameter');{const t=this.getLastRunnerInfo();r=t?t.start:this._time}}t.unschedule(),t.timeline(this);const s=t.persist(),o={persist:null===s?this._persist:s,start:r+e,runner:t};return this._lastRunnerId=t.id,this._runners.push(o),this._runners.sort(((t,e)=>t.start-e.start)),this._runnerIds=this._runners.map((t=>t.runner.id)),this.updateTime()._continue(),this}seek(t){return this.time(this._time+t)}source(t){return null==t?this._timeSource:(this._timeSource=t,this)}speed(t){return null==t?this._speed:(this._speed=t,this)}stop(){return this.time(0),this.pause()}time(t){return null==t?this._time:(this._time=t,this._continue(!0))}unschedule(t){const e=this._runnerIds.indexOf(t.id);return e<0||(this._runners.splice(e,1),this._runnerIds.splice(e,1),t.timeline(null)),this}updateTime(){return this.active()||(this._lastSourceTime=this._timeSource()),this}_continue(t=!1){return De.cancelFrame(this._nextFrame),this._nextFrame=null,t?this._stepImmediate():(this._paused||(this._nextFrame=De.frame(this._step)),this)}_stepFn(t=!1){const e=this._timeSource();let n=e-this._lastSourceTime;t&&(n=0);const r=this._speed*n+(this._time-this._lastStepTime);this._lastSourceTime=e,t||(this._time+=r,this._time=this._time<0?0:this._time),this._lastStepTime=this._time,this.fire("time",this._time);for(let t=this._runners.length;t--;){const e=this._runners[t],n=e.runner;this._time-e.start<=0&&n.reset()}let i=!1;for(let t=0,e=this._runners.length;t<e;t++){const n=this._runners[t],s=n.runner;let o=r;const a=this._time-n.start;a<=0?i=!0:(a<o&&(o=a),s.active()&&(s.step(o).done?!0!==n.persist&&s.duration()-s.time()+this._time+n.persist<this._time&&(s.unschedule(),--t,--e):i=!0))}return i&&!(this._speed<0&&0===this._time)||this._runnerIds.length&&this._speed<0&&this._time>0?this._continue():(this.pause(),this.fire("finished")),this}}_({Element:{timeline:function(t){return null==t?(this._timeline=this._timeline||new Le,this._timeline):(this._timeline=t,this)}}});class Pe extends kt{constructor(t){super(),this.id=Pe.id++,t="function"==typeof(t=null==t?Bt:t)?new le(t):t,this._element=null,this._timeline=null,this.done=!1,this._queue=[],this._duration="number"==typeof t&&t,this._isDeclarative=t instanceof le,this._stepper=this._isDeclarative?t:new ce,this._history={},this.enabled=!0,this._time=0,this._lastTime=0,this._reseted=!0,this.transforms=new ct,this.transformId=1,this._haveReversed=!1,this._reverse=!1,this._loopsDone=0,this._swing=!1,this._wait=0,this._times=1,this._frameId=null,this._persist=!!this._isDeclarative||null}static sanitise(t,e,n){let r=1,i=!1,s=0;return e=e||St,n=n||"last","object"!=typeof(t=t||Bt)||t instanceof ue||(e=t.delay||e,n=t.when||n,i=t.swing||i,r=t.times||r,s=t.wait||s,t=t.duration||Bt),{duration:t,delay:e,swing:i,times:r,wait:s,when:n}}active(t){return null==t?this.enabled:(this.enabled=t,this)}addTransform(t,e){return this.transforms.lmultiplyO(t),this}after(t){return this.on("finished",t)}animate(t,e,n){const r=Pe.sanitise(t,e,n),i=new Pe(r.duration);return this._timeline&&i.timeline(this._timeline),this._element&&i.element(this._element),i.loop(r).schedule(r.delay,r.when)}clearTransform(){return this.transforms=new ct,this}clearTransformsFromQueue(){this.done&&this._timeline&&this._timeline._runnerIds.includes(this.id)||(this._queue=this._queue.filter((t=>!t.isTransform)))}delay(t){return this.animate(0,t)}duration(){return this._times*(this._wait+this._duration)-this._wait}during(t){return this.queue(null,t)}ease(t){return this._stepper=new ce(t),this}element(t){return null==t?this._element:(this._element=t,t._prepareRunner(),this)}finish(){return this.step(1/0)}loop(t,e,n){return"object"==typeof t&&(e=t.swing,n=t.wait,t=t.times),this._times=t||1/0,this._swing=e||!1,this._wait=n||0,!0===this._times&&(this._times=1/0),this}loops(t){const e=this._duration+this._wait;if(null==t){const t=Math.floor(this._time/e),n=(this._time-t*e)/this._duration;return Math.min(t+n,this._times)}const n=t%1,r=e*Math.floor(t)+this._duration*n;return this.time(r)}persist(t){return null==t?this._persist:(this._persist=t,this)}position(t){const e=this._time,n=this._duration,r=this._wait,i=this._times,s=this._swing,o=this._reverse;let a;if(null==t){const t=function(t){const e=s*Math.floor(t%(2*(r+n))/(r+n)),i=e&&!o||!e&&o,a=Math.pow(-1,i)*(t%(r+n))/n+i;return Math.max(Math.min(a,1),0)},h=i*(r+n)-r;return a=e<=0?Math.round(t(1e-5)):e<h?t(e):Math.round(t(h-1e-5)),a}const h=Math.floor(this.loops()),u=s&&h%2==0;return a=h+(u&&!o||o&&u?t:1-t),this.loops(a)}progress(t){return null==t?Math.min(1,this._time/this.duration()):this.time(t*this.duration())}queue(t,e,n,r){return this._queue.push({initialiser:t||Et,runner:e||Et,retarget:n,isTransform:r,initialised:!1,finished:!1}),this.timeline()&&this.timeline()._continue(),this}reset(){return this._reseted||(this.time(0),this._reseted=!0),this}reverse(t){return this._reverse=null==t?!this._reverse:t,this}schedule(t,e,n){if(t instanceof Le||(n=e,e=t,t=this.timeline()),!t)throw Error("Runner cannot be scheduled without timeline");return t.schedule(this,e,n),this}step(t){if(!this.enabled)return this;t=null==t?16:t,this._time+=t;const e=this.position(),n=this._lastPosition!==e&&this._time>=0;this._lastPosition=e;const r=this.duration(),i=this._lastTime<=0&&this._time>0,s=this._lastTime<r&&this._time>=r;this._lastTime=this._time,i&&this.fire("start",this);const o=this._isDeclarative;this.done=!o&&!s&&this._time>=r,this._reseted=!1;let a=!1;return(n||o)&&(this._initialise(n),this.transforms=new ct,a=this._run(o?t:e),this.fire("step",this)),this.done=this.done||a&&o,s&&this.fire("finished",this),this}time(t){if(null==t)return this._time;const e=t-this._time;return this.step(e),this}timeline(t){return void 0===t?this._timeline:(this._timeline=t,this)}unschedule(){const t=this.timeline();return t&&t.unschedule(this),this}_initialise(t){if(t||this._isDeclarative)for(let e=0,n=this._queue.length;e<n;++e){const n=this._queue[e],r=this._isDeclarative||!n.initialised&&t;t=!n.finished,r&&t&&(n.initialiser.call(this),n.initialised=!0)}}_rememberMorpher(t,e){if(this._history[t]={morpher:e,caller:this._queue[this._queue.length-1]},this._isDeclarative){const t=this.timeline();t&&t.play()}}_run(t){let e=!0;for(let n=0,r=this._queue.length;n<r;++n){const r=this._queue[n],i=r.runner.call(this,t);r.finished=r.finished||!0===i,e=e&&r.finished}return e}_tryRetarget(t,e,n){if(this._history[t]){if(!this._history[t].caller.initialised){const e=this._queue.indexOf(this._history[t].caller);return this._queue.splice(e,1),!1}this._history[t].caller.retarget?this._history[t].caller.retarget.call(this,e,n):this._history[t].morpher.to(e),this._history[t].caller.finished=!1;const r=this.timeline();return r&&r.play(),!0}return!1}}Pe.id=0;class Ue{constructor(t=new ct,e=-1,n=!0){this.transforms=t,this.id=e,this.done=n}clearTransformsFromQueue(){}}Z([Pe,Ue],{mergeWith(t){return new Ue(t.transforms.lmultiply(this.transforms),t.id)}});const We=(t,e)=>t.lmultiplyO(e),Ze=t=>t.transforms;function qe(){const t=this._transformationRunners.runners.map(Ze).reduce(We,new ct);this.transform(t),this._transformationRunners.merge(),1===this._transformationRunners.length()&&(this._frameId=null)}class He{constructor(){this.runners=[],this.ids=[]}add(t){if(this.runners.includes(t))return;const e=t.id+1;return this.runners.push(t),this.ids.push(e),this}clearBefore(t){const e=this.ids.indexOf(t+1)||1;return this.ids.splice(0,e,0),this.runners.splice(0,e,new Ue).forEach((t=>t.clearTransformsFromQueue())),this}edit(t,e){const n=this.ids.indexOf(t+1);return this.ids.splice(n,1,t+1),this.runners.splice(n,1,e),this}getByID(t){return this.runners[this.ids.indexOf(t+1)]}length(){return this.ids.length}merge(){let t=null;for(let e=0;e<this.runners.length;++e){const n=this.runners[e];if(!(t&&n.done&&t.done)||n._timeline&&n._timeline._runnerIds.includes(n.id)||t._timeline&&t._timeline._runnerIds.includes(t.id))t=n;else{this.remove(n.id);const r=n.mergeWith(t);this.edit(t.id,r),t=r,--e}}return this}remove(t){const e=this.ids.indexOf(t+1);return this.ids.splice(e,1),this.runners.splice(e,1),this}}_({Element:{animate(t,e,n){const r=Pe.sanitise(t,e,n),i=this.timeline();return new Pe(r.duration).loop(r).element(this).timeline(i.play()).schedule(r.delay,r.when)},delay(t,e){return this.animate(0,t,e)},_clearTransformRunnersBefore(t){this._transformationRunners.clearBefore(t.id)},_currentTransform(t){return this._transformationRunners.runners.filter((e=>e.id<=t.id)).map(Ze).reduce(We,new ct)},_addRunner(t){this._transformationRunners.add(t),De.cancelImmediate(this._frameId),this._frameId=De.immediate(qe.bind(this))},_prepareRunner(){null==this._frameId&&(this._transformationRunners=(new He).add(new Ue(new ct(this))))}}}),Z(Pe,{attr(t,e){return this.styleAttr("attr",t,e)},css(t,e){return this.styleAttr("css",t,e)},styleAttr(t,e,n){if("string"==typeof e)return this.styleAttr(t,{[e]:n});let r=e;if(this._tryRetarget(t,r))return this;let i=new ke(this._stepper).to(r),s=Object.keys(r);return this.queue((function(){i=i.from(this.element()[t](s))}),(function(e){return this.element()[t](i.at(e).valueOf()),i.done()}),(function(e){const n=Object.keys(e),o=(a=s,n.filter((t=>!a.includes(t))));var a;if(o.length){const e=this.element()[t](o),n=new Se(i.from()).valueOf();Object.assign(n,e),i.from(n)}const h=new Se(i.to()).valueOf();Object.assign(h,e),i.to(h),s=n,r=e})),this._rememberMorpher(t,i),this},zoom(t,e){if(this._tryRetarget("zoom",t,e))return this;let n=new ke(this._stepper).to(new Tt(t));return this.queue((function(){n=n.from(this.element().zoom())}),(function(t){return this.element().zoom(n.at(t),e),n.done()}),(function(t,r){e=r,n.to(t)})),this._rememberMorpher("zoom",n),this},transform(t,e,n){if(e=t.relative||e,this._isDeclarative&&!e&&this._tryRetarget("transform",t))return this;const r=ct.isMatrixLike(t);n=null!=t.affine?t.affine:null!=n?n:!r;const i=new ke(this._stepper).type(n?Be:ct);let s,o,a,h,u;return this.queue((function(){o=o||this.element(),s=s||B(t,o),u=new ct(e?void 0:o),o._addRunner(this),e||o._clearTransformRunnersBefore(this)}),(function(c){e||this.clearTransform();const{x:l,y:d}=new ht(s).transform(o._currentTransform(this));let f=new ct({...t,origin:[l,d]}),p=this._isDeclarative&&a?a:u;if(n){f=f.decompose(l,d),p=p.decompose(l,d);const t=f.rotate,e=p.rotate,n=[t-360,t,t+360],r=n.map((t=>Math.abs(t-e))),i=Math.min(...r),s=r.indexOf(i);f.rotate=n[s]}e&&(r||(f.rotate=t.rotate||0),this._isDeclarative&&h&&(p.rotate=h)),i.from(p),i.to(f);const A=i.at(c);return h=A.rotate,a=new ct(A),this.addTransform(a),o._addRunner(this),i.done()}),(function(e){(e.origin||"center").toString()!==(t.origin||"center").toString()&&(s=B(e,o)),t={...e,origin:s}}),!0),this._isDeclarative&&this._rememberMorpher("transform",i),this},x(t,e){return this._queueNumber("x",t)},y(t){return this._queueNumber("y",t)},dx(t=0){return this._queueNumberDelta("x",t)},dy(t=0){return this._queueNumberDelta("y",t)},dmove(t,e){return this.dx(t).dy(e)},_queueNumberDelta(t,e){if(e=new Tt(e),this._tryRetarget(t,e))return this;const n=new ke(this._stepper).to(e);let r=null;return this.queue((function(){r=this.element()[t](),n.from(r),n.to(r+e)}),(function(e){return this.element()[t](n.at(e)),n.done()}),(function(t){n.to(r+new Tt(t))})),this._rememberMorpher(t,n),this},_queueObject(t,e){if(this._tryRetarget(t,e))return this;const n=new ke(this._stepper).to(e);return this.queue((function(){n.from(this.element()[t]())}),(function(e){return this.element()[t](n.at(e)),n.done()})),this._rememberMorpher(t,n),this},_queueNumber(t,e){return this._queueObject(t,new Tt(e))},cx(t){return this._queueNumber("cx",t)},cy(t){return this._queueNumber("cy",t)},move(t,e){return this.x(t).y(e)},center(t,e){return this.cx(t).cy(e)},size(t,e){let n;return t&&e||(n=this._element.bbox()),t||(t=n.width/n.height*e),e||(e=n.height/n.width*t),this.width(t).height(e)},width(t){return this._queueNumber("width",t)},height(t){return this._queueNumber("height",t)},plot(t,e,n,r){if(4===arguments.length)return this.plot([t,e,n,r]);if(this._tryRetarget("plot",t))return this;const i=new ke(this._stepper).type(this._element.MorphArray).to(t);return this.queue((function(){i.from(this._element.array())}),(function(t){return this._element.plot(i.at(t)),i.done()})),this._rememberMorpher("plot",i),this},leading(t){return this._queueNumber("leading",t)},viewbox(t,e,n,r){return this._queueObject("viewbox",new ft(t,e,n,r))},update(t){return"object"!=typeof t?this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]}):(null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",t.offset),this)}}),Z(Pe,{rx:Lt,ry:Pt,from:Vt,to:$t}),L(Pe,"Runner");class Ge extends Dt{constructor(t,e=t){super(D("svg",t),e),this.namespace()}defs(){return this.isRoot()?F(this.node.querySelector("defs"))||this.put(new Ft):this.root().defs()}isRoot(){return!this.node.parentNode||!(this.node.parentNode instanceof O.window.SVGElement)&&"#document-fragment"!==this.node.parentNode.nodeName}namespace(){return this.isRoot()?this.attr({xmlns:C,version:"1.1"}).attr("xmlns:xlink",z,S).attr("xmlns:svgjs","http://svgjs.dev/svgjs",S):this.root().namespace()}removeNamespace(){return this.attr({xmlns:null,version:null}).attr("xmlns:xlink",null,S).attr("xmlns:svgjs",null,S)}root(){return this.isRoot()?this:super.root()}}_({Container:{nested:q((function(){return this.put(new Ge)}))}}),L(Ge,"Svg",!0);class Ye extends Dt{constructor(t,e=t){super(D("symbol",t),e)}}_({Container:{symbol:q((function(){return this.put(new Ye)}))}}),L(Ye,"Symbol");var Xe={__proto__:null,plain:function(t){return!1===this._build&&this.clear(),this.node.appendChild(O.document.createTextNode(t)),this},length:function(){return this.node.getComputedTextLength()},x:function(t,e=this.bbox()){return null==t?e.x:this.attr("x",this.attr("x")+t-e.x)},y:function(t,e=this.bbox()){return null==t?e.y:this.attr("y",this.attr("y")+t-e.y)},move:function(t,e,n=this.bbox()){return this.x(t,n).y(e,n)},cx:function(t,e=this.bbox()){return null==t?e.cx:this.attr("x",this.attr("x")+t-e.cx)},cy:function(t,e=this.bbox()){return null==t?e.cy:this.attr("y",this.attr("y")+t-e.cy)},center:function(t,e,n=this.bbox()){return this.cx(t,n).cy(e,n)},ax:function(t){return this.attr("x",t)},ay:function(t){return this.attr("y",t)},amove:function(t,e){return this.ax(t).ay(e)},build:function(t){return this._build=!!t,this}};class Ke extends jt{constructor(t,e=t){super(D("text",t),e),this.dom.leading=new Tt(1.3),this._rebuild=!0,this._build=!1}leading(t){return null==t?this.dom.leading:(this.dom.leading=new Tt(t),this.rebuild())}rebuild(t){if("boolean"==typeof t&&(this._rebuild=t),this._rebuild){const t=this;let e=0;const n=this.dom.leading;this.each((function(r){const i=O.window.getComputedStyle(this.node).getPropertyValue("font-size"),s=n*new Tt(i);this.dom.newLined&&(this.attr("x",t.attr("x")),"\n"===this.text()?e+=s:(this.attr("dy",r?s+e:0),e=0))})),this.fire("rebuild")}return this}setData(t){return this.dom=t,this.dom.leading=new Tt(t.leading||1.3),this}text(t){if(void 0===t){const e=this.node.childNodes;let n=0;t="";for(let r=0,i=e.length;r<i;++r)"textPath"!==e[r].nodeName?(r!==n&&3!==e[r].nodeType&&!0===F(e[r]).dom.newLined&&(t+="\n"),t+=e[r].textContent):0===r&&(n=1);return t}if(this.clear().build(!0),"function"==typeof t)t.call(this,this);else for(let e=0,n=(t=(t+"").split("\n")).length;e<n;e++)this.newLine(t[e]);return this.build(!1).rebuild()}}Z(Ke,Xe),_({Container:{text:q((function(t=""){return this.put(new Ke).text(t)})),plain:q((function(t=""){return this.put(new Ke).plain(t)}))}}),L(Ke,"Text");class Ve extends jt{constructor(t,e=t){super(D("tspan",t),e),this._build=!1}dx(t){return this.attr("dx",t)}dy(t){return this.attr("dy",t)}newLine(){this.dom.newLined=!0;const t=this.parent();if(!(t instanceof Ke))return this;const e=t.index(this),n=O.window.getComputedStyle(this.node).getPropertyValue("font-size"),r=t.dom.leading*new Tt(n);return this.dy(e?r:0).attr("x",t.x())}text(t){return null==t?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof t?(this.clear().build(!0),t.call(this,this),this.build(!1)):this.plain(t),this)}}Z(Ve,Xe),_({Tspan:{tspan:q((function(t=""){const e=new Ve;return this._build||this.clear(),this.put(e).text(t)}))},Text:{newLine:function(t=""){return this.tspan(t).newLine()}}}),L(Ve,"Tspan");class $e extends jt{constructor(t,e=t){super(D("circle",t),e)}radius(t){return this.attr("r",t)}rx(t){return this.attr("r",t)}ry(t){return this.rx(t)}size(t){return this.radius(new Tt(t).divide(2))}}Z($e,{x:Ut,y:Wt,cx:Zt,cy:qt,width:Ht,height:Gt}),_({Container:{circle:q((function(t=0){return this.put(new $e).size(t).move(0,0)}))}}),L($e,"Circle");class Je extends Dt{constructor(t,e=t){super(D("clipPath",t),e)}remove(){return this.targets().forEach((function(t){t.unclip()})),super.remove()}targets(){return gt('svg [clip-path*="'+this.id()+'"]')}}_({Container:{clip:q((function(){return this.defs().put(new Je)}))},Element:{clipper(){return this.reference("clip-path")},clipWith(t){const e=t instanceof Je?t:this.parent().clip().add(t);return this.attr("clip-path",'url("#'+e.id()+'")')},unclip(){return this.attr("clip-path",null)}}}),L(Je,"ClipPath");class Qe extends Rt{constructor(t,e=t){super(D("foreignObject",t),e)}}_({Container:{foreignObject:q((function(t,e){return this.put(new Qe).size(t,e)}))}}),L(Qe,"ForeignObject");var tn={__proto__:null,dmove:function(t,e){return this.children().forEach(((n,r)=>{let i;try{i=n.bbox()}catch(t){return}const s=new ct(n),o=s.translate(t,e).transform(s.inverse()),a=new ht(i.x,i.y).transform(o);n.move(a.x,a.y)})),this},dx:function(t){return this.dmove(t,0)},dy:function(t){return this.dmove(0,t)},height:function(t,e=this.bbox()){return null==t?e.height:this.size(e.width,t,e)},move:function(t=0,e=0,n=this.bbox()){const r=t-n.x,i=e-n.y;return this.dmove(r,i)},size:function(t,e,n=this.bbox()){const r=E(this,t,e,n),i=r.width/n.width,s=r.height/n.height;return this.children().forEach(((t,e)=>{const r=new ht(n).transform(new ct(t).inverse());t.scale(i,s,r.x,r.y)})),this},width:function(t,e=this.bbox()){return null==t?e.width:this.size(t,e.height,e)},x:function(t,e=this.bbox()){return null==t?e.x:this.move(t,e.y,e)},y:function(t,e=this.bbox()){return null==t?e.y:this.move(e.x,t,e)}};class en extends Dt{constructor(t,e=t){super(D("g",t),e)}}Z(en,tn),_({Container:{group:q((function(){return this.put(new en)}))}}),L(en,"G");class nn extends Dt{constructor(t,e=t){super(D("a",t),e)}target(t){return this.attr("target",t)}to(t){return this.attr("href",t,z)}}Z(nn,tn),_({Container:{link:q((function(t){return this.put(new nn).to(t)}))},Element:{unlink(){const t=this.linker();if(!t)return this;const e=t.parent();if(!e)return this.remove();const n=e.index(t);return e.add(this,n),t.remove(),this},linkTo(t){let e=this.linker();return e||(e=new nn,this.wrap(e)),"function"==typeof t?t.call(e,e):e.to(t),this},linker(){const t=this.parent();return t&&"a"===t.node.nodeName.toLowerCase()?t:null}}}),L(nn,"A");class rn extends Dt{constructor(t,e=t){super(D("mask",t),e)}remove(){return this.targets().forEach((function(t){t.unmask()})),super.remove()}targets(){return gt('svg [mask*="'+this.id()+'"]')}}_({Container:{mask:q((function(){return this.defs().put(new rn)}))},Element:{masker(){return this.reference("mask")},maskWith(t){const e=t instanceof rn?t:this.parent().mask().add(t);return this.attr("mask",'url("#'+e.id()+'")')},unmask(){return this.attr("mask",null)}}}),L(rn,"Mask");class sn extends Rt{constructor(t,e=t){super(D("stop",t),e)}update(t){return("number"==typeof t||t instanceof Tt)&&(t={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new Tt(t.offset)),this}}_({Gradient:{stop:function(t,e,n){return this.put(new sn).update(t,e,n)}}}),L(sn,"Stop");class on extends Rt{constructor(t,e=t){super(D("style",t),e)}addText(t=""){return this.node.textContent+=t,this}font(t,e,n={}){return this.rule("@font-face",{fontFamily:t,src:e,...n})}rule(t,e){return this.addText(function(t,e){if(!t)return"";if(!e)return t;let n=t+"{";for(const t in e)n+=t.replace(/([A-Z])/g,(function(t,e){return"-"+e.toLowerCase()}))+":"+e[t]+";";return n+="}",n}(t,e))}}_("Dom",{style(t,e){return this.put(new on).rule(t,e)},fontface(t,e,n){return this.put(new on).font(t,e,n)}}),L(on,"Style");class an extends Ke{constructor(t,e=t){super(D("textPath",t),e)}array(){const t=this.track();return t?t.array():null}plot(t){const e=this.track();let n=null;return e&&(n=e.plot(t)),null==t?n:this}track(){return this.reference("href")}}_({Container:{textPath:q((function(t,e){return t instanceof Ke||(t=this.text(t)),t.path(e)}))},Text:{path:q((function(t,e=!0){const n=new an;let r;if(t instanceof Oe||(t=this.defs().path(t)),n.attr("href","#"+t,z),e)for(;r=this.node.firstChild;)n.node.appendChild(r);return this.put(n)})),textPath(){return this.findOne("textPath")}},Path:{text:q((function(t){return t instanceof Ke||(t=(new Ke).addTo(this.parent()).text(t)),t.path(this)})),targets(){return gt("svg textPath").filter((t=>(t.attr("href")||"").includes(this.id())))}}}),an.prototype.MorphArray=ve,L(an,"TextPath");class hn extends jt{constructor(t,e=t){super(D("use",t),e)}use(t,e){return this.attr("href",(e||"")+"#"+t,z)}}_({Container:{use:q((function(t,e){return this.put(new hn).use(t,e)}))}}),L(hn,"Use");const un=N;Z([Ge,Ye,ne,ee,oe],w("viewbox")),Z([se,Me,Ie,Oe],w("marker")),Z(Ke,w("Text")),Z(Oe,w("Path")),Z(Ft,w("Defs")),Z([Ke,Ve],w("Tspan")),Z([Re,Xt,te,Pe],w("radius")),Z(kt,w("EventTarget")),Z(Mt,w("Dom")),Z(Rt,w("Element")),Z(jt,w("Shape")),Z([Dt,Kt],w("Container")),Z(te,w("Gradient")),Z(Pe,w("Runner")),At.extend([...new Set(g)]),function(t=[]){ze.push(...[].concat(t))}([Tt,at,ft,ct,Ot,re,ve,ht]),Z(ze,{to(t){return(new ke).type(this.constructor).from(this.toArray()).to(t)},fromArray(t){return this.init(t),this},toConsumable(){return this.toArray()},morph(t,e,n,r,i){return this.fromArray(t.map((function(t,s){return r.step(t,e[s],n,i[s],i)})))}});var cn=n(733),ln=n(162);let dn,fn,pn,An,mn,gn,_n,wn,yn,bn,vn,xn,kn,En,Bn=!1;dn={pixelImg:void 0,pixelImgBase64:void 0,sprite:{pixelsPerUnit:10,width:24,height:24,padding:4,outputPixelSize:10,spriteNames:[]},exports:{withBackground:!0,withoutBackground:!0,withSizeGuide:!0}},fn=document.querySelector("#preview"),pn=document.querySelector("#pixelsPerUnit"),An=document.querySelector("#width"),mn=document.querySelector("#height"),gn=document.querySelector("#padding"),_n=document.querySelector("#outputPixelSize"),wn=document.querySelector("#withBackground"),yn=document.querySelector("#withoutBackground"),bn=document.querySelector("#withSizeGuide"),xn=document.querySelector("#exportButton"),kn=document.querySelector("#exportDescription"),vn=document.querySelector("#spriteNames"),En=[{checkbox:wn,configKey:"withBackground"},{checkbox:yn,configKey:"withoutBackground"},{checkbox:bn,configKey:"withSizeGuide"}],document.querySelector("#imageUploadInput").addEventListener("change",(function(t){const e=t.currentTarget.files[0];if(!e)return;const n=new FileReader;n.onload=async function(){const t=await async function(t){return new Promise(((e,n)=>{const r=new Image;r.onload=function(){e(r)},r.onerror=function(){n(new Error(`Image ${t} cannot be loaded`))},r.src=t}))}(n.result);dn.pixelImgBase64=n.result,dn.pixelImg=t,fn.src=t.src},n.readAsDataURL(e)})),[{input:pn,min:1,configKey:"pixelsPerUnit"},{input:An,min:1,configKey:"width"},{input:mn,min:1,configKey:"height"},{input:gn,min:0,configKey:"padding"},{input:_n,min:1,configKey:"outputPixelSize"}].forEach((t=>{const e=A(t.configKey);null!=e&&(dn.sprite[t.configKey]=e),t.input.value=dn.sprite[t.configKey],t.input.addEventListener("input",function({input:t,min:e,configKey:n}){return r=>{const i=t.value,s=Number(i);if(isNaN(s)||s<e)return Bn=!0,void t.classList.add("border-red-500");Bn=!1,t.classList.remove("border-red-500"),dn.sprite[n]=s,A(n,s)}}(t))})),En.forEach((t=>{t.checkbox.checked=dn.exports[t.configKey],t.checkbox.addEventListener("click",function({checkbox:t,configKey:e}){return n=>{const r=t.checked;dn.exports[e]=r}}(t))})),vn.addEventListener("change",(t=>{const e=vn.value.replace(" ","");if(0===e.length)return;const n=e.split(/\r?\n/g).map((t=>t.trim()));dn.sprite.spriteNames=n})),xn.addEventListener("click",(function(){return kn.innerText="",kn.classList.remove("text-gray-500"),kn.classList.remove("text-red-500"),null==dn.pixelImg?(kn.classList.add("text-red-500"),void(kn.innerText="Upload a pixel art before exporting.")):Bn?(kn.classList.add("text-red-500"),void(kn.innerText="There are errors in the form fields.")):En.some((t=>dn.exports[t.configKey]))?(xn.disabled=!0,kn.classList.add("text-gray-500"),void async function(t,e,r){try{const i=await createImageBitmap(t.pixelImg),s=new OffscreenCanvas(i.width,i.height),o={withBackground:[],withoutBackground:[],withSizeGuide:[]},a=new Worker(new URL(n.p+n.u(477),n.b));a.onmessage=n=>{switch(n.data.type){case"progress":{e.innerText=`Processing ${n.data.details}`;const r=function(t,e){const n={},{withBackground:r,withoutBackground:i,withSizeGuide:s}=e,o=un().size(t.w,t.h).viewbox(0,0,t.w,t.h),a=o.group();if(t.pixels.forEach((t=>{a.rect(t.w,t.h).fill({color:t.fill,opacity:t.opacity}).x(t.x).y(t.y)})),i&&(n.withoutBackground={svg:o.svg(),filename:`${t.filename}_no_bg.svg`}),t.padding>0&&(r||s)){const e=t.background,i=un().size(e.w,e.h).viewbox(0,0,e.w,e.h);i.rect(e.w,e.h).fill(e.fill).x(e.x).y(e.y),i.svg(a.svg());const o=i.get(1);if(o.move(o.x()+t.padding,o.y()+t.padding),r&&(n.withBackground={svg:i.svg(),filename:`${t.filename}_with_bg.svg`}),s){const e=un();e.svg(i.svg(!1));const r=t.guide,s=e.group();s.backward();const o=s.mask();r.mask.forEach((t=>{const e=s.rect(t.w,t.h).fill(t.fill).x(t.x).y(t.y);o.add(e)})),s.rect(r.masked.w,r.masked.h).fill(r.masked.fill).x(r.masked.x).y(r.masked.y).maskWith(o),n.withSizeGuide={svg:e.svg(),filename:`${t.filename}_with_guide.svg`}}}return n}(n.data.svgData,t.exports);for(let[t,e]of Object.entries(r))o[t].push(e);break}case"end":e.innerText="",r(),async function(t){const e=new cn;for(let[n,r]of Object.entries(t))for(const t of r)e.file(`converted_svgs/${n}/${t.filename}`,t.svg,{createFolders:!0});e.generateAsync({type:"blob"}).then((t=>{(0,ln.saveAs)(t,"converted_svgs.zip")}))}(o);break;case"info":console.log("W:",n.data);break;default:throw{error:"Unknown message from worker",message:n.data}}},a.postMessage({canvas:s,pixelImg:i,spriteConfig:t.sprite,exportTypes:t.exports},[s])}catch(t){console.log(t)}}(dn,kn,(()=>xn.disabled=!1))):(kn.classList.add("text-red-500"),void(kn.innerText="At least one export type should be selected."))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixDQUNBLElBQUssTUFDSFYsRUFBV3QrQyxVQUFZLEdBQ3ZCdStDLElBOEZWdnFDLGVBQTJCMnFDLEdBQ3pCLE1BQU1zQixFQUFNLElBQUksR0FDaEIsSUFBSyxJQUFLRCxFQUFZRSxLQUFnQnozQyxPQUFPdWpDLFFBQVEyUyxHQUNuRCxJQUFLLE1BQU1LLEtBQVdrQixFQUNwQkQsRUFBSW43QyxLQUNGLGtCQUFrQms3QyxLQUFjaEIsRUFBUUksV0FDeENKLEVBQVF4MEIsSUFDUixDQUNFcG5CLGVBQWUsSUFNdkI2OEMsRUFBSW4wQyxjQUFjLENBQUVsTSxLQUFNLFNBQVVnSyxNQUFNek8sS0FDeEMsS0FBQW9ELFFBQU9wRCxFQUFTLHFCQUFxQixHQUV6QyxDQTlHVWdsRCxDQUFZeEIsR0FDWixNQUVGLElBQUssT0FDSHJoRCxRQUFRcXJCLElBQUksS0FBTWpyQixFQUFFakIsTUFDcEIsTUFFRixRQUNFLEtBQU0sQ0FBRWMsTUFBTyw4QkFBK0I2aUQsUUFBUzFpRCxFQUFFakIsTUFDN0QsRUFHRm1pRCxFQUFPNXBDLFlBQ0wsQ0FDRXFyQyxPQUFRNUIsRUFDUjNCLFdBQ0F3RCxhQUFjdkUsRUFBT2lCLE9BQ3JCdUQsWUFBYXhFLEVBQU9uaEQsU0FFdEIsQ0FBQzZqRCxHQUVMLENBQUUsTUFBT2hvQyxHQUNQblosUUFBUXFyQixJQUFJbFMsRUFDZCxDQUNGLENGK0VFK3BDLENBQVV6RSxHQUFRWSxJQUFtQixJQUFPRCxHQUFhMkIsVUFBVyxNQVBsRTFCLEdBQWtCb0IsVUFBVW54QixJQUFJLHFCQUNoQyt2QixHQUFrQjM4QyxVQUNoQixnREFNTiIsInNvdXJjZXMiOlsid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL3NyYy9tYWluLmNzcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL25vZGVfbW9kdWxlcy9maWxlLXNhdmVyL2Rpc3QvRmlsZVNhdmVyLm1pbi5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9ub2RlX21vZHVsZXMvanN6aXAvZGlzdC9qc3ppcC5taW4uanMiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnLy4vc3JjL21haW4uY3NzP2MxMDQiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovL3BpeGVsYXJ0LXRvLXN2Zy8uL25vZGVfbW9kdWxlcy9Ac3ZnZG90anMvc3ZnLmpzL2Rpc3Qvc3ZnLmVzbS5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9zcmMvdWkuanMiLCJ3ZWJwYWNrOi8vcGl4ZWxhcnQtdG8tc3ZnLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9waXhlbGFydC10by1zdmcvLi9zcmMvY29udmVydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qXFxuISB0YWlsd2luZGNzcyB2My4zLjIgfCBNSVQgTGljZW5zZSB8IGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tXFxuKi8vKlxcbjEuIFByZXZlbnQgcGFkZGluZyBhbmQgYm9yZGVyIGZyb20gYWZmZWN0aW5nIGVsZW1lbnQgd2lkdGguIChodHRwczovL2dpdGh1Yi5jb20vbW96ZGV2cy9jc3NyZW1lZHkvaXNzdWVzLzQpXFxuMi4gQWxsb3cgYWRkaW5nIGEgYm9yZGVyIHRvIGFuIGVsZW1lbnQgYnkganVzdCBhZGRpbmcgYSBib3JkZXItd2lkdGguIChodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRjc3MvdGFpbHdpbmRjc3MvcHVsbC8xMTYpXFxuKi9cXG5cXG4qLFxcbjo6YmVmb3JlLFxcbjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgYm9yZGVyLXdpZHRoOiAwOyAvKiAyICovXFxuICBib3JkZXItc3R5bGU6IHNvbGlkOyAvKiAyICovXFxuICBib3JkZXItY29sb3I6ICNlNWU3ZWI7IC8qIDIgKi9cXG59XFxuXFxuOjpiZWZvcmUsXFxuOjphZnRlciB7XFxuICAtLXR3LWNvbnRlbnQ6ICcnO1xcbn1cXG5cXG4vKlxcbjEuIFVzZSBhIGNvbnNpc3RlbnQgc2Vuc2libGUgbGluZS1oZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbjIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxcbjMuIFVzZSBhIG1vcmUgcmVhZGFibGUgdGFiIHNpemUuXFxuNC4gVXNlIHRoZSB1c2VyJ3MgY29uZmlndXJlZCBgc2Fuc2AgZm9udC1mYW1pbHkgYnkgZGVmYXVsdC5cXG41LiBVc2UgdGhlIHVzZXIncyBjb25maWd1cmVkIGBzYW5zYCBmb250LWZlYXR1cmUtc2V0dGluZ3MgYnkgZGVmYXVsdC5cXG42LiBVc2UgdGhlIHVzZXIncyBjb25maWd1cmVkIGBzYW5zYCBmb250LXZhcmlhdGlvbi1zZXR0aW5ncyBieSBkZWZhdWx0LlxcbiovXFxuXFxuaHRtbCB7XFxuICBsaW5lLWhlaWdodDogMS41OyAvKiAxICovXFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXG4gIC1tb3otdGFiLXNpemU6IDQ7IC8qIDMgKi9cXG4gIC1vLXRhYi1zaXplOiA0O1xcbiAgICAgdGFiLXNpemU6IDQ7IC8qIDMgKi9cXG4gIGZvbnQtZmFtaWx5OiB1aS1zYW5zLXNlcmlmLCBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgXFxcIk5vdG8gU2Fuc1xcXCIsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLCBcXFwiTm90byBDb2xvciBFbW9qaVxcXCI7IC8qIDQgKi9cXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogbm9ybWFsOyAvKiA1ICovXFxuICBmb250LXZhcmlhdGlvbi1zZXR0aW5nczogbm9ybWFsOyAvKiA2ICovXFxufVxcblxcbi8qXFxuMS4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbjIuIEluaGVyaXQgbGluZS1oZWlnaHQgZnJvbSBgaHRtbGAgc28gdXNlcnMgY2FuIHNldCB0aGVtIGFzIGEgY2xhc3MgZGlyZWN0bHkgb24gdGhlIGBodG1sYCBlbGVtZW50LlxcbiovXFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7IC8qIDEgKi9cXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyAvKiAyICovXFxufVxcblxcbi8qXFxuMS4gQWRkIHRoZSBjb3JyZWN0IGhlaWdodCBpbiBGaXJlZm94LlxcbjIuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIG9mIGJvcmRlciBjb2xvciBpbiBGaXJlZm94LiAoaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTkwNjU1KVxcbjMuIEVuc3VyZSBob3Jpem9udGFsIHJ1bGVzIGFyZSB2aXNpYmxlIGJ5IGRlZmF1bHQuXFxuKi9cXG5cXG5ociB7XFxuICBoZWlnaHQ6IDA7IC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXFxuICBib3JkZXItdG9wLXdpZHRoOiAxcHg7IC8qIDMgKi9cXG59XFxuXFxuLypcXG5BZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4qL1xcblxcbmFiYnI6d2hlcmUoW3RpdGxlXSkge1xcbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGRlZmF1bHQgZm9udCBzaXplIGFuZCB3ZWlnaHQgZm9yIGhlYWRpbmdzLlxcbiovXFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUsXFxuaDYge1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbi8qXFxuUmVzZXQgbGlua3MgdG8gb3B0aW1pemUgZm9yIG9wdC1pbiBzdHlsaW5nIGluc3RlYWQgb2Ygb3B0LW91dC5cXG4qL1xcblxcbmEge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIEVkZ2UgYW5kIFNhZmFyaS5cXG4qL1xcblxcbmIsXFxuc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi8qXFxuMS4gVXNlIHRoZSB1c2VyJ3MgY29uZmlndXJlZCBgbW9ub2AgZm9udCBmYW1pbHkgYnkgZGVmYXVsdC5cXG4yLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuKi9cXG5cXG5jb2RlLFxcbmtiZCxcXG5zYW1wLFxcbnByZSB7XFxuICBmb250LWZhbWlseTogdWktbW9ub3NwYWNlLCBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuKi9cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuLypcXG5QcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuc3ViLFxcbnN1cCB7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5zdWIge1xcbiAgYm90dG9tOiAtMC4yNWVtO1xcbn1cXG5cXG5zdXAge1xcbiAgdG9wOiAtMC41ZW07XFxufVxcblxcbi8qXFxuMS4gUmVtb3ZlIHRleHQgaW5kZW50YXRpb24gZnJvbSB0YWJsZSBjb250ZW50cyBpbiBDaHJvbWUgYW5kIFNhZmFyaS4gKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTk5OTA4OCwgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMTI5NylcXG4yLiBDb3JyZWN0IHRhYmxlIGJvcmRlciBjb2xvciBpbmhlcml0YW5jZSBpbiBhbGwgQ2hyb21lIGFuZCBTYWZhcmkuIChodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MzU3MjksIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTUwMTYpXFxuMy4gUmVtb3ZlIGdhcHMgYmV0d2VlbiB0YWJsZSBib3JkZXJzIGJ5IGRlZmF1bHQuXFxuKi9cXG5cXG50YWJsZSB7XFxuICB0ZXh0LWluZGVudDogMDsgLyogMSAqL1xcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0OyAvKiAyICovXFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyAvKiAzICovXFxufVxcblxcbi8qXFxuMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbjMuIFJlbW92ZSBkZWZhdWx0IHBhZGRpbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxuICBmb250LXdlaWdodDogaW5oZXJpdDsgLyogMSAqL1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAxICovXFxuICBtYXJnaW46IDA7IC8qIDIgKi9cXG4gIHBhZGRpbmc6IDA7IC8qIDMgKi9cXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UgYW5kIEZpcmVmb3guXFxuKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbn1cXG5cXG4vKlxcbjEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuMi4gUmVtb3ZlIGRlZmF1bHQgYnV0dG9uIHN0eWxlcy5cXG4qL1xcblxcbmJ1dHRvbixcXG5bdHlwZT0nYnV0dG9uJ10sXFxuW3R5cGU9J3Jlc2V0J10sXFxuW3R5cGU9J3N1Ym1pdCddIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgLyogMiAqL1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblVzZSB0aGUgbW9kZXJuIEZpcmVmb3ggZm9jdXMgc3R5bGUgZm9yIGFsbCBmb2N1c2FibGUgZWxlbWVudHMuXFxuKi9cXG5cXG46LW1vei1mb2N1c3Jpbmcge1xcbiAgb3V0bGluZTogYXV0bztcXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGFkZGl0aW9uYWwgYDppbnZhbGlkYCBzdHlsZXMgaW4gRmlyZWZveC4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2dlY2tvLWRldi9ibG9iLzJmOWVhY2Q5ZDNkOTk1YzkzN2I0MjUxYTU1NTdkOTVkNDk0YzliZTEvbGF5b3V0L3N0eWxlL3Jlcy9mb3Jtcy5jc3MjTDcyOC1MNzM3KVxcbiovXFxuXFxuOi1tb3otdWktaW52YWxpZCB7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG5cXG4vKlxcbkFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lIGFuZCBGaXJlZm94LlxcbiovXFxuXFxucHJvZ3Jlc3Mge1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG4vKlxcbkNvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIFNhZmFyaS5cXG4qL1xcblxcbjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG46Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4vKlxcbjEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxcbjIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxcbiovXFxuXFxuW3R5cGU9J3NlYXJjaCddIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXFxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cXG4qL1xcblxcbjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi8qXFxuMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cXG4yLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXFxuKi9cXG5cXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXFxuICBmb250OiBpbmhlcml0OyAvKiAyICovXFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuKi9cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG59XFxuXFxuLypcXG5SZW1vdmVzIHRoZSBkZWZhdWx0IHNwYWNpbmcgYW5kIGJvcmRlciBmb3IgYXBwcm9wcmlhdGUgZWxlbWVudHMuXFxuKi9cXG5cXG5ibG9ja3F1b3RlLFxcbmRsLFxcbmRkLFxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2LFxcbmhyLFxcbmZpZ3VyZSxcXG5wLFxcbnByZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmZpZWxkc2V0IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmxlZ2VuZCB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5vbCxcXG51bCxcXG5tZW51IHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4vKlxcblByZXZlbnQgcmVzaXppbmcgdGV4dGFyZWFzIGhvcml6b250YWxseSBieSBkZWZhdWx0LlxcbiovXFxuXFxudGV4dGFyZWEge1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG59XFxuXFxuLypcXG4xLiBSZXNldCB0aGUgZGVmYXVsdCBwbGFjZWhvbGRlciBvcGFjaXR5IGluIEZpcmVmb3guIChodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRsYWJzL3RhaWx3aW5kY3NzL2lzc3Vlcy8zMzAwKVxcbjIuIFNldCB0aGUgZGVmYXVsdCBwbGFjZWhvbGRlciBjb2xvciB0byB0aGUgdXNlcidzIGNvbmZpZ3VyZWQgZ3JheSA0MDAgY29sb3IuXFxuKi9cXG5cXG5pbnB1dDo6LW1vei1wbGFjZWhvbGRlciwgdGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXIge1xcbiAgb3BhY2l0eTogMTsgLyogMSAqL1xcbiAgY29sb3I6ICM5Y2EzYWY7IC8qIDIgKi9cXG59XFxuXFxuaW5wdXQ6OnBsYWNlaG9sZGVyLFxcbnRleHRhcmVhOjpwbGFjZWhvbGRlciB7XFxuICBvcGFjaXR5OiAxOyAvKiAxICovXFxuICBjb2xvcjogIzljYTNhZjsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblNldCB0aGUgZGVmYXVsdCBjdXJzb3IgZm9yIGJ1dHRvbnMuXFxuKi9cXG5cXG5idXR0b24sXFxuW3JvbGU9XFxcImJ1dHRvblxcXCJdIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLypcXG5NYWtlIHN1cmUgZGlzYWJsZWQgYnV0dG9ucyBkb24ndCBnZXQgdGhlIHBvaW50ZXIgY3Vyc29yLlxcbiovXFxuOmRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuLypcXG4xLiBNYWtlIHJlcGxhY2VkIGVsZW1lbnRzIGBkaXNwbGF5OiBibG9ja2AgYnkgZGVmYXVsdC4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3pkZXZzL2Nzc3JlbWVkeS9pc3N1ZXMvMTQpXFxuMi4gQWRkIGB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlYCB0byBhbGlnbiByZXBsYWNlZCBlbGVtZW50cyBtb3JlIHNlbnNpYmx5IGJ5IGRlZmF1bHQuIChodHRwczovL2dpdGh1Yi5jb20vamVuc2ltbW9ucy9jc3NyZW1lZHkvaXNzdWVzLzE0I2lzc3VlY29tbWVudC02MzQ5MzQyMTApXFxuICAgVGhpcyBjYW4gdHJpZ2dlciBhIHBvb3JseSBjb25zaWRlcmVkIGxpbnQgZXJyb3IgaW4gc29tZSB0b29scyBidXQgaXMgaW5jbHVkZWQgYnkgZGVzaWduLlxcbiovXFxuXFxuaW1nLFxcbnN2ZyxcXG52aWRlbyxcXG5jYW52YXMsXFxuYXVkaW8sXFxuaWZyYW1lLFxcbmVtYmVkLFxcbm9iamVjdCB7XFxuICBkaXNwbGF5OiBibG9jazsgLyogMSAqL1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogMiAqL1xcbn1cXG5cXG4vKlxcbkNvbnN0cmFpbiBpbWFnZXMgYW5kIHZpZGVvcyB0byB0aGUgcGFyZW50IHdpZHRoIGFuZCBwcmVzZXJ2ZSB0aGVpciBpbnRyaW5zaWMgYXNwZWN0IHJhdGlvLiAoaHR0cHM6Ly9naXRodWIuY29tL21vemRldnMvY3NzcmVtZWR5L2lzc3Vlcy8xNClcXG4qL1xcblxcbmltZyxcXG52aWRlbyB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi8qIE1ha2UgZWxlbWVudHMgd2l0aCB0aGUgSFRNTCBoaWRkZW4gYXR0cmlidXRlIHN0YXkgaGlkZGVuIGJ5IGRlZmF1bHQgKi9cXG5baGlkZGVuXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4qLCA6OmJlZm9yZSwgOjphZnRlciB7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXg6IDA7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXk6IDA7XFxuICAtLXR3LXRyYW5zbGF0ZS14OiAwO1xcbiAgLS10dy10cmFuc2xhdGUteTogMDtcXG4gIC0tdHctcm90YXRlOiAwO1xcbiAgLS10dy1za2V3LXg6IDA7XFxuICAtLXR3LXNrZXcteTogMDtcXG4gIC0tdHctc2NhbGUteDogMTtcXG4gIC0tdHctc2NhbGUteTogMTtcXG4gIC0tdHctcGFuLXg6ICA7XFxuICAtLXR3LXBhbi15OiAgO1xcbiAgLS10dy1waW5jaC16b29tOiAgO1xcbiAgLS10dy1zY3JvbGwtc25hcC1zdHJpY3RuZXNzOiBwcm94aW1pdHk7XFxuICAtLXR3LWdyYWRpZW50LWZyb20tcG9zaXRpb246ICA7XFxuICAtLXR3LWdyYWRpZW50LXZpYS1wb3NpdGlvbjogIDtcXG4gIC0tdHctZ3JhZGllbnQtdG8tcG9zaXRpb246ICA7XFxuICAtLXR3LW9yZGluYWw6ICA7XFxuICAtLXR3LXNsYXNoZWQtemVybzogIDtcXG4gIC0tdHctbnVtZXJpYy1maWd1cmU6ICA7XFxuICAtLXR3LW51bWVyaWMtc3BhY2luZzogIDtcXG4gIC0tdHctbnVtZXJpYy1mcmFjdGlvbjogIDtcXG4gIC0tdHctcmluZy1pbnNldDogIDtcXG4gIC0tdHctcmluZy1vZmZzZXQtd2lkdGg6IDBweDtcXG4gIC0tdHctcmluZy1vZmZzZXQtY29sb3I6ICNmZmY7XFxuICAtLXR3LXJpbmctY29sb3I6IHJnYig1OSAxMzAgMjQ2IC8gMC41KTtcXG4gIC0tdHctcmluZy1vZmZzZXQtc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXJpbmctc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXNoYWRvdzogMCAwICMwMDAwO1xcbiAgLS10dy1zaGFkb3ctY29sb3JlZDogMCAwICMwMDAwO1xcbiAgLS10dy1ibHVyOiAgO1xcbiAgLS10dy1icmlnaHRuZXNzOiAgO1xcbiAgLS10dy1jb250cmFzdDogIDtcXG4gIC0tdHctZ3JheXNjYWxlOiAgO1xcbiAgLS10dy1odWUtcm90YXRlOiAgO1xcbiAgLS10dy1pbnZlcnQ6ICA7XFxuICAtLXR3LXNhdHVyYXRlOiAgO1xcbiAgLS10dy1zZXBpYTogIDtcXG4gIC0tdHctZHJvcC1zaGFkb3c6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJsdXI6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWNvbnRyYXN0OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWludmVydDogIDtcXG4gIC0tdHctYmFja2Ryb3Atb3BhY2l0eTogIDtcXG4gIC0tdHctYmFja2Ryb3Atc2F0dXJhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLXNlcGlhOiAgO1xcbn1cXG5cXG46OmJhY2tkcm9wIHtcXG4gIC0tdHctYm9yZGVyLXNwYWNpbmcteDogMDtcXG4gIC0tdHctYm9yZGVyLXNwYWNpbmcteTogMDtcXG4gIC0tdHctdHJhbnNsYXRlLXg6IDA7XFxuICAtLXR3LXRyYW5zbGF0ZS15OiAwO1xcbiAgLS10dy1yb3RhdGU6IDA7XFxuICAtLXR3LXNrZXcteDogMDtcXG4gIC0tdHctc2tldy15OiAwO1xcbiAgLS10dy1zY2FsZS14OiAxO1xcbiAgLS10dy1zY2FsZS15OiAxO1xcbiAgLS10dy1wYW4teDogIDtcXG4gIC0tdHctcGFuLXk6ICA7XFxuICAtLXR3LXBpbmNoLXpvb206ICA7XFxuICAtLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6IHByb3hpbWl0eTtcXG4gIC0tdHctZ3JhZGllbnQtZnJvbS1wb3NpdGlvbjogIDtcXG4gIC0tdHctZ3JhZGllbnQtdmlhLXBvc2l0aW9uOiAgO1xcbiAgLS10dy1ncmFkaWVudC10by1wb3NpdGlvbjogIDtcXG4gIC0tdHctb3JkaW5hbDogIDtcXG4gIC0tdHctc2xhc2hlZC16ZXJvOiAgO1xcbiAgLS10dy1udW1lcmljLWZpZ3VyZTogIDtcXG4gIC0tdHctbnVtZXJpYy1zcGFjaW5nOiAgO1xcbiAgLS10dy1udW1lcmljLWZyYWN0aW9uOiAgO1xcbiAgLS10dy1yaW5nLWluc2V0OiAgO1xcbiAgLS10dy1yaW5nLW9mZnNldC13aWR0aDogMHB4O1xcbiAgLS10dy1yaW5nLW9mZnNldC1jb2xvcjogI2ZmZjtcXG4gIC0tdHctcmluZy1jb2xvcjogcmdiKDU5IDEzMCAyNDYgLyAwLjUpO1xcbiAgLS10dy1yaW5nLW9mZnNldC1zaGFkb3c6IDAgMCAjMDAwMDtcXG4gIC0tdHctcmluZy1zaGFkb3c6IDAgMCAjMDAwMDtcXG4gIC0tdHctc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXNoYWRvdy1jb2xvcmVkOiAwIDAgIzAwMDA7XFxuICAtLXR3LWJsdXI6ICA7XFxuICAtLXR3LWJyaWdodG5lc3M6ICA7XFxuICAtLXR3LWNvbnRyYXN0OiAgO1xcbiAgLS10dy1ncmF5c2NhbGU6ICA7XFxuICAtLXR3LWh1ZS1yb3RhdGU6ICA7XFxuICAtLXR3LWludmVydDogIDtcXG4gIC0tdHctc2F0dXJhdGU6ICA7XFxuICAtLXR3LXNlcGlhOiAgO1xcbiAgLS10dy1kcm9wLXNoYWRvdzogIDtcXG4gIC0tdHctYmFja2Ryb3AtYmx1cjogIDtcXG4gIC0tdHctYmFja2Ryb3AtYnJpZ2h0bmVzczogIDtcXG4gIC0tdHctYmFja2Ryb3AtY29udHJhc3Q6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWdyYXlzY2FsZTogIDtcXG4gIC0tdHctYmFja2Ryb3AtaHVlLXJvdGF0ZTogIDtcXG4gIC0tdHctYmFja2Ryb3AtaW52ZXJ0OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1vcGFjaXR5OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1zYXR1cmF0ZTogIDtcXG4gIC0tdHctYmFja2Ryb3Atc2VwaWE6ICA7XFxufVxcbi5teC1hdXRvIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG4ubWItNCB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG4ubXQtNCB7XFxuICBtYXJnaW4tdG9wOiAxcmVtO1xcbn1cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uZ3JpZCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbn1cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi53LTI4IHtcXG4gIHdpZHRoOiA3cmVtO1xcbn1cXG4udy01IHtcXG4gIHdpZHRoOiAxLjI1cmVtO1xcbn1cXG4udy1maXQge1xcbiAgd2lkdGg6IC1tb3otZml0LWNvbnRlbnQ7XFxuICB3aWR0aDogZml0LWNvbnRlbnQ7XFxufVxcbi5tYXgtdy03eGwge1xcbiAgbWF4LXdpZHRoOiA4MHJlbTtcXG59XFxuLmN1cnNvci1wb2ludGVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmdyaWQtY29scy0yIHtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDIsIG1pbm1heCgwLCAxZnIpKTtcXG59XFxuLmZsZXgtY29sIHtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5nYXAtMSB7XFxuICBnYXA6IDAuMjVyZW07XFxufVxcbi5nYXAtMiB7XFxuICBnYXA6IDAuNXJlbTtcXG59XFxuLmdhcC0zIHtcXG4gIGdhcDogMC43NXJlbTtcXG59XFxuLmdhcC00IHtcXG4gIGdhcDogMXJlbTtcXG59XFxuLmdhcC01IHtcXG4gIGdhcDogMS4yNXJlbTtcXG59XFxuLnJvdW5kZWQge1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuLmJvcmRlciB7XFxuICBib3JkZXItd2lkdGg6IDFweDtcXG59XFxuLmJvcmRlci0yIHtcXG4gIGJvcmRlci13aWR0aDogMnB4O1xcbn1cXG4uYm9yZGVyLWwtMiB7XFxuICBib3JkZXItbGVmdC13aWR0aDogMnB4O1xcbn1cXG4uYm9yZGVyLWdyYXktMzAwIHtcXG4gIC0tdHctYm9yZGVyLW9wYWNpdHk6IDE7XFxuICBib3JkZXItY29sb3I6IHJnYigyMDkgMjEzIDIxOSAvIHZhcigtLXR3LWJvcmRlci1vcGFjaXR5KSk7XFxufVxcbi5ib3JkZXItZ3JheS00MDAge1xcbiAgLS10dy1ib3JkZXItb3BhY2l0eTogMTtcXG4gIGJvcmRlci1jb2xvcjogcmdiKDE1NiAxNjMgMTc1IC8gdmFyKC0tdHctYm9yZGVyLW9wYWNpdHkpKTtcXG59XFxuLmJvcmRlci1yZWQtNTAwIHtcXG4gIC0tdHctYm9yZGVyLW9wYWNpdHk6IDE7XFxuICBib3JkZXItY29sb3I6IHJnYigyMzkgNjggNjggLyB2YXIoLS10dy1ib3JkZXItb3BhY2l0eSkpO1xcbn1cXG4uYmctcHVycGxlLTcwMCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTI2IDM0IDIwNiAvIHZhcigtLXR3LWJnLW9wYWNpdHkpKTtcXG59XFxuLnAtMSB7XFxuICBwYWRkaW5nOiAwLjI1cmVtO1xcbn1cXG4ucC00IHtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcbi5weC00IHtcXG4gIHBhZGRpbmctbGVmdDogMXJlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDFyZW07XFxufVxcbi5weS0yIHtcXG4gIHBhZGRpbmctdG9wOiAwLjVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xcbn1cXG4ucGwtNCB7XFxuICBwYWRkaW5nLWxlZnQ6IDFyZW07XFxufVxcbi50ZXh0LTJ4bCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAycmVtO1xcbn1cXG4udGV4dC1zbSB7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuMjVyZW07XFxufVxcbi5mb250LWJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuLmZvbnQtc2VtaWJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuLnRleHQtZ3JheS01MDAge1xcbiAgLS10dy10ZXh0LW9wYWNpdHk6IDE7XFxuICBjb2xvcjogcmdiKDEwNyAxMTQgMTI4IC8gdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7XFxufVxcbi50ZXh0LXB1cnBsZS01MCB7XFxuICAtLXR3LXRleHQtb3BhY2l0eTogMTtcXG4gIGNvbG9yOiByZ2IoMjUwIDI0NSAyNTUgLyB2YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtcXG59XFxuLnRleHQtcmVkLTUwMCB7XFxuICAtLXR3LXRleHQtb3BhY2l0eTogMTtcXG4gIGNvbG9yOiByZ2IoMjM5IDY4IDY4IC8gdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7XFxufVxcbi5ob3ZlclxcXFw6YmctcHVycGxlLTkwMDpob3ZlciB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODggMjggMTM1IC8gdmFyKC0tdHctYmctb3BhY2l0eSkpO1xcbn1cXG4uaG92ZXJcXFxcOnRleHQtd2hpdGU6aG92ZXIge1xcbiAgLS10dy10ZXh0LW9wYWNpdHk6IDE7XFxuICBjb2xvcjogcmdiKDI1NSAyNTUgMjU1IC8gdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7XFxufVxcbi5kaXNhYmxlZFxcXFw6Y3Vyc29yLW5vdC1hbGxvd2VkOmRpc2FibGVkIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcbi5kaXNhYmxlZFxcXFw6YmctcHVycGxlLTQwMDpkaXNhYmxlZCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTkyIDEzMiAyNTIgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcbi5kaXNhYmxlZFxcXFw6dGV4dC1wdXJwbGUtMTAwOmRpc2FibGVkIHtcXG4gIC0tdHctdGV4dC1vcGFjaXR5OiAxO1xcbiAgY29sb3I6IHJnYigyNDMgMjMyIDI1NSAvIHZhcigtLXR3LXRleHQtb3BhY2l0eSkpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbWFpbi5jc3NcIixcIjxubyBzb3VyY2U+XCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztDQUFjLENBQWQ7OztDQUFjOztBQUFkOzs7RUFBQSxzQkFBYyxFQUFkLE1BQWM7RUFBZCxlQUFjLEVBQWQsTUFBYztFQUFkLG1CQUFjLEVBQWQsTUFBYztFQUFkLHFCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztFQUFBLGdCQUFjO0FBQUE7O0FBQWQ7Ozs7Ozs7Q0FBYzs7QUFBZDtFQUFBLGdCQUFjLEVBQWQsTUFBYztFQUFkLDhCQUFjLEVBQWQsTUFBYztFQUFkLGdCQUFjLEVBQWQsTUFBYztFQUFkLGNBQWM7S0FBZCxXQUFjLEVBQWQsTUFBYztFQUFkLDROQUFjLEVBQWQsTUFBYztFQUFkLDZCQUFjLEVBQWQsTUFBYztFQUFkLCtCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOzs7Q0FBYzs7QUFBZDtFQUFBLFNBQWMsRUFBZCxNQUFjO0VBQWQsb0JBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7Ozs7Q0FBYzs7QUFBZDtFQUFBLFNBQWMsRUFBZCxNQUFjO0VBQWQsY0FBYyxFQUFkLE1BQWM7RUFBZCxxQkFBYyxFQUFkLE1BQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDtFQUFBLHlDQUFjO1VBQWQsaUNBQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDs7Ozs7O0VBQUEsa0JBQWM7RUFBZCxvQkFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkO0VBQUEsY0FBYztFQUFkLHdCQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7O0VBQUEsbUJBQWM7QUFBQTs7QUFBZDs7O0NBQWM7O0FBQWQ7Ozs7RUFBQSwrR0FBYyxFQUFkLE1BQWM7RUFBZCxjQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztDQUFj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O0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQSxzQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxzQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxzQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxrQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsa0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsbUJBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQSxpQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQSxtQkFBbUI7RUFBbkI7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsb0JBQW1CO0VBQW5CO0FBQW1CO0FBRm5CO0VBQUEsbUJDQUE7RURBQTtDQ0FBO0FEQUE7RUFBQSxxQkNBQTtFREFBO0NDQUE7QURBQTtFQUFBO0NDQUE7QURBQTtFQUFBLG1CQ0FBO0VEQUE7Q0NBQTtBREFBO0VBQUEscUJDQUE7RURBQTtDQ0FBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkB0YWlsd2luZCBiYXNlO1xcbkB0YWlsd2luZCBjb21wb25lbnRzO1xcbkB0YWlsd2luZCB1dGlsaXRpZXM7XFxuXCIsbnVsbF0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIihmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sYik7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyliKCk7ZWxzZXtiKCksYS5GaWxlU2F2ZXI9e2V4cG9ydHM6e319LmV4cG9ydHN9fSkodGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYj9iPXthdXRvQm9tOiExfTpcIm9iamVjdFwiIT10eXBlb2YgYiYmKGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQ6IEV4cGVjdGVkIHRoaXJkIGFyZ3VtZW50IHRvIGJlIGEgb2JqZWN0XCIpLGI9e2F1dG9Cb206IWJ9KSxiLmF1dG9Cb20mJi9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGEudHlwZSk/bmV3IEJsb2IoW1wiXFx1RkVGRlwiLGFdLHt0eXBlOmEudHlwZX0pOmF9ZnVuY3Rpb24gYyhhLGIsYyl7dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbihcIkdFVFwiLGEpLGQucmVzcG9uc2VUeXBlPVwiYmxvYlwiLGQub25sb2FkPWZ1bmN0aW9uKCl7ZyhkLnJlc3BvbnNlLGIsYyl9LGQub25lcnJvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJjb3VsZCBub3QgZG93bmxvYWQgZmlsZVwiKX0sZC5zZW5kKCl9ZnVuY3Rpb24gZChhKXt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiSEVBRFwiLGEsITEpO3RyeXtiLnNlbmQoKX1jYXRjaChhKXt9cmV0dXJuIDIwMDw9Yi5zdGF0dXMmJjI5OT49Yi5zdGF0dXN9ZnVuY3Rpb24gZShhKXt0cnl7YS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfWNhdGNoKGMpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7Yi5pbml0TW91c2VFdmVudChcImNsaWNrXCIsITAsITAsd2luZG93LDAsMCwwLDgwLDIwLCExLCExLCExLCExLDAsbnVsbCksYS5kaXNwYXRjaEV2ZW50KGIpfX12YXIgZj1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cud2luZG93PT09d2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZj9zZWxmOlwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbC5nbG9iYWw9PT1nbG9iYWw/Z2xvYmFsOnZvaWQgMCxhPWYubmF2aWdhdG9yJiYvTWFjaW50b3NoLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvQXBwbGVXZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiEvU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGc9Zi5zYXZlQXN8fChcIm9iamVjdFwiIT10eXBlb2Ygd2luZG93fHx3aW5kb3chPT1mP2Z1bmN0aW9uKCl7fTpcImRvd25sb2FkXCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGUmJiFhP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtnPWd8fGIubmFtZXx8XCJkb3dubG9hZFwiLGouZG93bmxvYWQ9ZyxqLnJlbD1cIm5vb3BlbmVyXCIsXCJzdHJpbmdcIj09dHlwZW9mIGI/KGouaHJlZj1iLGoub3JpZ2luPT09bG9jYXRpb24ub3JpZ2luP2Uoaik6ZChqLmhyZWYpP2MoYixnLGgpOmUoaixqLnRhcmdldD1cIl9ibGFua1wiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKX0sNEU0KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShqKX0sMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWYsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKX0pfX06ZnVuY3Rpb24oYixkLGUsZyl7aWYoZz1nfHxvcGVuKFwiXCIsXCJfYmxhbmtcIiksZyYmKGcuZG9jdW1lbnQudGl0bGU9Zy5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBiKXJldHVybiBjKGIsZCxlKTt2YXIgaD1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09Yi50eXBlLGk9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaj0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKGp8fGgmJml8fGEpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGs9bmV3IEZpbGVSZWFkZXI7ay5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1rLnJlc3VsdDthPWo/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sXCJkYXRhOmF0dGFjaG1lbnQvZmlsZTtcIiksZz9nLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGc9bnVsbH0say5yZWFkQXNEYXRhVVJMKGIpfWVsc2V7dmFyIGw9Zi5VUkx8fGYud2Via2l0VVJMLG09bC5jcmVhdGVPYmplY3RVUkwoYik7Zz9nLmxvY2F0aW9uPW06bG9jYXRpb24uaHJlZj1tLGc9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5yZXZva2VPYmplY3RVUkwobSl9LDRFNCl9fSk7Zi5zYXZlQXM9Zy5zYXZlQXM9ZyxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9Zyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXAiLCIvKiFcblxuSlNaaXAgdjMuMTAuMSAtIEEgSmF2YVNjcmlwdCBjbGFzcyBmb3IgZ2VuZXJhdGluZyBhbmQgcmVhZGluZyB6aXAgZmlsZXNcbjxodHRwOi8vc3R1YXJ0ay5jb20vanN6aXA+XG5cbihjKSAyMDA5LTIwMTYgU3R1YXJ0IEtuaWdodGxleSA8c3R1YXJ0IFthdF0gc3R1YXJ0ay5jb20+XG5EdWFsIGxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBvciBHUEx2My4gU2VlIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vU3R1ay9qc3ppcC9tYWluL0xJQ0VOU0UubWFya2Rvd24uXG5cbkpTWmlwIHVzZXMgdGhlIGxpYnJhcnkgcGFrbyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgOlxuaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvL2Jsb2IvbWFpbi9MSUNFTlNFXG4qL1xuXG4hZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNleyhcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpLkpTWmlwPWUoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIHMoYSxvLGgpe2Z1bmN0aW9uIHUocixlKXtpZighb1tyXSl7aWYoIWFbcl0pe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWUmJnQpcmV0dXJuIHQociwhMCk7aWYobClyZXR1cm4gbChyLCEwKTt2YXIgbj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3IrXCInXCIpO3Rocm93IG4uY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixufXZhciBpPW9bcl09e2V4cG9ydHM6e319O2Fbcl1bMF0uY2FsbChpLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIHQ9YVtyXVsxXVtlXTtyZXR1cm4gdSh0fHxlKX0saSxpLmV4cG9ydHMscyxhLG8saCl9cmV0dXJuIG9bcl0uZXhwb3J0c31mb3IodmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxlPTA7ZTxoLmxlbmd0aDtlKyspdShoW2VdKTtyZXR1cm4gdX0oezE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgZD1lKFwiLi91dGlsc1wiKSxjPWUoXCIuL3N1cHBvcnRcIikscD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7ci5lbmNvZGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbixpLHMsYSxvLGg9W10sdT0wLGw9ZS5sZW5ndGgsZj1sLGM9XCJzdHJpbmdcIiE9PWQuZ2V0VHlwZU9mKGUpO3U8ZS5sZW5ndGg7KWY9bC11LG49Yz8odD1lW3UrK10scj11PGw/ZVt1KytdOjAsdTxsP2VbdSsrXTowKToodD1lLmNoYXJDb2RlQXQodSsrKSxyPXU8bD9lLmNoYXJDb2RlQXQodSsrKTowLHU8bD9lLmNoYXJDb2RlQXQodSsrKTowKSxpPXQ+PjIscz0oMyZ0KTw8NHxyPj40LGE9MTxmPygxNSZyKTw8MnxuPj42OjY0LG89MjxmPzYzJm46NjQsaC5wdXNoKHAuY2hhckF0KGkpK3AuY2hhckF0KHMpK3AuY2hhckF0KGEpK3AuY2hhckF0KG8pKTtyZXR1cm4gaC5qb2luKFwiXCIpfSxyLmRlY29kZT1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzLGEsbz0wLGg9MCx1PVwiZGF0YTpcIjtpZihlLnN1YnN0cigwLHUubGVuZ3RoKT09PXUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGl0IGxvb2tzIGxpa2UgYSBkYXRhIHVybC5cIik7dmFyIGwsZj0zKihlPWUucmVwbGFjZSgvW15BLVphLXowLTkrLz1dL2csXCJcIikpLmxlbmd0aC80O2lmKGUuY2hhckF0KGUubGVuZ3RoLTEpPT09cC5jaGFyQXQoNjQpJiZmLS0sZS5jaGFyQXQoZS5sZW5ndGgtMik9PT1wLmNoYXJBdCg2NCkmJmYtLSxmJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGJhZCBjb250ZW50IGxlbmd0aC5cIik7Zm9yKGw9Yy51aW50OGFycmF5P25ldyBVaW50OEFycmF5KDB8Zik6bmV3IEFycmF5KDB8Zik7bzxlLmxlbmd0aDspdD1wLmluZGV4T2YoZS5jaGFyQXQobysrKSk8PDJ8KGk9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpKT4+NCxyPSgxNSZpKTw8NHwocz1wLmluZGV4T2YoZS5jaGFyQXQobysrKSkpPj4yLG49KDMmcyk8PDZ8KGE9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpKSxsW2grK109dCw2NCE9PXMmJihsW2grK109ciksNjQhPT1hJiYobFtoKytdPW4pO3JldHVybiBsfX0se1wiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vZXh0ZXJuYWxcIiksaT1lKFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSxzPWUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLGE9ZShcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKTtmdW5jdGlvbiBvKGUsdCxyLG4saSl7dGhpcy5jb21wcmVzc2VkU2l6ZT1lLHRoaXMudW5jb21wcmVzc2VkU2l6ZT10LHRoaXMuY3JjMzI9cix0aGlzLmNvbXByZXNzaW9uPW4sdGhpcy5jb21wcmVzc2VkQ29udGVudD1pfW8ucHJvdG90eXBlPXtnZXRDb250ZW50V29ya2VyOmZ1bmN0aW9uKCl7dmFyIGU9bmV3IGkobi5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLnBpcGUodGhpcy5jb21wcmVzc2lvbi51bmNvbXByZXNzV29ya2VyKCkpLnBpcGUobmV3IGEoXCJkYXRhX2xlbmd0aFwiKSksdD10aGlzO3JldHVybiBlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtpZih0aGlzLnN0cmVhbUluZm8uZGF0YV9sZW5ndGghPT10LnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogdW5jb21wcmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaFwiKX0pLGV9LGdldENvbXByZXNzZWRXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGkobi5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3NlZFNpemVcIix0aGlzLmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcInVuY29tcHJlc3NlZFNpemVcIix0aGlzLnVuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIix0aGlzLmNyYzMyKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzaW9uXCIsdGhpcy5jb21wcmVzc2lvbil9fSxvLmNyZWF0ZVdvcmtlckZyb209ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLnBpcGUobmV3IHMpLnBpcGUobmV3IGEoXCJ1bmNvbXByZXNzZWRTaXplXCIpKS5waXBlKHQuY29tcHJlc3NXb3JrZXIocikpLnBpcGUobmV3IGEoXCJjb21wcmVzc2VkU2l6ZVwiKSkud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHQpfSx0LmV4cG9ydHM9b30se1wiLi9leHRlcm5hbFwiOjYsXCIuL3N0cmVhbS9DcmMzMlByb2JlXCI6MjUsXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIjoyNixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyN31dLDM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtyLlNUT1JFPXttYWdpYzpcIlxcMFxcMFwiLGNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKFwiU1RPUkUgY29tcHJlc3Npb25cIil9LHVuY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4oXCJTVE9SRSBkZWNvbXByZXNzaW9uXCIpfX0sci5ERUZMQVRFPWUoXCIuL2ZsYXRlXCIpfSx7XCIuL2ZsYXRlXCI6NyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi91dGlsc1wiKTt2YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDAhPT1lJiZlLmxlbmd0aD9cInN0cmluZ1wiIT09bi5nZXRUeXBlT2YoZSk/ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9byxzPW4rcjtlXj0tMTtmb3IodmFyIGE9bjthPHM7YSsrKWU9ZT4+PjheaVsyNTUmKGVedFthXSldO3JldHVybi0xXmV9KDB8dCxlLGUubGVuZ3RoLDApOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPW8scz1uK3I7ZV49LTE7Zm9yKHZhciBhPW47YTxzO2ErKyllPWU+Pj44XmlbMjU1JihlXnQuY2hhckNvZGVBdChhKSldO3JldHVybi0xXmV9KDB8dCxlLGUubGVuZ3RoLDApOjB9fSx7XCIuL3V0aWxzXCI6MzJ9XSw1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5iYXNlNjQ9ITEsci5iaW5hcnk9ITEsci5kaXI9ITEsci5jcmVhdGVGb2xkZXJzPSEwLHIuZGF0ZT1udWxsLHIuY29tcHJlc3Npb249bnVsbCxyLmNvbXByZXNzaW9uT3B0aW9ucz1udWxsLHIuY29tbWVudD1udWxsLHIudW5peFBlcm1pc3Npb25zPW51bGwsci5kb3NQZXJtaXNzaW9ucz1udWxsfSx7fV0sNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPW51bGw7bj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOmUoXCJsaWVcIiksdC5leHBvcnRzPXtQcm9taXNlOm59fSx7bGllOjM3fV0sNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MzJBcnJheSxpPWUoXCJwYWtvXCIpLHM9ZShcIi4vdXRpbHNcIiksYT1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxvPW4/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiO2Z1bmN0aW9uIGgoZSx0KXthLmNhbGwodGhpcyxcIkZsYXRlV29ya2VyL1wiK2UpLHRoaXMuX3Bha289bnVsbCx0aGlzLl9wYWtvQWN0aW9uPWUsdGhpcy5fcGFrb09wdGlvbnM9dCx0aGlzLm1ldGE9e319ci5tYWdpYz1cIlxcYlxcMFwiLHMuaW5oZXJpdHMoaCxhKSxoLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5tZXRhPWUubWV0YSxudWxsPT09dGhpcy5fcGFrbyYmdGhpcy5fY3JlYXRlUGFrbygpLHRoaXMuX3Bha28ucHVzaChzLnRyYW5zZm9ybVRvKG8sZS5kYXRhKSwhMSl9LGgucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7YS5wcm90b3R5cGUuZmx1c2guY2FsbCh0aGlzKSxudWxsPT09dGhpcy5fcGFrbyYmdGhpcy5fY3JlYXRlUGFrbygpLHRoaXMuX3Bha28ucHVzaChbXSwhMCl9LGgucHJvdG90eXBlLmNsZWFuVXA9ZnVuY3Rpb24oKXthLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksdGhpcy5fcGFrbz1udWxsfSxoLnByb3RvdHlwZS5fY3JlYXRlUGFrbz1mdW5jdGlvbigpe3RoaXMuX3Bha289bmV3IGlbdGhpcy5fcGFrb0FjdGlvbl0oe3JhdzohMCxsZXZlbDp0aGlzLl9wYWtvT3B0aW9ucy5sZXZlbHx8LTF9KTt2YXIgdD10aGlzO3RoaXMuX3Bha28ub25EYXRhPWZ1bmN0aW9uKGUpe3QucHVzaCh7ZGF0YTplLG1ldGE6dC5tZXRhfSl9fSxyLmNvbXByZXNzV29ya2VyPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaChcIkRlZmxhdGVcIixlKX0sci51bmNvbXByZXNzV29ya2VyPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBoKFwiSW5mbGF0ZVwiLHt9KX19LHtcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vdXRpbHNcIjozMixwYWtvOjM4fV0sODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIEEoZSx0KXt2YXIgcixuPVwiXCI7Zm9yKHI9MDtyPHQ7cisrKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMjU1JmUpLGU+Pj49ODtyZXR1cm4gbn1mdW5jdGlvbiBuKGUsdCxyLG4saSxzKXt2YXIgYSxvLGg9ZS5maWxlLHU9ZS5jb21wcmVzc2lvbixsPXMhPT1PLnV0ZjhlbmNvZGUsZj1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIscyhoLm5hbWUpKSxjPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixPLnV0ZjhlbmNvZGUoaC5uYW1lKSksZD1oLmNvbW1lbnQscD1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIscyhkKSksbT1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsTy51dGY4ZW5jb2RlKGQpKSxfPWMubGVuZ3RoIT09aC5uYW1lLmxlbmd0aCxnPW0ubGVuZ3RoIT09ZC5sZW5ndGgsYj1cIlwiLHY9XCJcIix5PVwiXCIsdz1oLmRpcixrPWguZGF0ZSx4PXtjcmMzMjowLGNvbXByZXNzZWRTaXplOjAsdW5jb21wcmVzc2VkU2l6ZTowfTt0JiYhcnx8KHguY3JjMzI9ZS5jcmMzMix4LmNvbXByZXNzZWRTaXplPWUuY29tcHJlc3NlZFNpemUseC51bmNvbXByZXNzZWRTaXplPWUudW5jb21wcmVzc2VkU2l6ZSk7dmFyIFM9MDt0JiYoU3w9OCksbHx8IV8mJiFnfHwoU3w9MjA0OCk7dmFyIHo9MCxDPTA7dyYmKHp8PTE2KSxcIlVOSVhcIj09PWk/KEM9Nzk4LHp8PWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZTtyZXR1cm4gZXx8KHI9dD8xNjg5MzozMzIwNCksKDY1NTM1JnIpPDwxNn0oaC51bml4UGVybWlzc2lvbnMsdykpOihDPTIwLHp8PWZ1bmN0aW9uKGUpe3JldHVybiA2MyYoZXx8MCl9KGguZG9zUGVybWlzc2lvbnMpKSxhPWsuZ2V0VVRDSG91cnMoKSxhPDw9NixhfD1rLmdldFVUQ01pbnV0ZXMoKSxhPDw9NSxhfD1rLmdldFVUQ1NlY29uZHMoKS8yLG89ay5nZXRVVENGdWxsWWVhcigpLTE5ODAsbzw8PTQsb3w9ay5nZXRVVENNb250aCgpKzEsbzw8PTUsb3w9ay5nZXRVVENEYXRlKCksXyYmKHY9QSgxLDEpK0EoQihmKSw0KStjLGIrPVwidXBcIitBKHYubGVuZ3RoLDIpK3YpLGcmJih5PUEoMSwxKStBKEIocCksNCkrbSxiKz1cInVjXCIrQSh5Lmxlbmd0aCwyKSt5KTt2YXIgRT1cIlwiO3JldHVybiBFKz1cIlxcblxcMFwiLEUrPUEoUywyKSxFKz11Lm1hZ2ljLEUrPUEoYSwyKSxFKz1BKG8sMiksRSs9QSh4LmNyYzMyLDQpLEUrPUEoeC5jb21wcmVzc2VkU2l6ZSw0KSxFKz1BKHgudW5jb21wcmVzc2VkU2l6ZSw0KSxFKz1BKGYubGVuZ3RoLDIpLEUrPUEoYi5sZW5ndGgsMikse2ZpbGVSZWNvcmQ6Ui5MT0NBTF9GSUxFX0hFQURFUitFK2YrYixkaXJSZWNvcmQ6Ui5DRU5UUkFMX0ZJTEVfSEVBREVSK0EoQywyKStFK0EocC5sZW5ndGgsMikrXCJcXDBcXDBcXDBcXDBcIitBKHosNCkrQShuLDQpK2YrYitwfX12YXIgST1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksTz1lKFwiLi4vdXRmOFwiKSxCPWUoXCIuLi9jcmMzMlwiKSxSPWUoXCIuLi9zaWduYXR1cmVcIik7ZnVuY3Rpb24gcyhlLHQscixuKXtpLmNhbGwodGhpcyxcIlppcEZpbGVXb3JrZXJcIiksdGhpcy5ieXRlc1dyaXR0ZW49MCx0aGlzLnppcENvbW1lbnQ9dCx0aGlzLnppcFBsYXRmb3JtPXIsdGhpcy5lbmNvZGVGaWxlTmFtZT1uLHRoaXMuc3RyZWFtRmlsZXM9ZSx0aGlzLmFjY3VtdWxhdGU9ITEsdGhpcy5jb250ZW50QnVmZmVyPVtdLHRoaXMuZGlyUmVjb3Jkcz1bXSx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQ9MCx0aGlzLmVudHJpZXNDb3VudD0wLHRoaXMuY3VycmVudEZpbGU9bnVsbCx0aGlzLl9zb3VyY2VzPVtdfUkuaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUpe3ZhciB0PWUubWV0YS5wZXJjZW50fHwwLHI9dGhpcy5lbnRyaWVzQ291bnQsbj10aGlzLl9zb3VyY2VzLmxlbmd0aDt0aGlzLmFjY3VtdWxhdGU/dGhpcy5jb250ZW50QnVmZmVyLnB1c2goZSk6KHRoaXMuYnl0ZXNXcml0dGVuKz1lLmRhdGEubGVuZ3RoLGkucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLHtkYXRhOmUuZGF0YSxtZXRhOntjdXJyZW50RmlsZTp0aGlzLmN1cnJlbnRGaWxlLHBlcmNlbnQ6cj8odCsxMDAqKHItbi0xKSkvcjoxMDB9fSkpfSxzLnByb3RvdHlwZS5vcGVuZWRTb3VyY2U9ZnVuY3Rpb24oZSl7dGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PXRoaXMuYnl0ZXNXcml0dGVuLHRoaXMuY3VycmVudEZpbGU9ZS5maWxlLm5hbWU7dmFyIHQ9dGhpcy5zdHJlYW1GaWxlcyYmIWUuZmlsZS5kaXI7aWYodCl7dmFyIHI9bihlLHQsITEsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7dGhpcy5wdXNoKHtkYXRhOnIuZmlsZVJlY29yZCxtZXRhOntwZXJjZW50OjB9fSl9ZWxzZSB0aGlzLmFjY3VtdWxhdGU9ITB9LHMucHJvdG90eXBlLmNsb3NlZFNvdXJjZT1mdW5jdGlvbihlKXt0aGlzLmFjY3VtdWxhdGU9ITE7dmFyIHQ9dGhpcy5zdHJlYW1GaWxlcyYmIWUuZmlsZS5kaXIscj1uKGUsdCwhMCx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsdGhpcy56aXBQbGF0Zm9ybSx0aGlzLmVuY29kZUZpbGVOYW1lKTtpZih0aGlzLmRpclJlY29yZHMucHVzaChyLmRpclJlY29yZCksdCl0aGlzLnB1c2goe2RhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIFIuREFUQV9ERVNDUklQVE9SK0EoZS5jcmMzMiw0KStBKGUuY29tcHJlc3NlZFNpemUsNCkrQShlLnVuY29tcHJlc3NlZFNpemUsNCl9KGUpLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO2Vsc2UgZm9yKHRoaXMucHVzaCh7ZGF0YTpyLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pO3RoaXMuY29udGVudEJ1ZmZlci5sZW5ndGg7KXRoaXMucHVzaCh0aGlzLmNvbnRlbnRCdWZmZXIuc2hpZnQoKSk7dGhpcy5jdXJyZW50RmlsZT1udWxsfSxzLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmJ5dGVzV3JpdHRlbix0PTA7dDx0aGlzLmRpclJlY29yZHMubGVuZ3RoO3QrKyl0aGlzLnB1c2goe2RhdGE6dGhpcy5kaXJSZWNvcmRzW3RdLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO3ZhciByPXRoaXMuYnl0ZXNXcml0dGVuLWUsbj1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBzPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixpKG4pKTtyZXR1cm4gUi5DRU5UUkFMX0RJUkVDVE9SWV9FTkQrXCJcXDBcXDBcXDBcXDBcIitBKGUsMikrQShlLDIpK0EodCw0KStBKHIsNCkrQShzLmxlbmd0aCwyKStzfSh0aGlzLmRpclJlY29yZHMubGVuZ3RoLHIsZSx0aGlzLnppcENvbW1lbnQsdGhpcy5lbmNvZGVGaWxlTmFtZSk7dGhpcy5wdXNoKHtkYXRhOm4sbWV0YTp7cGVyY2VudDoxMDB9fSl9LHMucHJvdG90eXBlLnByZXBhcmVOZXh0U291cmNlPWZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz10aGlzLl9zb3VyY2VzLnNoaWZ0KCksdGhpcy5vcGVuZWRTb3VyY2UodGhpcy5wcmV2aW91cy5zdHJlYW1JbmZvKSx0aGlzLmlzUGF1c2VkP3RoaXMucHJldmlvdXMucGF1c2UoKTp0aGlzLnByZXZpb3VzLnJlc3VtZSgpfSxzLnByb3RvdHlwZS5yZWdpc3RlclByZXZpb3VzPWZ1bmN0aW9uKGUpe3RoaXMuX3NvdXJjZXMucHVzaChlKTt2YXIgdD10aGlzO3JldHVybiBlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHJvY2Vzc0NodW5rKGUpfSksZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7dC5jbG9zZWRTb3VyY2UodC5wcmV2aW91cy5zdHJlYW1JbmZvKSx0Ll9zb3VyY2VzLmxlbmd0aD90LnByZXBhcmVOZXh0U291cmNlKCk6dC5lbmQoKX0pLGUub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QuZXJyb3IoZSl9KSx0aGlzfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMucHJldmlvdXMmJnRoaXMuX3NvdXJjZXMubGVuZ3RoPyh0aGlzLnByZXBhcmVOZXh0U291cmNlKCksITApOnRoaXMucHJldmlvdXN8fHRoaXMuX3NvdXJjZXMubGVuZ3RofHx0aGlzLmdlbmVyYXRlZEVycm9yP3ZvaWQgMDoodGhpcy5lbmQoKSwhMCkpfSxzLnByb3RvdHlwZS5lcnJvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zb3VyY2VzO2lmKCFpLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsZSkpcmV0dXJuITE7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdHJ5e3Rbcl0uZXJyb3IoZSl9Y2F0Y2goZSl7fXJldHVybiEwfSxzLnByb3RvdHlwZS5sb2NrPWZ1bmN0aW9uKCl7aS5wcm90b3R5cGUubG9jay5jYWxsKHRoaXMpO2Zvcih2YXIgZT10aGlzLl9zb3VyY2VzLHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLmxvY2soKX0sdC5leHBvcnRzPXN9LHtcIi4uL2NyYzMyXCI6NCxcIi4uL3NpZ25hdHVyZVwiOjIzLFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0ZjhcIjozMSxcIi4uL3V0aWxzXCI6MzJ9XSw5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4uL2NvbXByZXNzaW9uc1wiKSxuPWUoXCIuL1ppcEZpbGVXb3JrZXJcIik7ci5nZW5lcmF0ZVdvcmtlcj1mdW5jdGlvbihlLGEsdCl7dmFyIG89bmV3IG4oYS5zdHJlYW1GaWxlcyx0LGEucGxhdGZvcm0sYS5lbmNvZGVGaWxlTmFtZSksaD0wO3RyeXtlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtoKys7dmFyIHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lfHx0LG49dVtyXTtpZighbil0aHJvdyBuZXcgRXJyb3IocitcIiBpcyBub3QgYSB2YWxpZCBjb21wcmVzc2lvbiBtZXRob2QgIVwiKTtyZXR1cm4gbn0odC5vcHRpb25zLmNvbXByZXNzaW9uLGEuY29tcHJlc3Npb24pLG49dC5vcHRpb25zLmNvbXByZXNzaW9uT3B0aW9uc3x8YS5jb21wcmVzc2lvbk9wdGlvbnN8fHt9LGk9dC5kaXIscz10LmRhdGU7dC5fY29tcHJlc3NXb3JrZXIocixuKS53aXRoU3RyZWFtSW5mbyhcImZpbGVcIix7bmFtZTplLGRpcjppLGRhdGU6cyxjb21tZW50OnQuY29tbWVudHx8XCJcIix1bml4UGVybWlzc2lvbnM6dC51bml4UGVybWlzc2lvbnMsZG9zUGVybWlzc2lvbnM6dC5kb3NQZXJtaXNzaW9uc30pLnBpcGUobyl9KSxvLmVudHJpZXNDb3VudD1ofWNhdGNoKGUpe28uZXJyb3IoZSl9cmV0dXJuIG99fSx7XCIuLi9jb21wcmVzc2lvbnNcIjozLFwiLi9aaXBGaWxlV29ya2VyXCI6OH1dLDEwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbjtpZihhcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlRoZSBjb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIik7dGhpcy5maWxlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuY29tbWVudD1udWxsLHRoaXMucm9vdD1cIlwiLHRoaXMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgbjtmb3IodmFyIHQgaW4gdGhpcylcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW3RdJiYoZVt0XT10aGlzW3RdKTtyZXR1cm4gZX19KG4ucHJvdG90eXBlPWUoXCIuL29iamVjdFwiKSkubG9hZEFzeW5jPWUoXCIuL2xvYWRcIiksbi5zdXBwb3J0PWUoXCIuL3N1cHBvcnRcIiksbi5kZWZhdWx0cz1lKFwiLi9kZWZhdWx0c1wiKSxuLnZlcnNpb249XCIzLjEwLjFcIixuLmxvYWRBc3luYz1mdW5jdGlvbihlLHQpe3JldHVybihuZXcgbikubG9hZEFzeW5jKGUsdCl9LG4uZXh0ZXJuYWw9ZShcIi4vZXh0ZXJuYWxcIiksdC5leHBvcnRzPW59LHtcIi4vZGVmYXVsdHNcIjo1LFwiLi9leHRlcm5hbFwiOjYsXCIuL2xvYWRcIjoxMSxcIi4vb2JqZWN0XCI6MTUsXCIuL3N1cHBvcnRcIjozMH1dLDExOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4vdXRpbHNcIiksaT1lKFwiLi9leHRlcm5hbFwiKSxuPWUoXCIuL3V0ZjhcIikscz1lKFwiLi96aXBFbnRyaWVzXCIpLGE9ZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksbD1lKFwiLi9ub2RlanNVdGlsc1wiKTtmdW5jdGlvbiBmKG4pe3JldHVybiBuZXcgaS5Qcm9taXNlKGZ1bmN0aW9uKGUsdCl7dmFyIHI9bi5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IGEpO3Iub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QoZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ci5zdHJlYW1JbmZvLmNyYzMyIT09bi5kZWNvbXByZXNzZWQuY3JjMzI/dChuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpOmUoKX0pLnJlc3VtZSgpfSl9dC5leHBvcnRzPWZ1bmN0aW9uKGUsbyl7dmFyIGg9dGhpcztyZXR1cm4gbz11LmV4dGVuZChvfHx7fSx7YmFzZTY0OiExLGNoZWNrQ1JDMzI6ITEsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiExLGNyZWF0ZUZvbGRlcnM6ITEsZGVjb2RlRmlsZU5hbWU6bi51dGY4ZGVjb2RlfSksbC5pc05vZGUmJmwuaXNTdHJlYW0oZSk/aS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKTp1LnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLGUsITAsby5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcsby5iYXNlNjQpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMobyk7cmV0dXJuIHQubG9hZChlKSx0fSkudGhlbihmdW5jdGlvbihlKXt2YXIgdD1baS5Qcm9taXNlLnJlc29sdmUoZSldLHI9ZS5maWxlcztpZihvLmNoZWNrQ1JDMzIpZm9yKHZhciBuPTA7bjxyLmxlbmd0aDtuKyspdC5wdXNoKGYocltuXSkpO3JldHVybiBpLlByb21pc2UuYWxsKHQpfSkudGhlbihmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zaGlmdCgpLHI9dC5maWxlcyxuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl0scz1pLmZpbGVOYW1lU3RyLGE9dS5yZXNvbHZlKGkuZmlsZU5hbWVTdHIpO2guZmlsZShhLGkuZGVjb21wcmVzc2VkLHtiaW5hcnk6ITAsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiEwLGRhdGU6aS5kYXRlLGRpcjppLmRpcixjb21tZW50OmkuZmlsZUNvbW1lbnRTdHIubGVuZ3RoP2kuZmlsZUNvbW1lbnRTdHI6bnVsbCx1bml4UGVybWlzc2lvbnM6aS51bml4UGVybWlzc2lvbnMsZG9zUGVybWlzc2lvbnM6aS5kb3NQZXJtaXNzaW9ucyxjcmVhdGVGb2xkZXJzOm8uY3JlYXRlRm9sZGVyc30pLGkuZGlyfHwoaC5maWxlKGEpLnVuc2FmZU9yaWdpbmFsTmFtZT1zKX1yZXR1cm4gdC56aXBDb21tZW50Lmxlbmd0aCYmKGguY29tbWVudD10LnppcENvbW1lbnQpLGh9KX19LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJpZXNcIjozM31dLDEyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHMoZSx0KXtpLmNhbGwodGhpcyxcIk5vZGVqcyBzdHJlYW0gaW5wdXQgYWRhcHRlciBmb3IgXCIrZSksdGhpcy5fdXBzdHJlYW1FbmRlZD0hMSx0aGlzLl9iaW5kU3RyZWFtKHQpfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5fYmluZFN0cmVhbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzOyh0aGlzLl9zdHJlYW09ZSkucGF1c2UoKSxlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHVzaCh7ZGF0YTplLG1ldGE6e3BlcmNlbnQ6MH19KX0pLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmlzUGF1c2VkP3RoaXMuZ2VuZXJhdGVkRXJyb3I9ZTp0LmVycm9yKGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3QuaXNQYXVzZWQ/dC5fdXBzdHJlYW1FbmRlZD0hMDp0LmVuZCgpfSl9LHMucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5wYXVzZS5jYWxsKHRoaXMpJiYodGhpcy5fc3RyZWFtLnBhdXNlKCksITApfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYodGhpcy5fdXBzdHJlYW1FbmRlZD90aGlzLmVuZCgpOnRoaXMuX3N0cmVhbS5yZXN1bWUoKSwhMCl9LHQuZXhwb3J0cz1zfSx7XCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi4vdXRpbHNcIjozMn1dLDEzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9ZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZTtmdW5jdGlvbiBuKGUsdCxyKXtpLmNhbGwodGhpcyx0KSx0aGlzLl9oZWxwZXI9ZTt2YXIgbj10aGlzO2Uub24oXCJkYXRhXCIsZnVuY3Rpb24oZSx0KXtuLnB1c2goZSl8fG4uX2hlbHBlci5wYXVzZSgpLHImJnIodCl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7bi5lbWl0KFwiZXJyb3JcIixlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtuLnB1c2gobnVsbCl9KX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMobixpKSxuLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbigpe3RoaXMuX2hlbHBlci5yZXN1bWUoKX0sdC5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDE0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXtpc05vZGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlcixuZXdCdWZmZXJGcm9tOmZ1bmN0aW9uKGUsdCl7aWYoQnVmZmVyLmZyb20mJkJ1ZmZlci5mcm9tIT09VWludDhBcnJheS5mcm9tKXJldHVybiBCdWZmZXIuZnJvbShlLHQpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcignVGhlIFwiZGF0YVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuIG5ldyBCdWZmZXIoZSx0KX0sYWxsb2NCdWZmZXI6ZnVuY3Rpb24oZSl7aWYoQnVmZmVyLmFsbG9jKXJldHVybiBCdWZmZXIuYWxsb2MoZSk7dmFyIHQ9bmV3IEJ1ZmZlcihlKTtyZXR1cm4gdC5maWxsKDApLHR9LGlzQnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBCdWZmZXIuaXNCdWZmZXIoZSl9LGlzU3RyZWFtOmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnBhdXNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlc3VtZX19fSx7fV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKGUsdCxyKXt2YXIgbixpPXUuZ2V0VHlwZU9mKHQpLHM9dS5leHRlbmQocnx8e30sZik7cy5kYXRlPXMuZGF0ZXx8bmV3IERhdGUsbnVsbCE9PXMuY29tcHJlc3Npb24mJihzLmNvbXByZXNzaW9uPXMuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKSksXCJzdHJpbmdcIj09dHlwZW9mIHMudW5peFBlcm1pc3Npb25zJiYocy51bml4UGVybWlzc2lvbnM9cGFyc2VJbnQocy51bml4UGVybWlzc2lvbnMsOCkpLHMudW5peFBlcm1pc3Npb25zJiYxNjM4NCZzLnVuaXhQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRvc1Blcm1pc3Npb25zJiYxNiZzLmRvc1Blcm1pc3Npb25zJiYocy5kaXI9ITApLHMuZGlyJiYoZT1nKGUpKSxzLmNyZWF0ZUZvbGRlcnMmJihuPV8oZSkpJiZiLmNhbGwodGhpcyxuLCEwKTt2YXIgYT1cInN0cmluZ1wiPT09aSYmITE9PT1zLmJpbmFyeSYmITE9PT1zLmJhc2U2NDtyJiZ2b2lkIDAhPT1yLmJpbmFyeXx8KHMuYmluYXJ5PSFhKSwodCBpbnN0YW5jZW9mIGMmJjA9PT10LnVuY29tcHJlc3NlZFNpemV8fHMuZGlyfHwhdHx8MD09PXQubGVuZ3RoKSYmKHMuYmFzZTY0PSExLHMuYmluYXJ5PSEwLHQ9XCJcIixzLmNvbXByZXNzaW9uPVwiU1RPUkVcIixpPVwic3RyaW5nXCIpO3ZhciBvPW51bGw7bz10IGluc3RhbmNlb2YgY3x8dCBpbnN0YW5jZW9mIGw/dDpwLmlzTm9kZSYmcC5pc1N0cmVhbSh0KT9uZXcgbShlLHQpOnUucHJlcGFyZUNvbnRlbnQoZSx0LHMuYmluYXJ5LHMub3B0aW1pemVkQmluYXJ5U3RyaW5nLHMuYmFzZTY0KTt2YXIgaD1uZXcgZChlLG8scyk7dGhpcy5maWxlc1tlXT1ofXZhciBpPWUoXCIuL3V0ZjhcIiksdT1lKFwiLi91dGlsc1wiKSxsPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLGE9ZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxmPWUoXCIuL2RlZmF1bHRzXCIpLGM9ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxkPWUoXCIuL3ppcE9iamVjdFwiKSxvPWUoXCIuL2dlbmVyYXRlXCIpLHA9ZShcIi4vbm9kZWpzVXRpbHNcIiksbT1lKFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCIpLF89ZnVuY3Rpb24oZSl7XCIvXCI9PT1lLnNsaWNlKC0xKSYmKGU9ZS5zdWJzdHJpbmcoMCxlLmxlbmd0aC0xKSk7dmFyIHQ9ZS5sYXN0SW5kZXhPZihcIi9cIik7cmV0dXJuIDA8dD9lLnN1YnN0cmluZygwLHQpOlwiXCJ9LGc9ZnVuY3Rpb24oZSl7cmV0dXJuXCIvXCIhPT1lLnNsaWNlKC0xKSYmKGUrPVwiL1wiKSxlfSxiPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dm9pZCAwIT09dD90OmYuY3JlYXRlRm9sZGVycyxlPWcoZSksdGhpcy5maWxlc1tlXXx8cy5jYWxsKHRoaXMsZSxudWxsLHtkaXI6ITAsY3JlYXRlRm9sZGVyczp0fSksdGhpcy5maWxlc1tlXX07ZnVuY3Rpb24gaChlKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfXZhciBuPXtsb2FkOmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGZvckVhY2g6ZnVuY3Rpb24oZSl7dmFyIHQscixuO2Zvcih0IGluIHRoaXMuZmlsZXMpbj10aGlzLmZpbGVzW3RdLChyPXQuc2xpY2UodGhpcy5yb290Lmxlbmd0aCx0Lmxlbmd0aCkpJiZ0LnNsaWNlKDAsdGhpcy5yb290Lmxlbmd0aCk9PT10aGlzLnJvb3QmJmUocixuKX0sZmlsdGVyOmZ1bmN0aW9uKHIpe3ZhciBuPVtdO3JldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24oZSx0KXtyKGUsdCkmJm4ucHVzaCh0KX0pLG59LGZpbGU6ZnVuY3Rpb24oZSx0LHIpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBlPXRoaXMucm9vdCtlLHMuY2FsbCh0aGlzLGUsdCxyKSx0aGlzO2lmKGgoZSkpe3ZhciBuPWU7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIXQuZGlyJiZuLnRlc3QoZSl9KX12YXIgaT10aGlzLmZpbGVzW3RoaXMucm9vdCtlXTtyZXR1cm4gaSYmIWkuZGlyP2k6bnVsbH0sZm9sZGVyOmZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiB0aGlzO2lmKGgocikpcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuZGlyJiZyLnRlc3QoZSl9KTt2YXIgZT10aGlzLnJvb3Qrcix0PWIuY2FsbCh0aGlzLGUpLG49dGhpcy5jbG9uZSgpO3JldHVybiBuLnJvb3Q9dC5uYW1lLG59LHJlbW92ZTpmdW5jdGlvbihyKXtyPXRoaXMucm9vdCtyO3ZhciBlPXRoaXMuZmlsZXNbcl07aWYoZXx8KFwiL1wiIT09ci5zbGljZSgtMSkmJihyKz1cIi9cIiksZT10aGlzLmZpbGVzW3JdKSxlJiYhZS5kaXIpZGVsZXRlIHRoaXMuZmlsZXNbcl07ZWxzZSBmb3IodmFyIHQ9dGhpcy5maWx0ZXIoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lLnNsaWNlKDAsci5sZW5ndGgpPT09cn0pLG49MDtuPHQubGVuZ3RoO24rKylkZWxldGUgdGhpcy5maWxlc1t0W25dLm5hbWVdO3JldHVybiB0aGlzfSxnZW5lcmF0ZTpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxnZW5lcmF0ZUludGVybmFsU3RyZWFtOmZ1bmN0aW9uKGUpe3ZhciB0LHI9e307dHJ5e2lmKChyPXUuZXh0ZW5kKGV8fHt9LHtzdHJlYW1GaWxlczohMSxjb21wcmVzc2lvbjpcIlNUT1JFXCIsY29tcHJlc3Npb25PcHRpb25zOm51bGwsdHlwZTpcIlwiLHBsYXRmb3JtOlwiRE9TXCIsY29tbWVudDpudWxsLG1pbWVUeXBlOlwiYXBwbGljYXRpb24vemlwXCIsZW5jb2RlRmlsZU5hbWU6aS51dGY4ZW5jb2RlfSkpLnR5cGU9ci50eXBlLnRvTG93ZXJDYXNlKCksci5jb21wcmVzc2lvbj1yLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCksXCJiaW5hcnlzdHJpbmdcIj09PXIudHlwZSYmKHIudHlwZT1cInN0cmluZ1wiKSwhci50eXBlKXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dS5jaGVja1N1cHBvcnQoci50eXBlKSxcImRhcndpblwiIT09ci5wbGF0Zm9ybSYmXCJmcmVlYnNkXCIhPT1yLnBsYXRmb3JtJiZcImxpbnV4XCIhPT1yLnBsYXRmb3JtJiZcInN1bm9zXCIhPT1yLnBsYXRmb3JtfHwoci5wbGF0Zm9ybT1cIlVOSVhcIiksXCJ3aW4zMlwiPT09ci5wbGF0Zm9ybSYmKHIucGxhdGZvcm09XCJET1NcIik7dmFyIG49ci5jb21tZW50fHx0aGlzLmNvbW1lbnR8fFwiXCI7dD1vLmdlbmVyYXRlV29ya2VyKHRoaXMscixuKX1jYXRjaChlKXsodD1uZXcgbChcImVycm9yXCIpKS5lcnJvcihlKX1yZXR1cm4gbmV3IGEodCxyLnR5cGV8fFwic3RyaW5nXCIsci5taW1lVHlwZSl9LGdlbmVyYXRlQXN5bmM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKGUpLmFjY3VtdWxhdGUodCl9LGdlbmVyYXRlTm9kZVN0cmVhbTpmdW5jdGlvbihlLHQpe3JldHVybihlPWV8fHt9KS50eXBlfHwoZS50eXBlPVwibm9kZWJ1ZmZlclwiKSx0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0oZSkudG9Ob2RlanNTdHJlYW0odCl9fTt0LmV4cG9ydHM9bn0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vZGVmYXVsdHNcIjo1LFwiLi9nZW5lcmF0ZVwiOjksXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIjoxMixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcE9iamVjdFwiOjM1fV0sMTY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZShcInN0cmVhbVwiKX0se3N0cmVhbTp2b2lkIDB9XSwxNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0RhdGFSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKTtmb3IodmFyIHQ9MDt0PHRoaXMuZGF0YS5sZW5ndGg7dCsrKWVbdF09MjU1JmVbdF19ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUuYnl0ZUF0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRhdGFbdGhpcy56ZXJvK2VdfSxpLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5jaGFyQ29kZUF0KDApLHI9ZS5jaGFyQ29kZUF0KDEpLG49ZS5jaGFyQ29kZUF0KDIpLGk9ZS5jaGFyQ29kZUF0KDMpLHM9dGhpcy5sZW5ndGgtNDswPD1zOy0tcylpZih0aGlzLmRhdGFbc109PT10JiZ0aGlzLmRhdGFbcysxXT09PXImJnRoaXMuZGF0YVtzKzJdPT09biYmdGhpcy5kYXRhW3MrM109PT1pKXJldHVybiBzLXRoaXMuemVybztyZXR1cm4tMX0saS5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhckNvZGVBdCgwKSxyPWUuY2hhckNvZGVBdCgxKSxuPWUuY2hhckNvZGVBdCgyKSxpPWUuY2hhckNvZGVBdCgzKSxzPXRoaXMucmVhZERhdGEoNCk7cmV0dXJuIHQ9PT1zWzBdJiZyPT09c1sxXSYmbj09PXNbMl0mJmk9PT1zWzNdfSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXtpZih0aGlzLmNoZWNrT2Zmc2V0KGUpLDA9PT1lKXJldHVybltdO3ZhciB0PXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vRGF0YVJlYWRlclwiOjE4fV0sMTg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi4vdXRpbHNcIik7ZnVuY3Rpb24gaShlKXt0aGlzLmRhdGE9ZSx0aGlzLmxlbmd0aD1lLmxlbmd0aCx0aGlzLmluZGV4PTAsdGhpcy56ZXJvPTB9aS5wcm90b3R5cGU9e2NoZWNrT2Zmc2V0OmZ1bmN0aW9uKGUpe3RoaXMuY2hlY2tJbmRleCh0aGlzLmluZGV4K2UpfSxjaGVja0luZGV4OmZ1bmN0aW9uKGUpe2lmKHRoaXMubGVuZ3RoPHRoaXMuemVybytlfHxlPDApdGhyb3cgbmV3IEVycm9yKFwiRW5kIG9mIGRhdGEgcmVhY2hlZCAoZGF0YSBsZW5ndGggPSBcIit0aGlzLmxlbmd0aCtcIiwgYXNrZWQgaW5kZXggPSBcIitlK1wiKS4gQ29ycnVwdGVkIHppcCA/XCIpfSxzZXRJbmRleDpmdW5jdGlvbihlKXt0aGlzLmNoZWNrSW5kZXgoZSksdGhpcy5pbmRleD1lfSxza2lwOmZ1bmN0aW9uKGUpe3RoaXMuc2V0SW5kZXgodGhpcy5pbmRleCtlKX0sYnl0ZUF0OmZ1bmN0aW9uKCl7fSxyZWFkSW50OmZ1bmN0aW9uKGUpe3ZhciB0LHI9MDtmb3IodGhpcy5jaGVja09mZnNldChlKSx0PXRoaXMuaW5kZXgrZS0xO3Q+PXRoaXMuaW5kZXg7dC0tKXI9KHI8PDgpK3RoaXMuYnl0ZUF0KHQpO3JldHVybiB0aGlzLmluZGV4Kz1lLHJ9LHJlYWRTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIG4udHJhbnNmb3JtVG8oXCJzdHJpbmdcIix0aGlzLnJlYWREYXRhKGUpKX0scmVhZERhdGE6ZnVuY3Rpb24oKXt9LGxhc3RJbmRleE9mU2lnbmF0dXJlOmZ1bmN0aW9uKCl7fSxyZWFkQW5kQ2hlY2tTaWduYXR1cmU6ZnVuY3Rpb24oKXt9LHJlYWREYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkSW50KDQpO3JldHVybiBuZXcgRGF0ZShEYXRlLlVUQygxOTgwKyhlPj4yNSYxMjcpLChlPj4yMSYxNSktMSxlPj4xNiYzMSxlPj4xMSYzMSxlPj41JjYzLCgzMSZlKTw8MSkpfX0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzJ9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNoZWNrT2Zmc2V0KGUpO3ZhciB0PXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vVWludDhBcnJheVJlYWRlclwiOjIxfV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUuYnl0ZUF0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRhdGEuY2hhckNvZGVBdCh0aGlzLnplcm8rZSl9LGkucHJvdG90eXBlLmxhc3RJbmRleE9mU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRhdGEubGFzdEluZGV4T2YoZSktdGhpcy56ZXJvfSxpLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10aGlzLnJlYWREYXRhKDQpfSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNoZWNrT2Zmc2V0KGUpO3ZhciB0PXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vRGF0YVJlYWRlclwiOjE4fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9BcnJheVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKGUpe2lmKHRoaXMuY2hlY2tPZmZzZXQoZSksMD09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO3ZhciB0PXRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vQXJyYXlSZWFkZXJcIjoxN31dLDIyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N1cHBvcnRcIikscz1lKFwiLi9BcnJheVJlYWRlclwiKSxhPWUoXCIuL1N0cmluZ1JlYWRlclwiKSxvPWUoXCIuL05vZGVCdWZmZXJSZWFkZXJcIiksaD1lKFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uLmdldFR5cGVPZihlKTtyZXR1cm4gbi5jaGVja1N1cHBvcnQodCksXCJzdHJpbmdcIiE9PXR8fGkudWludDhhcnJheT9cIm5vZGVidWZmZXJcIj09PXQ/bmV3IG8oZSk6aS51aW50OGFycmF5P25ldyBoKG4udHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsZSkpOm5ldyBzKG4udHJhbnNmb3JtVG8oXCJhcnJheVwiLGUpKTpuZXcgYShlKX19LHtcIi4uL3N1cHBvcnRcIjozMCxcIi4uL3V0aWxzXCI6MzIsXCIuL0FycmF5UmVhZGVyXCI6MTcsXCIuL05vZGVCdWZmZXJSZWFkZXJcIjoxOSxcIi4vU3RyaW5nUmVhZGVyXCI6MjAsXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjoyMX1dLDIzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5MT0NBTF9GSUxFX0hFQURFUj1cIlBLXHUwMDAzXHUwMDA0XCIsci5DRU5UUkFMX0ZJTEVfSEVBREVSPVwiUEtcdTAwMDFcdTAwMDJcIixyLkNFTlRSQUxfRElSRUNUT1JZX0VORD1cIlBLXHUwMDA1XHUwMDA2XCIsci5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SPVwiUEtcdTAwMDZcdTAwMDdcIixyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORD1cIlBLXHUwMDA2XHUwMDA2XCIsci5EQVRBX0RFU0NSSVBUT1I9XCJQS1x1MDAwN1xcYlwifSx7fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9HZW5lcmljV29ya2VyXCIpLGk9ZShcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIHMoZSl7bi5jYWxsKHRoaXMsXCJDb252ZXJ0V29ya2VyIHRvIFwiK2UpLHRoaXMuZGVzdFR5cGU9ZX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMucHVzaCh7ZGF0YTppLnRyYW5zZm9ybVRvKHRoaXMuZGVzdFR5cGUsZS5kYXRhKSxtZXRhOmUubWV0YX0pfSx0LmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9HZW5lcmljV29ya2VyXCIpLGk9ZShcIi4uL2NyYzMyXCIpO2Z1bmN0aW9uIHMoKXtuLmNhbGwodGhpcyxcIkNyYzMyUHJvYmVcIiksdGhpcy53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsMCl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMuc3RyZWFtSW5mby5jcmMzMj1pKGUuZGF0YSx0aGlzLnN0cmVhbUluZm8uY3JjMzJ8fDApLHRoaXMucHVzaChlKX0sdC5leHBvcnRzPXN9LHtcIi4uL2NyYzMyXCI6NCxcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUpe2kuY2FsbCh0aGlzLFwiRGF0YUxlbmd0aFByb2JlIGZvciBcIitlKSx0aGlzLnByb3BOYW1lPWUsdGhpcy53aXRoU3RyZWFtSW5mbyhlLDApfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9dGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdfHwwO3RoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXT10K2UuZGF0YS5sZW5ndGh9aS5wcm90b3R5cGUucHJvY2Vzc0NodW5rLmNhbGwodGhpcyxlKX0sdC5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUpe2kuY2FsbCh0aGlzLFwiRGF0YVdvcmtlclwiKTt2YXIgdD10aGlzO3RoaXMuZGF0YUlzUmVhZHk9ITEsdGhpcy5pbmRleD0wLHRoaXMubWF4PTAsdGhpcy5kYXRhPW51bGwsdGhpcy50eXBlPVwiXCIsdGhpcy5fdGlja1NjaGVkdWxlZD0hMSxlLnRoZW4oZnVuY3Rpb24oZSl7dC5kYXRhSXNSZWFkeT0hMCx0LmRhdGE9ZSx0Lm1heD1lJiZlLmxlbmd0aHx8MCx0LnR5cGU9bi5nZXRUeXBlT2YoZSksdC5pc1BhdXNlZHx8dC5fdGlja0FuZFJlcGVhdCgpfSxmdW5jdGlvbihlKXt0LmVycm9yKGUpfSl9bi5pbmhlcml0cyhzLGkpLHMucHJvdG90eXBlLmNsZWFuVXA9ZnVuY3Rpb24oKXtpLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksdGhpcy5kYXRhPW51bGx9LHMucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3JldHVybiEhaS5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykmJighdGhpcy5fdGlja1NjaGVkdWxlZCYmdGhpcy5kYXRhSXNSZWFkeSYmKHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITAsbi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LFtdLHRoaXMpKSwhMCl9LHMucHJvdG90eXBlLl90aWNrQW5kUmVwZWF0PWZ1bmN0aW9uKCl7dGhpcy5fdGlja1NjaGVkdWxlZD0hMSx0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWR8fCh0aGlzLl90aWNrKCksdGhpcy5pc0ZpbmlzaGVkfHwobi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LFtdLHRoaXMpLHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITApKX0scy5wcm90b3R5cGUuX3RpY2s9ZnVuY3Rpb24oKXtpZih0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dmFyIGU9bnVsbCx0PU1hdGgubWluKHRoaXMubWF4LHRoaXMuaW5kZXgrMTYzODQpO2lmKHRoaXMuaW5kZXg+PXRoaXMubWF4KXJldHVybiB0aGlzLmVuZCgpO3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2VcInN0cmluZ1wiOmU9dGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLmluZGV4LHQpO2JyZWFrO2Nhc2VcInVpbnQ4YXJyYXlcIjplPXRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLmluZGV4LHQpO2JyZWFrO2Nhc2VcImFycmF5XCI6Y2FzZVwibm9kZWJ1ZmZlclwiOmU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuaW5kZXgsdCl9cmV0dXJuIHRoaXMuaW5kZXg9dCx0aGlzLnB1c2goe2RhdGE6ZSxtZXRhOntwZXJjZW50OnRoaXMubWF4P3RoaXMuaW5kZXgvdGhpcy5tYXgqMTAwOjB9fSl9LHQuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dGhpcy5uYW1lPWV8fFwiZGVmYXVsdFwiLHRoaXMuc3RyZWFtSW5mbz17fSx0aGlzLmdlbmVyYXRlZEVycm9yPW51bGwsdGhpcy5leHRyYVN0cmVhbUluZm89e30sdGhpcy5pc1BhdXNlZD0hMCx0aGlzLmlzRmluaXNoZWQ9ITEsdGhpcy5pc0xvY2tlZD0hMSx0aGlzLl9saXN0ZW5lcnM9e2RhdGE6W10sZW5kOltdLGVycm9yOltdfSx0aGlzLnByZXZpb3VzPW51bGx9bi5wcm90b3R5cGU9e3B1c2g6ZnVuY3Rpb24oZSl7dGhpcy5lbWl0KFwiZGF0YVwiLGUpfSxlbmQ6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dGhpcy5mbHVzaCgpO3RyeXt0aGlzLmVtaXQoXCJlbmRcIiksdGhpcy5jbGVhblVwKCksdGhpcy5pc0ZpbmlzaGVkPSEwfWNhdGNoKGUpe3RoaXMuZW1pdChcImVycm9yXCIsZSl9cmV0dXJuITB9LGVycm9yOmZ1bmN0aW9uKGUpe3JldHVybiF0aGlzLmlzRmluaXNoZWQmJih0aGlzLmlzUGF1c2VkP3RoaXMuZ2VuZXJhdGVkRXJyb3I9ZToodGhpcy5pc0ZpbmlzaGVkPSEwLHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5lcnJvcihlKSx0aGlzLmNsZWFuVXAoKSksITApfSxvbjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9saXN0ZW5lcnNbZV0ucHVzaCh0KSx0aGlzfSxjbGVhblVwOmZ1bmN0aW9uKCl7dGhpcy5zdHJlYW1JbmZvPXRoaXMuZ2VuZXJhdGVkRXJyb3I9dGhpcy5leHRyYVN0cmVhbUluZm89bnVsbCx0aGlzLl9saXN0ZW5lcnM9W119LGVtaXQ6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9saXN0ZW5lcnNbZV0pZm9yKHZhciByPTA7cjx0aGlzLl9saXN0ZW5lcnNbZV0ubGVuZ3RoO3IrKyl0aGlzLl9saXN0ZW5lcnNbZV1bcl0uY2FsbCh0aGlzLHQpfSxwaXBlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlZ2lzdGVyUHJldmlvdXModGhpcyl9LHJlZ2lzdGVyUHJldmlvdXM6ZnVuY3Rpb24oZSl7aWYodGhpcy5pc0xvY2tlZCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3RyZWFtICdcIit0aGlzK1wiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO3RoaXMuc3RyZWFtSW5mbz1lLnN0cmVhbUluZm8sdGhpcy5tZXJnZVN0cmVhbUluZm8oKSx0aGlzLnByZXZpb3VzPWU7dmFyIHQ9dGhpcztyZXR1cm4gZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnByb2Nlc3NDaHVuayhlKX0pLGUub24oXCJlbmRcIixmdW5jdGlvbigpe3QuZW5kKCl9KSxlLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmVycm9yKGUpfSksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc1BhdXNlZCYmIXRoaXMuaXNGaW5pc2hlZCYmKHRoaXMuaXNQYXVzZWQ9ITAsdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5wYXVzZSgpLCEwKX0scmVzdW1lOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt2YXIgZT10aGlzLmlzUGF1c2VkPSExO3JldHVybiB0aGlzLmdlbmVyYXRlZEVycm9yJiYodGhpcy5lcnJvcih0aGlzLmdlbmVyYXRlZEVycm9yKSxlPSEwKSx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLnJlc3VtZSgpLCFlfSxmbHVzaDpmdW5jdGlvbigpe30scHJvY2Vzc0NodW5rOmZ1bmN0aW9uKGUpe3RoaXMucHVzaChlKX0sd2l0aFN0cmVhbUluZm86ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5leHRyYVN0cmVhbUluZm9bZV09dCx0aGlzLm1lcmdlU3RyZWFtSW5mbygpLHRoaXN9LG1lcmdlU3RyZWFtSW5mbzpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiB0aGlzLmV4dHJhU3RyZWFtSW5mbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYVN0cmVhbUluZm8sZSkmJih0aGlzLnN0cmVhbUluZm9bZV09dGhpcy5leHRyYVN0cmVhbUluZm9bZV0pfSxsb2NrOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0xvY2tlZCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3RyZWFtICdcIit0aGlzK1wiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO3RoaXMuaXNMb2NrZWQ9ITAsdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5sb2NrKCl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9XCJXb3JrZXIgXCIrdGhpcy5uYW1lO3JldHVybiB0aGlzLnByZXZpb3VzP3RoaXMucHJldmlvdXMrXCIgLT4gXCIrZTplfX0sdC5leHBvcnRzPW59LHt9XSwyOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBoPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuL0NvbnZlcnRXb3JrZXJcIikscz1lKFwiLi9HZW5lcmljV29ya2VyXCIpLHU9ZShcIi4uL2Jhc2U2NFwiKSxuPWUoXCIuLi9zdXBwb3J0XCIpLGE9ZShcIi4uL2V4dGVybmFsXCIpLG89bnVsbDtpZihuLm5vZGVzdHJlYW0pdHJ5e289ZShcIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyXCIpfWNhdGNoKGUpe31mdW5jdGlvbiBsKGUsbyl7cmV0dXJuIG5ldyBhLlByb21pc2UoZnVuY3Rpb24odCxyKXt2YXIgbj1bXSxpPWUuX2ludGVybmFsVHlwZSxzPWUuX291dHB1dFR5cGUsYT1lLl9taW1lVHlwZTtlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUsdCl7bi5wdXNoKGUpLG8mJm8odCl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7bj1bXSxyKGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3RyeXt2YXIgZT1mdW5jdGlvbihlLHQscil7c3dpdGNoKGUpe2Nhc2VcImJsb2JcIjpyZXR1cm4gaC5uZXdCbG9iKGgudHJhbnNmb3JtVG8oXCJhcnJheWJ1ZmZlclwiLHQpLHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiB1LmVuY29kZSh0KTtkZWZhdWx0OnJldHVybiBoLnRyYW5zZm9ybVRvKGUsdCl9fShzLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbj0wLGk9bnVsbCxzPTA7Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKylzKz10W3JdLmxlbmd0aDtzd2l0Y2goZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIHQuam9pbihcIlwiKTtjYXNlXCJhcnJheVwiOnJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLHQpO2Nhc2VcInVpbnQ4YXJyYXlcIjpmb3IoaT1uZXcgVWludDhBcnJheShzKSxyPTA7cjx0Lmxlbmd0aDtyKyspaS5zZXQodFtyXSxuKSxuKz10W3JdLmxlbmd0aDtyZXR1cm4gaTtjYXNlXCJub2RlYnVmZmVyXCI6cmV0dXJuIEJ1ZmZlci5jb25jYXQodCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJjb25jYXQgOiB1bnN1cHBvcnRlZCB0eXBlICdcIitlK1wiJ1wiKX19KGksbiksYSk7dChlKX1jYXRjaChlKXtyKGUpfW49W119KS5yZXN1bWUoKX0pfWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPXQ7c3dpdGNoKHQpe2Nhc2VcImJsb2JcIjpjYXNlXCJhcnJheWJ1ZmZlclwiOm49XCJ1aW50OGFycmF5XCI7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6bj1cInN0cmluZ1wifXRyeXt0aGlzLl9pbnRlcm5hbFR5cGU9bix0aGlzLl9vdXRwdXRUeXBlPXQsdGhpcy5fbWltZVR5cGU9cixoLmNoZWNrU3VwcG9ydChuKSx0aGlzLl93b3JrZXI9ZS5waXBlKG5ldyBpKG4pKSxlLmxvY2soKX1jYXRjaChlKXt0aGlzLl93b3JrZXI9bmV3IHMoXCJlcnJvclwiKSx0aGlzLl93b3JrZXIuZXJyb3IoZSl9fWYucHJvdG90eXBlPXthY2N1bXVsYXRlOmZ1bmN0aW9uKGUpe3JldHVybiBsKHRoaXMsZSl9LG9uOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm5cImRhdGFcIj09PWU/dGhpcy5fd29ya2VyLm9uKGUsZnVuY3Rpb24oZSl7dC5jYWxsKHIsZS5kYXRhLGUubWV0YSl9KTp0aGlzLl93b3JrZXIub24oZSxmdW5jdGlvbigpe2guZGVsYXkodCxhcmd1bWVudHMscil9KSx0aGlzfSxyZXN1bWU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5kZWxheSh0aGlzLl93b3JrZXIucmVzdW1lLFtdLHRoaXMuX3dvcmtlciksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd29ya2VyLnBhdXNlKCksdGhpc30sdG9Ob2RlanNTdHJlYW06ZnVuY3Rpb24oZSl7aWYoaC5jaGVja1N1cHBvcnQoXCJub2Rlc3RyZWFtXCIpLFwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZSl0aHJvdyBuZXcgRXJyb3IodGhpcy5fb3V0cHV0VHlwZStcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kXCIpO3JldHVybiBuZXcgbyh0aGlzLHtvYmplY3RNb2RlOlwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZX0sZSl9fSx0LmV4cG9ydHM9Zn0se1wiLi4vYmFzZTY0XCI6MSxcIi4uL2V4dGVybmFsXCI6NixcIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyXCI6MTMsXCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9Db252ZXJ0V29ya2VyXCI6MjQsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDMwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7aWYoci5iYXNlNjQ9ITAsci5hcnJheT0hMCxyLnN0cmluZz0hMCxyLmFycmF5YnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXksci5ub2RlYnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsci51aW50OGFycmF5PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcilyLmJsb2I9ITE7ZWxzZXt2YXIgbj1uZXcgQXJyYXlCdWZmZXIoMCk7dHJ5e3IuYmxvYj0wPT09bmV3IEJsb2IoW25dLHt0eXBlOlwiYXBwbGljYXRpb24vemlwXCJ9KS5zaXplfWNhdGNoKGUpe3RyeXt2YXIgaT1uZXcoc2VsZi5CbG9iQnVpbGRlcnx8c2VsZi5XZWJLaXRCbG9iQnVpbGRlcnx8c2VsZi5Nb3pCbG9iQnVpbGRlcnx8c2VsZi5NU0Jsb2JCdWlsZGVyKTtpLmFwcGVuZChuKSxyLmJsb2I9MD09PWkuZ2V0QmxvYihcImFwcGxpY2F0aW9uL3ppcFwiKS5zaXplfWNhdGNoKGUpe3IuYmxvYj0hMX19fXRyeXtyLm5vZGVzdHJlYW09ISFlKFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlfWNhdGNoKGUpe3Iubm9kZXN0cmVhbT0hMX19LHtcInJlYWRhYmxlLXN0cmVhbVwiOjE2fV0sMzE6W2Z1bmN0aW9uKGUsdCxzKXtcInVzZSBzdHJpY3RcIjtmb3IodmFyIG89ZShcIi4vdXRpbHNcIiksaD1lKFwiLi9zdXBwb3J0XCIpLHI9ZShcIi4vbm9kZWpzVXRpbHNcIiksbj1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSx1PW5ldyBBcnJheSgyNTYpLGk9MDtpPDI1NjtpKyspdVtpXT0yNTI8PWk/NjoyNDg8PWk/NToyNDA8PWk/NDoyMjQ8PWk/MzoxOTI8PWk/MjoxO3VbMjU0XT11WzI1NF09MTtmdW5jdGlvbiBhKCl7bi5jYWxsKHRoaXMsXCJ1dGYtOCBkZWNvZGVcIiksdGhpcy5sZWZ0T3Zlcj1udWxsfWZ1bmN0aW9uIGwoKXtuLmNhbGwodGhpcyxcInV0Zi04IGVuY29kZVwiKX1zLnV0ZjhlbmNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGgubm9kZWJ1ZmZlcj9yLm5ld0J1ZmZlckZyb20oZSxcInV0Zi04XCIpOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYT1lLmxlbmd0aCxvPTA7Zm9yKGk9MDtpPGE7aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IodD1oLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkobyk6bmV3IEFycmF5KG8pLGk9cz0wO3M8bztpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPGEmJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxyPDEyOD90W3MrK109cjoocjwyMDQ4P3RbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/dFtzKytdPTIyNHxyPj4+MTI6KHRbcysrXT0yNDB8cj4+PjE4LHRbcysrXT0xMjh8cj4+PjEyJjYzKSx0W3MrK109MTI4fHI+Pj42JjYzKSx0W3MrK109MTI4fDYzJnIpO3JldHVybiB0fShlKX0scy51dGY4ZGVjb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVidWZmZXI/by50cmFuc2Zvcm1UbyhcIm5vZGVidWZmZXJcIixlKS50b1N0cmluZyhcInV0Zi04XCIpOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHM9ZS5sZW5ndGgsYT1uZXcgQXJyYXkoMipzKTtmb3IodD1yPTA7dDxzOylpZigobj1lW3QrK10pPDEyOClhW3IrK109bjtlbHNlIGlmKDQ8KGk9dVtuXSkpYVtyKytdPTY1NTMzLHQrPWktMTtlbHNle2ZvcihuJj0yPT09aT8zMTozPT09aT8xNTo3OzE8aSYmdDxzOyluPW48PDZ8NjMmZVt0KytdLGktLTsxPGk/YVtyKytdPTY1NTMzOm48NjU1MzY/YVtyKytdPW46KG4tPTY1NTM2LGFbcisrXT01NTI5NnxuPj4xMCYxMDIzLGFbcisrXT01NjMyMHwxMDIzJm4pfXJldHVybiBhLmxlbmd0aCE9PXImJihhLnN1YmFycmF5P2E9YS5zdWJhcnJheSgwLHIpOmEubGVuZ3RoPXIpLG8uYXBwbHlGcm9tQ2hhckNvZGUoYSl9KGU9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLGUpKX0sby5pbmhlcml0cyhhLG4pLGEucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt2YXIgdD1vLnRyYW5zZm9ybVRvKGgudWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIsZS5kYXRhKTtpZih0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCl7aWYoaC51aW50OGFycmF5KXt2YXIgcj10Oyh0PW5ldyBVaW50OEFycmF5KHIubGVuZ3RoK3RoaXMubGVmdE92ZXIubGVuZ3RoKSkuc2V0KHRoaXMubGVmdE92ZXIsMCksdC5zZXQocix0aGlzLmxlZnRPdmVyLmxlbmd0aCl9ZWxzZSB0PXRoaXMubGVmdE92ZXIuY29uY2F0KHQpO3RoaXMubGVmdE92ZXI9bnVsbH12YXIgbj1mdW5jdGlvbihlLHQpe3ZhciByO2ZvcigodD10fHxlLmxlbmd0aCk+ZS5sZW5ndGgmJih0PWUubGVuZ3RoKSxyPXQtMTswPD1yJiYxMjg9PSgxOTImZVtyXSk7KXItLTtyZXR1cm4gcjwwP3Q6MD09PXI/dDpyK3VbZVtyXV0+dD9yOnR9KHQpLGk9dDtuIT09dC5sZW5ndGgmJihoLnVpbnQ4YXJyYXk/KGk9dC5zdWJhcnJheSgwLG4pLHRoaXMubGVmdE92ZXI9dC5zdWJhcnJheShuLHQubGVuZ3RoKSk6KGk9dC5zbGljZSgwLG4pLHRoaXMubGVmdE92ZXI9dC5zbGljZShuLHQubGVuZ3RoKSkpLHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUoaSksbWV0YTplLm1ldGF9KX0sYS5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXt0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCYmKHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUodGhpcy5sZWZ0T3ZlciksbWV0YTp7fX0pLHRoaXMubGVmdE92ZXI9bnVsbCl9LHMuVXRmOERlY29kZVdvcmtlcj1hLG8uaW5oZXJpdHMobCxuKSxsLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5wdXNoKHtkYXRhOnMudXRmOGVuY29kZShlLmRhdGEpLG1ldGE6ZS5tZXRhfSl9LHMuVXRmOEVuY29kZVdvcmtlcj1sfSx7XCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMn1dLDMyOltmdW5jdGlvbihlLHQsYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZShcIi4vc3VwcG9ydFwiKSxoPWUoXCIuL2Jhc2U2NFwiKSxyPWUoXCIuL25vZGVqc1V0aWxzXCIpLHU9ZShcIi4vZXh0ZXJuYWxcIik7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZX1mdW5jdGlvbiBsKGUsdCl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDsrK3IpdFtyXT0yNTUmZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fWUoXCJzZXRpbW1lZGlhdGVcIiksYS5uZXdCbG9iPWZ1bmN0aW9uKHQscil7YS5jaGVja1N1cHBvcnQoXCJibG9iXCIpO3RyeXtyZXR1cm4gbmV3IEJsb2IoW3RdLHt0eXBlOnJ9KX1jYXRjaChlKXt0cnl7dmFyIG49bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7cmV0dXJuIG4uYXBwZW5kKHQpLG4uZ2V0QmxvYihyKX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiBjYW4ndCBjb25zdHJ1Y3QgdGhlIEJsb2IuXCIpfX19O3ZhciBpPXtzdHJpbmdpZnlCeUNodW5rOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1bXSxpPTAscz1lLmxlbmd0aDtpZihzPD1yKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZSk7Zm9yKDtpPHM7KVwiYXJyYXlcIj09PXR8fFwibm9kZWJ1ZmZlclwiPT09dD9uLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUuc2xpY2UoaSxNYXRoLm1pbihpK3IscykpKSk6bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlLnN1YmFycmF5KGksTWF0aC5taW4oaStyLHMpKSkpLGkrPXI7cmV0dXJuIG4uam9pbihcIlwiKX0sc3RyaW5naWZ5QnlDaGFyOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiLHI9MDtyPGUubGVuZ3RoO3IrKyl0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbcl0pO3JldHVybiB0fSxhcHBseUNhbkJlVXNlZDp7dWludDhhcnJheTpmdW5jdGlvbigpe3RyeXtyZXR1cm4gby51aW50OGFycmF5JiYxPT09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKS5sZW5ndGh9Y2F0Y2goZSl7cmV0dXJuITF9fSgpLG5vZGVidWZmZXI6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8ubm9kZWJ1ZmZlciYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxyLmFsbG9jQnVmZmVyKDEpKS5sZW5ndGh9Y2F0Y2goZSl7cmV0dXJuITF9fSgpfX07ZnVuY3Rpb24gcyhlKXt2YXIgdD02NTUzNixyPWEuZ2V0VHlwZU9mKGUpLG49ITA7aWYoXCJ1aW50OGFycmF5XCI9PT1yP249aS5hcHBseUNhbkJlVXNlZC51aW50OGFycmF5Olwibm9kZWJ1ZmZlclwiPT09ciYmKG49aS5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyKSxuKWZvcig7MTx0Oyl0cnl7cmV0dXJuIGkuc3RyaW5naWZ5QnlDaHVuayhlLHIsdCl9Y2F0Y2goZSl7dD1NYXRoLmZsb29yKHQvMil9cmV0dXJuIGkuc3RyaW5naWZ5QnlDaGFyKGUpfWZ1bmN0aW9uIGYoZSx0KXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0W3JdPWVbcl07cmV0dXJuIHR9YS5hcHBseUZyb21DaGFyQ29kZT1zO3ZhciBjPXt9O2Muc3RyaW5nPXtzdHJpbmc6bixhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbChlLG5ldyBBcnJheShlLmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gYy5zdHJpbmcudWludDhhcnJheShlKS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxuZXcgVWludDhBcnJheShlLmxlbmd0aCkpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBsKGUsci5hbGxvY0J1ZmZlcihlLmxlbmd0aCkpfX0sYy5hcnJheT17c3RyaW5nOnMsYXJyYXk6bixhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVWludDhBcnJheShlKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKGUpfX0sYy5hcnJheWJ1ZmZlcj17c3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiBzKG5ldyBVaW50OEFycmF5KGUpKX0sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGYobmV3IFVpbnQ4QXJyYXkoZSksbmV3IEFycmF5KGUuYnl0ZUxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpuLHVpbnQ4YXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGUpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiByLm5ld0J1ZmZlckZyb20obmV3IFVpbnQ4QXJyYXkoZSkpfX0sYy51aW50OGFycmF5PXtzdHJpbmc6cyxhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gZihlLG5ldyBBcnJheShlLmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5idWZmZXJ9LHVpbnQ4YXJyYXk6bixub2RlYnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiByLm5ld0J1ZmZlckZyb20oZSl9fSxjLm5vZGVidWZmZXI9e3N0cmluZzpzLGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKGUsbmV3IEFycmF5KGUubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBjLm5vZGVidWZmZXIudWludDhhcnJheShlKS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZSxuZXcgVWludDhBcnJheShlLmxlbmd0aCkpfSxub2RlYnVmZmVyOm59LGEudHJhbnNmb3JtVG89ZnVuY3Rpb24oZSx0KXtpZih0PXR8fFwiXCIsIWUpcmV0dXJuIHQ7YS5jaGVja1N1cHBvcnQoZSk7dmFyIHI9YS5nZXRUeXBlT2YodCk7cmV0dXJuIGNbcl1bZV0odCl9LGEucmVzb2x2ZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zcGxpdChcIi9cIikscj1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07XCIuXCI9PT1pfHxcIlwiPT09aSYmMCE9PW4mJm4hPT10Lmxlbmd0aC0xfHwoXCIuLlwiPT09aT9yLnBvcCgpOnIucHVzaChpKSl9cmV0dXJuIHIuam9pbihcIi9cIil9LGEuZ2V0VHlwZU9mPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP1wic3RyaW5nXCI6XCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpP1wiYXJyYXlcIjpvLm5vZGVidWZmZXImJnIuaXNCdWZmZXIoZSk/XCJub2RlYnVmZmVyXCI6by51aW50OGFycmF5JiZlIGluc3RhbmNlb2YgVWludDhBcnJheT9cInVpbnQ4YXJyYXlcIjpvLmFycmF5YnVmZmVyJiZlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/XCJhcnJheWJ1ZmZlclwiOnZvaWQgMH0sYS5jaGVja1N1cHBvcnQ9ZnVuY3Rpb24oZSl7aWYoIW9bZS50b0xvd2VyQ2FzZSgpXSl0aHJvdyBuZXcgRXJyb3IoZStcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgcGxhdGZvcm1cIil9LGEuTUFYX1ZBTFVFXzE2QklUUz02NTUzNSxhLk1BWF9WQUxVRV8zMkJJVFM9LTEsYS5wcmV0dHk9ZnVuY3Rpb24oZSl7dmFyIHQscixuPVwiXCI7Zm9yKHI9MDtyPChlfHxcIlwiKS5sZW5ndGg7cisrKW4rPVwiXFxcXHhcIisoKHQ9ZS5jaGFyQ29kZUF0KHIpKTwxNj9cIjBcIjpcIlwiKSt0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO3JldHVybiBufSxhLmRlbGF5PWZ1bmN0aW9uKGUsdCxyKXtzZXRJbW1lZGlhdGUoZnVuY3Rpb24oKXtlLmFwcGx5KHJ8fG51bGwsdHx8W10pfSl9LGEuaW5oZXJpdHM9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7fXIucHJvdG90eXBlPXQucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyByfSxhLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBlLHQscj17fTtmb3IoZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspZm9yKHQgaW4gYXJndW1lbnRzW2VdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbZV0sdCkmJnZvaWQgMD09PXJbdF0mJihyW3RdPWFyZ3VtZW50c1tlXVt0XSk7cmV0dXJuIHJ9LGEucHJlcGFyZUNvbnRlbnQ9ZnVuY3Rpb24ocixlLG4saSxzKXtyZXR1cm4gdS5Qcm9taXNlLnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gby5ibG9iJiYobiBpbnN0YW5jZW9mIEJsb2J8fC0xIT09W1wiW29iamVjdCBGaWxlXVwiLFwiW29iamVjdCBCbG9iXVwiXS5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKSkpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcj9uZXcgdS5Qcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIGU9bmV3IEZpbGVSZWFkZXI7ZS5vbmxvYWQ9ZnVuY3Rpb24oZSl7dChlLnRhcmdldC5yZXN1bHQpfSxlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cihlLnRhcmdldC5lcnJvcil9LGUucmVhZEFzQXJyYXlCdWZmZXIobil9KTpufSkudGhlbihmdW5jdGlvbihlKXt2YXIgdD1hLmdldFR5cGVPZihlKTtyZXR1cm4gdD8oXCJhcnJheWJ1ZmZlclwiPT09dD9lPWEudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsZSk6XCJzdHJpbmdcIj09PXQmJihzP2U9aC5kZWNvZGUoZSk6biYmITAhPT1pJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gbChlLG8udWludDhhcnJheT9uZXcgVWludDhBcnJheShlLmxlbmd0aCk6bmV3IEFycmF5KGUubGVuZ3RoKSl9KGUpKSksZSk6dS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCByZWFkIHRoZSBkYXRhIG9mICdcIityK1wiJy4gSXMgaXQgaW4gYSBzdXBwb3J0ZWQgSmF2YVNjcmlwdCB0eXBlIChTdHJpbmcsIEJsb2IsIEFycmF5QnVmZmVyLCBldGMpID9cIikpfSl9fSx7XCIuL2Jhc2U2NFwiOjEsXCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3VwcG9ydFwiOjMwLHNldGltbWVkaWF0ZTo1NH1dLDMzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxpPWUoXCIuL3V0aWxzXCIpLHM9ZShcIi4vc2lnbmF0dXJlXCIpLGE9ZShcIi4vemlwRW50cnlcIiksbz1lKFwiLi9zdXBwb3J0XCIpO2Z1bmN0aW9uIGgoZSl7dGhpcy5maWxlcz1bXSx0aGlzLmxvYWRPcHRpb25zPWV9aC5wcm90b3R5cGU9e2NoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUoZSkpe3RoaXMucmVhZGVyLmluZGV4LT00O3ZhciB0PXRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk7dGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IHVuZXhwZWN0ZWQgc2lnbmF0dXJlIChcIitpLnByZXR0eSh0KStcIiwgZXhwZWN0ZWQgXCIraS5wcmV0dHkoZSkrXCIpXCIpfX0saXNTaWduYXR1cmU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLnJlYWRlci5pbmRleDt0aGlzLnJlYWRlci5zZXRJbmRleChlKTt2YXIgbj10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpPT09dDtyZXR1cm4gdGhpcy5yZWFkZXIuc2V0SW5kZXgociksbn0scmVhZEJsb2NrRW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy5kaXNrTnVtYmVyPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyUmVjb3Jkcz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclNpemU9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLnppcENvbW1lbnRMZW5ndGg9dGhpcy5yZWFkZXIucmVhZEludCgyKTt2YXIgZT10aGlzLnJlYWRlci5yZWFkRGF0YSh0aGlzLnppcENvbW1lbnRMZW5ndGgpLHQ9by51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIixyPWkudHJhbnNmb3JtVG8odCxlKTt0aGlzLnppcENvbW1lbnQ9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyKX0scmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMucmVhZGVyLnNraXAoNCksdGhpcy5kaXNrTnVtYmVyPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyUmVjb3Jkcz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGE9e307Zm9yKHZhciBlLHQscixuPXRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplLTQ0OzA8bjspZT10aGlzLnJlYWRlci5yZWFkSW50KDIpLHQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSxyPXRoaXMucmVhZGVyLnJlYWREYXRhKHQpLHRoaXMuemlwNjRFeHRlbnNpYmxlRGF0YVtlXT17aWQ6ZSxsZW5ndGg6dCx2YWx1ZTpyfX0scmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOmZ1bmN0aW9uKCl7aWYodGhpcy5kaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5kaXNrc0NvdW50PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksMTx0aGlzLmRpc2tzQ291bnQpdGhyb3cgbmV3IEVycm9yKFwiTXVsdGktdm9sdW1lcyB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIil9LHJlYWRMb2NhbEZpbGVzOmZ1bmN0aW9uKCl7dmFyIGUsdDtmb3IoZT0wO2U8dGhpcy5maWxlcy5sZW5ndGg7ZSsrKXQ9dGhpcy5maWxlc1tlXSx0aGlzLnJlYWRlci5zZXRJbmRleCh0LmxvY2FsSGVhZGVyT2Zmc2V0KSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuTE9DQUxfRklMRV9IRUFERVIpLHQucmVhZExvY2FsUGFydCh0aGlzLnJlYWRlciksdC5oYW5kbGVVVEY4KCksdC5wcm9jZXNzQXR0cmlidXRlcygpfSxyZWFkQ2VudHJhbERpcjpmdW5jdGlvbigpe3ZhciBlO2Zvcih0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLmNlbnRyYWxEaXJPZmZzZXQpO3RoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShzLkNFTlRSQUxfRklMRV9IRUFERVIpOykoZT1uZXcgYSh7emlwNjQ6dGhpcy56aXA2NH0sdGhpcy5sb2FkT3B0aW9ucykpLnJlYWRDZW50cmFsUGFydCh0aGlzLnJlYWRlciksdGhpcy5maWxlcy5wdXNoKGUpO2lmKHRoaXMuY2VudHJhbERpclJlY29yZHMhPT10aGlzLmZpbGVzLmxlbmd0aCYmMCE9PXRoaXMuY2VudHJhbERpclJlY29yZHMmJjA9PT10aGlzLmZpbGVzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogZXhwZWN0ZWQgXCIrdGhpcy5jZW50cmFsRGlyUmVjb3JkcytcIiByZWNvcmRzIGluIGNlbnRyYWwgZGlyLCBnb3QgXCIrdGhpcy5maWxlcy5sZW5ndGgpfSxyZWFkRW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO2lmKGU8MCl0aHJvdyF0aGlzLmlzU2lnbmF0dXJlKDAscy5MT0NBTF9GSUxFX0hFQURFUik/bmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgOiBpcyB0aGlzIGEgemlwIGZpbGUgPyBJZiBpdCBpcywgc2VlIGh0dHBzOi8vc3R1ay5naXRodWIuaW8vanN6aXAvZG9jdW1lbnRhdGlvbi9ob3d0by9yZWFkX3ppcC5odG1sXCIpOm5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO3RoaXMucmVhZGVyLnNldEluZGV4KGUpO3ZhciB0PWU7aWYodGhpcy5jaGVja1NpZ25hdHVyZShzLkNFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWFkQmxvY2tFbmRPZkNlbnRyYWwoKSx0aGlzLmRpc2tOdW1iZXI9PT1pLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9PT1pLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJTaXplPT09aS5NQVhfVkFMVUVfMzJCSVRTfHx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9PT1pLk1BWF9WQUxVRV8zMkJJVFMpe2lmKHRoaXMuemlwNjQ9ITAsKGU9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKSk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvclwiKTtpZih0aGlzLnJlYWRlci5zZXRJbmRleChlKSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiksdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IoKSwhdGhpcy5pc1NpZ25hdHVyZSh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIscy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpJiYodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI8MCkpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO3RoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCgpfXZhciByPXRoaXMuY2VudHJhbERpck9mZnNldCt0aGlzLmNlbnRyYWxEaXJTaXplO3RoaXMuemlwNjQmJihyKz0yMCxyKz0xMit0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZSk7dmFyIG49dC1yO2lmKDA8bil0aGlzLmlzU2lnbmF0dXJlKHQscy5DRU5UUkFMX0ZJTEVfSEVBREVSKXx8KHRoaXMucmVhZGVyLnplcm89bik7ZWxzZSBpZihuPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogbWlzc2luZyBcIitNYXRoLmFicyhuKStcIiBieXRlcy5cIil9LHByZXBhcmVSZWFkZXI6ZnVuY3Rpb24oZSl7dGhpcy5yZWFkZXI9bihlKX0sbG9hZDpmdW5jdGlvbihlKXt0aGlzLnByZXBhcmVSZWFkZXIoZSksdGhpcy5yZWFkRW5kT2ZDZW50cmFsKCksdGhpcy5yZWFkQ2VudHJhbERpcigpLHRoaXMucmVhZExvY2FsRmlsZXMoKX19LHQuZXhwb3J0cz1ofSx7XCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc2lnbmF0dXJlXCI6MjMsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMixcIi4vemlwRW50cnlcIjozNH1dLDM0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxzPWUoXCIuL3V0aWxzXCIpLGk9ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxhPWUoXCIuL2NyYzMyXCIpLG89ZShcIi4vdXRmOFwiKSxoPWUoXCIuL2NvbXByZXNzaW9uc1wiKSx1PWUoXCIuL3N1cHBvcnRcIik7ZnVuY3Rpb24gbChlLHQpe3RoaXMub3B0aW9ucz1lLHRoaXMubG9hZE9wdGlvbnM9dH1sLnByb3RvdHlwZT17aXNFbmNyeXB0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09KDEmdGhpcy5iaXRGbGFnKX0sdXNlVVRGODpmdW5jdGlvbigpe3JldHVybiAyMDQ4PT0oMjA0OCZ0aGlzLmJpdEZsYWcpfSxyZWFkTG9jYWxQYXJ0OmZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoZS5za2lwKDIyKSx0aGlzLmZpbGVOYW1lTGVuZ3RoPWUucmVhZEludCgyKSxyPWUucmVhZEludCgyKSx0aGlzLmZpbGVOYW1lPWUucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCksZS5za2lwKHIpLC0xPT09dGhpcy5jb21wcmVzc2VkU2l6ZXx8LTE9PT10aGlzLnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIG9yIGNvcnJ1cHRlZCB6aXAgOiBkaWRuJ3QgZ2V0IGVub3VnaCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAoY29tcHJlc3NlZFNpemUgPT09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT09IC0xKVwiKTtpZihudWxsPT09KHQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGgpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGgsdCkmJmhbdF0ubWFnaWM9PT1lKXJldHVybiBoW3RdO3JldHVybiBudWxsfSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSkpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IGNvbXByZXNzaW9uIFwiK3MucHJldHR5KHRoaXMuY29tcHJlc3Npb25NZXRob2QpK1wiIHVua25vd24gKGlubmVyIGZpbGUgOiBcIitzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5maWxlTmFtZSkrXCIpXCIpO3RoaXMuZGVjb21wcmVzc2VkPW5ldyBpKHRoaXMuY29tcHJlc3NlZFNpemUsdGhpcy51bmNvbXByZXNzZWRTaXplLHRoaXMuY3JjMzIsdCxlLnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKX0scmVhZENlbnRyYWxQYXJ0OmZ1bmN0aW9uKGUpe3RoaXMudmVyc2lvbk1hZGVCeT1lLnJlYWRJbnQoMiksZS5za2lwKDIpLHRoaXMuYml0RmxhZz1lLnJlYWRJbnQoMiksdGhpcy5jb21wcmVzc2lvbk1ldGhvZD1lLnJlYWRTdHJpbmcoMiksdGhpcy5kYXRlPWUucmVhZERhdGUoKSx0aGlzLmNyYzMyPWUucmVhZEludCg0KSx0aGlzLmNvbXByZXNzZWRTaXplPWUucmVhZEludCg0KSx0aGlzLnVuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDQpO3ZhciB0PWUucmVhZEludCgyKTtpZih0aGlzLmV4dHJhRmllbGRzTGVuZ3RoPWUucmVhZEludCgyKSx0aGlzLmZpbGVDb21tZW50TGVuZ3RoPWUucmVhZEludCgyKSx0aGlzLmRpc2tOdW1iZXJTdGFydD1lLnJlYWRJbnQoMiksdGhpcy5pbnRlcm5hbEZpbGVBdHRyaWJ1dGVzPWUucmVhZEludCgyKSx0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM9ZS5yZWFkSW50KDQpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9ZS5yZWFkSW50KDQpLHRoaXMuaXNFbmNyeXB0ZWQoKSl0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO2Uuc2tpcCh0KSx0aGlzLnJlYWRFeHRyYUZpZWxkcyhlKSx0aGlzLnBhcnNlWklQNjRFeHRyYUZpZWxkKGUpLHRoaXMuZmlsZUNvbW1lbnQ9ZS5yZWFkRGF0YSh0aGlzLmZpbGVDb21tZW50TGVuZ3RoKX0scHJvY2Vzc0F0dHJpYnV0ZXM6ZnVuY3Rpb24oKXt0aGlzLnVuaXhQZXJtaXNzaW9ucz1udWxsLHRoaXMuZG9zUGVybWlzc2lvbnM9bnVsbDt2YXIgZT10aGlzLnZlcnNpb25NYWRlQnk+Pjg7dGhpcy5kaXI9ISEoMTYmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwwPT1lJiYodGhpcy5kb3NQZXJtaXNzaW9ucz02MyZ0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMpLDM9PWUmJih0aGlzLnVuaXhQZXJtaXNzaW9ucz10aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM+PjE2JjY1NTM1KSx0aGlzLmRpcnx8XCIvXCIhPT10aGlzLmZpbGVOYW1lU3RyLnNsaWNlKC0xKXx8KHRoaXMuZGlyPSEwKX0scGFyc2VaSVA2NEV4dHJhRmllbGQ6ZnVuY3Rpb24oKXtpZih0aGlzLmV4dHJhRmllbGRzWzFdKXt2YXIgZT1uKHRoaXMuZXh0cmFGaWVsZHNbMV0udmFsdWUpO3RoaXMudW5jb21wcmVzc2VkU2l6ZT09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMudW5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmNvbXByZXNzZWRTaXplPWUucmVhZEludCg4KSksdGhpcy5sb2NhbEhlYWRlck9mZnNldD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9ZS5yZWFkSW50KDgpKSx0aGlzLmRpc2tOdW1iZXJTdGFydD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMuZGlza051bWJlclN0YXJ0PWUucmVhZEludCg0KSl9fSxyZWFkRXh0cmFGaWVsZHM6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGk9ZS5pbmRleCt0aGlzLmV4dHJhRmllbGRzTGVuZ3RoO2Zvcih0aGlzLmV4dHJhRmllbGRzfHwodGhpcy5leHRyYUZpZWxkcz17fSk7ZS5pbmRleCs0PGk7KXQ9ZS5yZWFkSW50KDIpLHI9ZS5yZWFkSW50KDIpLG49ZS5yZWFkRGF0YShyKSx0aGlzLmV4dHJhRmllbGRzW3RdPXtpZDp0LGxlbmd0aDpyLHZhbHVlOm59O2Uuc2V0SW5kZXgoaSl9LGhhbmRsZVVURjg6ZnVuY3Rpb24oKXt2YXIgZT11LnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiO2lmKHRoaXMudXNlVVRGOCgpKXRoaXMuZmlsZU5hbWVTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZU5hbWUpLHRoaXMuZmlsZUNvbW1lbnRTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZUNvbW1lbnQpO2Vsc2V7dmFyIHQ9dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoKCk7aWYobnVsbCE9PXQpdGhpcy5maWxlTmFtZVN0cj10O2Vsc2V7dmFyIHI9cy50cmFuc2Zvcm1UbyhlLHRoaXMuZmlsZU5hbWUpO3RoaXMuZmlsZU5hbWVTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyKX12YXIgbj10aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTtpZihudWxsIT09bil0aGlzLmZpbGVDb21tZW50U3RyPW47ZWxzZXt2YXIgaT1zLnRyYW5zZm9ybVRvKGUsdGhpcy5maWxlQ29tbWVudCk7dGhpcy5maWxlQ29tbWVudFN0cj10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKGkpfX19LGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmV4dHJhRmllbGRzWzI4Nzg5XTtpZihlKXt2YXIgdD1uKGUudmFsdWUpO3JldHVybiAxIT09dC5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVOYW1lKSE9PXQucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZSh0LnJlYWREYXRhKGUubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH0sZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZXh0cmFGaWVsZHNbMjU0NjFdO2lmKGUpe3ZhciB0PW4oZS52YWx1ZSk7cmV0dXJuIDEhPT10LnJlYWRJbnQoMSk/bnVsbDphKHRoaXMuZmlsZUNvbW1lbnQpIT09dC5yZWFkSW50KDQpP251bGw6by51dGY4ZGVjb2RlKHQucmVhZERhdGEoZS5sZW5ndGgtNSkpfXJldHVybiBudWxsfX0sdC5leHBvcnRzPWx9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2NvbXByZXNzaW9uc1wiOjMsXCIuL2NyYzMyXCI6NCxcIi4vcmVhZGVyL3JlYWRlckZvclwiOjIyLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMn1dLDM1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQscil7dGhpcy5uYW1lPWUsdGhpcy5kaXI9ci5kaXIsdGhpcy5kYXRlPXIuZGF0ZSx0aGlzLmNvbW1lbnQ9ci5jb21tZW50LHRoaXMudW5peFBlcm1pc3Npb25zPXIudW5peFBlcm1pc3Npb25zLHRoaXMuZG9zUGVybWlzc2lvbnM9ci5kb3NQZXJtaXNzaW9ucyx0aGlzLl9kYXRhPXQsdGhpcy5fZGF0YUJpbmFyeT1yLmJpbmFyeSx0aGlzLm9wdGlvbnM9e2NvbXByZXNzaW9uOnIuY29tcHJlc3Npb24sY29tcHJlc3Npb25PcHRpb25zOnIuY29tcHJlc3Npb25PcHRpb25zfX12YXIgcz1lKFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCIpLGk9ZShcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIiksYT1lKFwiLi91dGY4XCIpLG89ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxoPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO24ucHJvdG90eXBlPXtpbnRlcm5hbFN0cmVhbTpmdW5jdGlvbihlKXt2YXIgdD1udWxsLHI9XCJzdHJpbmdcIjt0cnl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLlwiKTt2YXIgbj1cInN0cmluZ1wiPT09KHI9ZS50b0xvd2VyQ2FzZSgpKXx8XCJ0ZXh0XCI9PT1yO1wiYmluYXJ5c3RyaW5nXCIhPT1yJiZcInRleHRcIiE9PXJ8fChyPVwic3RyaW5nXCIpLHQ9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3ZhciBpPSF0aGlzLl9kYXRhQmluYXJ5O2kmJiFuJiYodD10LnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLCFpJiZuJiYodD10LnBpcGUobmV3IGEuVXRmOERlY29kZVdvcmtlcikpfWNhdGNoKGUpeyh0PW5ldyBoKFwiZXJyb3JcIikpLmVycm9yKGUpfXJldHVybiBuZXcgcyh0LHIsXCJcIil9LGFzeW5jOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaW50ZXJuYWxTdHJlYW0oZSkuYWNjdW11bGF0ZSh0KX0sbm9kZVN0cmVhbTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGV8fFwibm9kZWJ1ZmZlclwiKS50b05vZGVqc1N0cmVhbSh0KX0sX2NvbXByZXNzV29ya2VyOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8mJnRoaXMuX2RhdGEuY29tcHJlc3Npb24ubWFnaWM9PT1lLm1hZ2ljKXJldHVybiB0aGlzLl9kYXRhLmdldENvbXByZXNzZWRXb3JrZXIoKTt2YXIgcj10aGlzLl9kZWNvbXByZXNzV29ya2VyKCk7cmV0dXJuIHRoaXMuX2RhdGFCaW5hcnl8fChyPXIucGlwZShuZXcgYS5VdGY4RW5jb2RlV29ya2VyKSksby5jcmVhdGVXb3JrZXJGcm9tKHIsZSx0KX0sX2RlY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8/dGhpcy5fZGF0YS5nZXRDb250ZW50V29ya2VyKCk6dGhpcy5fZGF0YSBpbnN0YW5jZW9mIGg/dGhpcy5fZGF0YTpuZXcgaSh0aGlzLl9kYXRhKX19O2Zvcih2YXIgdT1bXCJhc1RleHRcIixcImFzQmluYXJ5XCIsXCJhc05vZGVCdWZmZXJcIixcImFzVWludDhBcnJheVwiLFwiYXNBcnJheUJ1ZmZlclwiXSxsPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGY9MDtmPHUubGVuZ3RoO2YrKyluLnByb3RvdHlwZVt1W2ZdXT1sO3QuZXhwb3J0cz1ufSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiOjI3LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCI6MjksXCIuL3V0ZjhcIjozMX1dLDM2OltmdW5jdGlvbihlLGwsdCl7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByLG4sZT10Lk11dGF0aW9uT2JzZXJ2ZXJ8fHQuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtpZihlKXt2YXIgaT0wLHM9bmV3IGUodSksYT10LmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO3Mub2JzZXJ2ZShhLHtjaGFyYWN0ZXJEYXRhOiEwfSkscj1mdW5jdGlvbigpe2EuZGF0YT1pPSsraSUyfX1lbHNlIGlmKHQuc2V0SW1tZWRpYXRlfHx2b2lkIDA9PT10Lk1lc3NhZ2VDaGFubmVsKXI9XCJkb2N1bWVudFwiaW4gdCYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIHQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKT9mdW5jdGlvbigpe3ZhciBlPXQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtlLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3UoKSxlLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxlPW51bGx9LHQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGUpfTpmdW5jdGlvbigpe3NldFRpbWVvdXQodSwwKX07ZWxzZXt2YXIgbz1uZXcgdC5NZXNzYWdlQ2hhbm5lbDtvLnBvcnQxLm9ubWVzc2FnZT11LHI9ZnVuY3Rpb24oKXtvLnBvcnQyLnBvc3RNZXNzYWdlKDApfX12YXIgaD1bXTtmdW5jdGlvbiB1KCl7dmFyIGUsdDtuPSEwO2Zvcih2YXIgcj1oLmxlbmd0aDtyOyl7Zm9yKHQ9aCxoPVtdLGU9LTE7KytlPHI7KXRbZV0oKTtyPWgubGVuZ3RofW49ITF9bC5leHBvcnRzPWZ1bmN0aW9uKGUpezEhPT1oLnB1c2goZSl8fG58fHIoKX19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJpbW1lZGlhdGVcIik7ZnVuY3Rpb24gdSgpe312YXIgbD17fSxzPVtcIlJFSkVDVEVEXCJdLGE9W1wiRlVMRklMTEVEXCJdLG49W1wiUEVORElOR1wiXTtmdW5jdGlvbiBvKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt0aGlzLnN0YXRlPW4sdGhpcy5xdWV1ZT1bXSx0aGlzLm91dGNvbWU9dm9pZCAwLGUhPT11JiZkKHRoaXMsZSl9ZnVuY3Rpb24gaChlLHQscil7dGhpcy5wcm9taXNlPWUsXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXMub25GdWxmaWxsZWQ9dCx0aGlzLmNhbGxGdWxmaWxsZWQ9dGhpcy5vdGhlckNhbGxGdWxmaWxsZWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJih0aGlzLm9uUmVqZWN0ZWQ9cix0aGlzLmNhbGxSZWplY3RlZD10aGlzLm90aGVyQ2FsbFJlamVjdGVkKX1mdW5jdGlvbiBmKHQscixuKXtpKGZ1bmN0aW9uKCl7dmFyIGU7dHJ5e2U9cihuKX1jYXRjaChlKXtyZXR1cm4gbC5yZWplY3QodCxlKX1lPT09dD9sLnJlamVjdCh0LG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKTpsLnJlc29sdmUodCxlKX0pfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9ZSYmZS50aGVuO2lmKGUmJihcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIGZ1bmN0aW9uKCl7dC5hcHBseShlLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGQodCxlKXt2YXIgcj0hMTtmdW5jdGlvbiBuKGUpe3J8fChyPSEwLGwucmVqZWN0KHQsZSkpfWZ1bmN0aW9uIGkoZSl7cnx8KHI9ITAsbC5yZXNvbHZlKHQsZSkpfXZhciBzPXAoZnVuY3Rpb24oKXtlKGksbil9KTtcImVycm9yXCI9PT1zLnN0YXR1cyYmbihzLnZhbHVlKX1mdW5jdGlvbiBwKGUsdCl7dmFyIHI9e307dHJ5e3IudmFsdWU9ZSh0KSxyLnN0YXR1cz1cInN1Y2Nlc3NcIn1jYXRjaChlKXtyLnN0YXR1cz1cImVycm9yXCIsci52YWx1ZT1lfXJldHVybiByfSh0LmV4cG9ydHM9bykucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdClyZXR1cm4gdGhpczt2YXIgcj10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVzb2x2ZSh0KCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfSxmdW5jdGlvbihlKXtyZXR1cm4gci5yZXNvbHZlKHQoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IGV9KX0pfSxvLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsZSl9LG8ucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZ0aGlzLnN0YXRlPT09YXx8XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmdGhpcy5zdGF0ZT09PXMpcmV0dXJuIHRoaXM7dmFyIHI9bmV3IHRoaXMuY29uc3RydWN0b3IodSk7dGhpcy5zdGF0ZSE9PW4/ZihyLHRoaXMuc3RhdGU9PT1hP2U6dCx0aGlzLm91dGNvbWUpOnRoaXMucXVldWUucHVzaChuZXcgaChyLGUsdCkpO3JldHVybiByfSxoLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkPWZ1bmN0aW9uKGUpe2wucmVzb2x2ZSh0aGlzLnByb21pc2UsZSl9LGgucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZD1mdW5jdGlvbihlKXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uRnVsZmlsbGVkLGUpfSxoLnByb3RvdHlwZS5jYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7bC5yZWplY3QodGhpcy5wcm9taXNlLGUpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZD1mdW5jdGlvbihlKXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uUmVqZWN0ZWQsZSl9LGwucmVzb2x2ZT1mdW5jdGlvbihlLHQpe3ZhciByPXAoYyx0KTtpZihcImVycm9yXCI9PT1yLnN0YXR1cylyZXR1cm4gbC5yZWplY3QoZSxyLnZhbHVlKTt2YXIgbj1yLnZhbHVlO2lmKG4pZChlLG4pO2Vsc2V7ZS5zdGF0ZT1hLGUub3V0Y29tZT10O2Zvcih2YXIgaT0tMSxzPWUucXVldWUubGVuZ3RoOysraTxzOyllLnF1ZXVlW2ldLmNhbGxGdWxmaWxsZWQodCl9cmV0dXJuIGV9LGwucmVqZWN0PWZ1bmN0aW9uKGUsdCl7ZS5zdGF0ZT1zLGUub3V0Y29tZT10O2Zvcih2YXIgcj0tMSxuPWUucXVldWUubGVuZ3RoOysrcjxuOyllLnF1ZXVlW3JdLmNhbGxSZWplY3RlZCh0KTtyZXR1cm4gZX0sby5yZXNvbHZlPWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiB0aGlzKXJldHVybiBlO3JldHVybiBsLnJlc29sdmUobmV3IHRoaXModSksZSl9LG8ucmVqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyB0aGlzKHUpO3JldHVybiBsLnJlamVjdCh0LGUpfSxvLmFsbD1mdW5jdGlvbihlKXt2YXIgcj10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciBuPWUubGVuZ3RoLGk9ITE7aWYoIW4pcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIHM9bmV3IEFycmF5KG4pLGE9MCx0PS0xLG89bmV3IHRoaXModSk7Zm9yKDsrK3Q8bjspaChlW3RdLHQpO3JldHVybiBvO2Z1bmN0aW9uIGgoZSx0KXtyLnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihlKXtzW3RdPWUsKythIT09bnx8aXx8KGk9ITAsbC5yZXNvbHZlKG8scykpfSxmdW5jdGlvbihlKXtpfHwoaT0hMCxsLnJlamVjdChvLGUpKX0pfX0sby5yYWNlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoXCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwibXVzdCBiZSBhbiBhcnJheVwiKSk7dmFyIHI9ZS5sZW5ndGgsbj0hMTtpZighcilyZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTt2YXIgaT0tMSxzPW5ldyB0aGlzKHUpO2Zvcig7KytpPHI7KWE9ZVtpXSx0LnJlc29sdmUoYSkudGhlbihmdW5jdGlvbihlKXtufHwobj0hMCxsLnJlc29sdmUocyxlKSl9LGZ1bmN0aW9uKGUpe258fChuPSEwLGwucmVqZWN0KHMsZSkpfSk7dmFyIGE7cmV0dXJuIHN9fSx7aW1tZWRpYXRlOjM2fV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTsoMCxlKFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikobixlKFwiLi9saWIvZGVmbGF0ZVwiKSxlKFwiLi9saWIvaW5mbGF0ZVwiKSxlKFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLHQuZXhwb3J0cz1ufSx7XCIuL2xpYi9kZWZsYXRlXCI6MzksXCIuL2xpYi9pbmZsYXRlXCI6NDAsXCIuL2xpYi91dGlscy9jb21tb25cIjo0MSxcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6NDR9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBhPWUoXCIuL3psaWIvZGVmbGF0ZVwiKSxvPWUoXCIuL3V0aWxzL2NvbW1vblwiKSxoPWUoXCIuL3V0aWxzL3N0cmluZ3NcIiksaT1lKFwiLi96bGliL21lc3NhZ2VzXCIpLHM9ZShcIi4vemxpYi96c3RyZWFtXCIpLHU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxsPTAsZj0tMSxjPTAsZD04O2Z1bmN0aW9uIHAoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcCkpcmV0dXJuIG5ldyBwKGUpO3RoaXMub3B0aW9ucz1vLmFzc2lnbih7bGV2ZWw6ZixtZXRob2Q6ZCxjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5OmMsdG86XCJcIn0sZXx8e30pO3ZhciB0PXRoaXMub3B0aW9uczt0LnJhdyYmMDx0LndpbmRvd0JpdHM/dC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHM6dC5nemlwJiYwPHQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzKz0xNiksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBzLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1hLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sdC5sZXZlbCx0Lm1ldGhvZCx0LndpbmRvd0JpdHMsdC5tZW1MZXZlbCx0LnN0cmF0ZWd5KTtpZihyIT09bCl0aHJvdyBuZXcgRXJyb3IoaVtyXSk7aWYodC5oZWFkZXImJmEuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sdC5oZWFkZXIpLHQuZGljdGlvbmFyeSl7dmFyIG47aWYobj1cInN0cmluZ1wiPT10eXBlb2YgdC5kaWN0aW9uYXJ5P2guc3RyaW5nMmJ1Zih0LmRpY3Rpb25hcnkpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXUuY2FsbCh0LmRpY3Rpb25hcnkpP25ldyBVaW50OEFycmF5KHQuZGljdGlvbmFyeSk6dC5kaWN0aW9uYXJ5LChyPWEuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG4pKSE9PWwpdGhyb3cgbmV3IEVycm9yKGlbcl0pO3RoaXMuX2RpY3Rfc2V0PSEwfX1mdW5jdGlvbiBuKGUsdCl7dmFyIHI9bmV3IHAodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxpW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9cC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saT10aGlzLnN0cm0scz10aGlzLm9wdGlvbnMuY2h1bmtTaXplO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10PzQ6MCxcInN0cmluZ1wiPT10eXBlb2YgZT9pLmlucHV0PWguc3RyaW5nMmJ1ZihlKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwoZSk/aS5pbnB1dD1uZXcgVWludDhBcnJheShlKTppLmlucHV0PWUsaS5uZXh0X2luPTAsaS5hdmFpbF9pbj1pLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aS5hdmFpbF9vdXQmJihpLm91dHB1dD1uZXcgby5CdWY4KHMpLGkubmV4dF9vdXQ9MCxpLmF2YWlsX291dD1zKSwxIT09KHI9YS5kZWZsYXRlKGksbikpJiZyIT09bClyZXR1cm4gdGhpcy5vbkVuZChyKSwhKHRoaXMuZW5kZWQ9ITApOzAhPT1pLmF2YWlsX291dCYmKDAhPT1pLmF2YWlsX2lufHw0IT09biYmMiE9PW4pfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz90aGlzLm9uRGF0YShoLmJ1ZjJiaW5zdHJpbmcoby5zaHJpbmtCdWYoaS5vdXRwdXQsaS5uZXh0X291dCkpKTp0aGlzLm9uRGF0YShvLnNocmlua0J1ZihpLm91dHB1dCxpLm5leHRfb3V0KSkpfXdoaWxlKCgwPGkuYXZhaWxfaW58fDA9PT1pLmF2YWlsX291dCkmJjEhPT1yKTtyZXR1cm4gND09PW4/KHI9YS5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1sKToyIT09bnx8KHRoaXMub25FbmQobCksIShpLmF2YWlsX291dD0wKSl9LHAucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNodW5rcy5wdXNoKGUpfSxwLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihlKXtlPT09bCYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1vLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuRGVmbGF0ZT1wLHIuZGVmbGF0ZT1uLHIuZGVmbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsbihlLHQpfSxyLmd6aXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkuZ3ppcD0hMCxuKGUsdCl9fSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvZGVmbGF0ZVwiOjQ2LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYz1lKFwiLi96bGliL2luZmxhdGVcIiksZD1lKFwiLi91dGlscy9jb21tb25cIikscD1lKFwiLi91dGlscy9zdHJpbmdzXCIpLG09ZShcIi4vemxpYi9jb25zdGFudHNcIiksbj1lKFwiLi96bGliL21lc3NhZ2VzXCIpLGk9ZShcIi4vemxpYi96c3RyZWFtXCIpLHM9ZShcIi4vemxpYi9nemhlYWRlclwiKSxfPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gYShlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBhKSlyZXR1cm4gbmV3IGEoZSk7dGhpcy5vcHRpb25zPWQuYXNzaWduKHtjaHVua1NpemU6MTYzODQsd2luZG93Qml0czowLHRvOlwiXCJ9LGV8fHt9KTt2YXIgdD10aGlzLm9wdGlvbnM7dC5yYXcmJjA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHMsMD09PXQud2luZG93Qml0cyYmKHQud2luZG93Qml0cz0tMTUpKSwhKDA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2KXx8ZSYmZS53aW5kb3dCaXRzfHwodC53aW5kb3dCaXRzKz0zMiksMTU8dC53aW5kb3dCaXRzJiZ0LndpbmRvd0JpdHM8NDgmJjA9PSgxNSZ0LndpbmRvd0JpdHMpJiYodC53aW5kb3dCaXRzfD0xNSksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBpLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1jLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sdC53aW5kb3dCaXRzKTtpZihyIT09bS5aX09LKXRocm93IG5ldyBFcnJvcihuW3JdKTt0aGlzLmhlYWRlcj1uZXcgcyxjLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLHRoaXMuaGVhZGVyKX1mdW5jdGlvbiBvKGUsdCl7dmFyIHI9bmV3IGEodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxuW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9YS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoPXRoaXMuc3RybSx1PXRoaXMub3B0aW9ucy5jaHVua1NpemUsbD10aGlzLm9wdGlvbnMuZGljdGlvbmFyeSxmPSExO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10P20uWl9GSU5JU0g6bS5aX05PX0ZMVVNILFwic3RyaW5nXCI9PXR5cGVvZiBlP2guaW5wdXQ9cC5iaW5zdHJpbmcyYnVmKGUpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChlKT9oLmlucHV0PW5ldyBVaW50OEFycmF5KGUpOmguaW5wdXQ9ZSxoLm5leHRfaW49MCxoLmF2YWlsX2luPWguaW5wdXQubGVuZ3RoO2Rve2lmKDA9PT1oLmF2YWlsX291dCYmKGgub3V0cHV0PW5ldyBkLkJ1ZjgodSksaC5uZXh0X291dD0wLGguYXZhaWxfb3V0PXUpLChyPWMuaW5mbGF0ZShoLG0uWl9OT19GTFVTSCkpPT09bS5aX05FRURfRElDVCYmbCYmKG89XCJzdHJpbmdcIj09dHlwZW9mIGw/cC5zdHJpbmcyYnVmKGwpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChsKT9uZXcgVWludDhBcnJheShsKTpsLHI9Yy5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sbykpLHI9PT1tLlpfQlVGX0VSUk9SJiYhMD09PWYmJihyPW0uWl9PSyxmPSExKSxyIT09bS5aX1NUUkVBTV9FTkQmJnIhPT1tLlpfT0spcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTtoLm5leHRfb3V0JiYoMCE9PWguYXZhaWxfb3V0JiZyIT09bS5aX1NUUkVBTV9FTkQmJigwIT09aC5hdmFpbF9pbnx8biE9PW0uWl9GSU5JU0gmJm4hPT1tLlpfU1lOQ19GTFVTSCl8fChcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvPyhpPXAudXRmOGJvcmRlcihoLm91dHB1dCxoLm5leHRfb3V0KSxzPWgubmV4dF9vdXQtaSxhPXAuYnVmMnN0cmluZyhoLm91dHB1dCxpKSxoLm5leHRfb3V0PXMsaC5hdmFpbF9vdXQ9dS1zLHMmJmQuYXJyYXlTZXQoaC5vdXRwdXQsaC5vdXRwdXQsaSxzLDApLHRoaXMub25EYXRhKGEpKTp0aGlzLm9uRGF0YShkLnNocmlua0J1ZihoLm91dHB1dCxoLm5leHRfb3V0KSkpKSwwPT09aC5hdmFpbF9pbiYmMD09PWguYXZhaWxfb3V0JiYoZj0hMCl9d2hpbGUoKDA8aC5hdmFpbF9pbnx8MD09PWguYXZhaWxfb3V0KSYmciE9PW0uWl9TVFJFQU1fRU5EKTtyZXR1cm4gcj09PW0uWl9TVFJFQU1fRU5EJiYobj1tLlpfRklOSVNIKSxuPT09bS5aX0ZJTklTSD8ocj1jLmluZmxhdGVFbmQodGhpcy5zdHJtKSx0aGlzLm9uRW5kKHIpLHRoaXMuZW5kZWQ9ITAscj09PW0uWl9PSyk6biE9PW0uWl9TWU5DX0ZMVVNIfHwodGhpcy5vbkVuZChtLlpfT0spLCEoaC5hdmFpbF9vdXQ9MCkpfSxhLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0sYS5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PW0uWl9PSyYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1kLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuSW5mbGF0ZT1hLHIuaW5mbGF0ZT1vLHIuaW5mbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsbyhlLHQpfSxyLnVuZ3ppcD1vfSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvY29uc3RhbnRzXCI6NDQsXCIuL3psaWIvZ3poZWFkZXJcIjo0NyxcIi4vemxpYi9pbmZsYXRlXCI6NDksXCIuL3psaWIvbWVzc2FnZXNcIjo1MSxcIi4vemxpYi96c3RyZWFtXCI6NTN9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBJbnQzMkFycmF5O3IuYXNzaWduPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7dC5sZW5ndGg7KXt2YXIgcj10LnNoaWZ0KCk7aWYocil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wibXVzdCBiZSBub24tb2JqZWN0XCIpO2Zvcih2YXIgbiBpbiByKXIuaGFzT3duUHJvcGVydHkobikmJihlW25dPXJbbl0pfX1yZXR1cm4gZX0sci5zaHJpbmtCdWY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5sZW5ndGg9PT10P2U6ZS5zdWJhcnJheT9lLnN1YmFycmF5KDAsdCk6KGUubGVuZ3RoPXQsZSl9O3ZhciBpPXthcnJheVNldDpmdW5jdGlvbihlLHQscixuLGkpe2lmKHQuc3ViYXJyYXkmJmUuc3ViYXJyYXkpZS5zZXQodC5zdWJhcnJheShyLHIrbiksaSk7ZWxzZSBmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhO2Zvcih0PW49MCxyPWUubGVuZ3RoO3Q8cjt0Kyspbis9ZVt0XS5sZW5ndGg7Zm9yKGE9bmV3IFVpbnQ4QXJyYXkobiksdD1pPTAscj1lLmxlbmd0aDt0PHI7dCsrKXM9ZVt0XSxhLnNldChzLGkpLGkrPXMubGVuZ3RoO3JldHVybiBhfX0scz17YXJyYXlTZXQ6ZnVuY3Rpb24oZSx0LHIsbixpKXtmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7cmV0dXJuW10uY29uY2F0LmFwcGx5KFtdLGUpfX07ci5zZXRUeXBlZD1mdW5jdGlvbihlKXtlPyhyLkJ1Zjg9VWludDhBcnJheSxyLkJ1ZjE2PVVpbnQxNkFycmF5LHIuQnVmMzI9SW50MzJBcnJheSxyLmFzc2lnbihyLGkpKTooci5CdWY4PUFycmF5LHIuQnVmMTY9QXJyYXksci5CdWYzMj1BcnJheSxyLmFzc2lnbihyLHMpKX0sci5zZXRUeXBlZChuKX0se31dLDQyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGg9ZShcIi4vY29tbW9uXCIpLGk9ITAscz0hMDt0cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLFswXSl9Y2F0Y2goZSl7aT0hMX10cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKX1jYXRjaChlKXtzPSExfWZvcih2YXIgdT1uZXcgaC5CdWY4KDI1Niksbj0wO248MjU2O24rKyl1W25dPTI1Mjw9bj82OjI0ODw9bj81OjI0MDw9bj80OjIyNDw9bj8zOjE5Mjw9bj8yOjE7ZnVuY3Rpb24gbChlLHQpe2lmKHQ8NjU1MzcmJihlLnN1YmFycmF5JiZzfHwhZS5zdWJhcnJheSYmaSkpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxoLnNocmlua0J1ZihlLHQpKTtmb3IodmFyIHI9XCJcIixuPTA7bjx0O24rKylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbbl0pO3JldHVybiByfXVbMjU0XT11WzI1NF09MSxyLnN0cmluZzJidWY9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhPWUubGVuZ3RoLG89MDtmb3IoaT0wO2k8YTtpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPGEmJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxvKz1yPDEyOD8xOnI8MjA0OD8yOnI8NjU1MzY/Mzo0O2Zvcih0PW5ldyBoLkJ1ZjgobyksaT1zPTA7czxvO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8YSYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLHI8MTI4P3RbcysrXT1yOihyPDIwNDg/dFtzKytdPTE5MnxyPj4+Njoocjw2NTUzNj90W3MrK109MjI0fHI+Pj4xMjoodFtzKytdPTI0MHxyPj4+MTgsdFtzKytdPTEyOHxyPj4+MTImNjMpLHRbcysrXT0xMjh8cj4+PjYmNjMpLHRbcysrXT0xMjh8NjMmcik7cmV0dXJuIHR9LHIuYnVmMmJpbnN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gbChlLGUubGVuZ3RoKX0sci5iaW5zdHJpbmcyYnVmPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgaC5CdWY4KGUubGVuZ3RoKSxyPTAsbj10Lmxlbmd0aDtyPG47cisrKXRbcl09ZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fSxyLmJ1ZjJzdHJpbmc9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhPXR8fGUubGVuZ3RoLG89bmV3IEFycmF5KDIqYSk7Zm9yKHI9bj0wO3I8YTspaWYoKGk9ZVtyKytdKTwxMjgpb1tuKytdPWk7ZWxzZSBpZig0PChzPXVbaV0pKW9bbisrXT02NTUzMyxyKz1zLTE7ZWxzZXtmb3IoaSY9Mj09PXM/MzE6Mz09PXM/MTU6NzsxPHMmJnI8YTspaT1pPDw2fDYzJmVbcisrXSxzLS07MTxzP29bbisrXT02NTUzMzppPDY1NTM2P29bbisrXT1pOihpLT02NTUzNixvW24rK109NTUyOTZ8aT4+MTAmMTAyMyxvW24rK109NTYzMjB8MTAyMyZpKX1yZXR1cm4gbChvLG4pfSxyLnV0Zjhib3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fX0se1wiLi9jb21tb25cIjo0MX1dLDQzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4pe2Zvcih2YXIgaT02NTUzNSZlfDAscz1lPj4+MTYmNjU1MzV8MCxhPTA7MCE9PXI7KXtmb3Ioci09YT0yZTM8cj8yZTM6cjtzPXMrKGk9aSt0W24rK118MCl8MCwtLWE7KTtpJT02NTUyMSxzJT02NTUyMX1yZXR1cm4gaXxzPDwxNnwwfX0se31dLDQ0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXtaX05PX0ZMVVNIOjAsWl9QQVJUSUFMX0ZMVVNIOjEsWl9TWU5DX0ZMVVNIOjIsWl9GVUxMX0ZMVVNIOjMsWl9GSU5JU0g6NCxaX0JMT0NLOjUsWl9UUkVFUzo2LFpfT0s6MCxaX1NUUkVBTV9FTkQ6MSxaX05FRURfRElDVDoyLFpfRVJSTk86LTEsWl9TVFJFQU1fRVJST1I6LTIsWl9EQVRBX0VSUk9SOi0zLFpfQlVGX0VSUk9SOi01LFpfTk9fQ09NUFJFU1NJT046MCxaX0JFU1RfU1BFRUQ6MSxaX0JFU1RfQ09NUFJFU1NJT046OSxaX0RFRkFVTFRfQ09NUFJFU1NJT046LTEsWl9GSUxURVJFRDoxLFpfSFVGRk1BTl9PTkxZOjIsWl9STEU6MyxaX0ZJWEVEOjQsWl9ERUZBVUxUX1NUUkFURUdZOjAsWl9CSU5BUlk6MCxaX1RFWFQ6MSxaX1VOS05PV046MixaX0RFRkxBVEVEOjh9fSx7fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXt2YXIgaT1vLHM9bityO2VePS0xO2Zvcih2YXIgYT1uO2E8czthKyspZT1lPj4+OF5pWzI1NSYoZV50W2FdKV07cmV0dXJuLTFeZX19LHt9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBoLGM9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSx1PWUoXCIuL3RyZWVzXCIpLGQ9ZShcIi4vYWRsZXIzMlwiKSxwPWUoXCIuL2NyYzMyXCIpLG49ZShcIi4vbWVzc2FnZXNcIiksbD0wLGY9NCxtPTAsXz0tMixnPS0xLGI9NCxpPTIsdj04LHk9OSxzPTI4NixhPTMwLG89MTksdz0yKnMrMSxrPTE1LHg9MyxTPTI1OCx6PVMreCsxLEM9NDIsRT0xMTMsQT0xLEk9MixPPTMsQj00O2Z1bmN0aW9uIFIoZSx0KXtyZXR1cm4gZS5tc2c9blt0XSx0fWZ1bmN0aW9uIFQoZSl7cmV0dXJuKGU8PDEpLSg0PGU/OTowKX1mdW5jdGlvbiBEKGUpe2Zvcih2YXIgdD1lLmxlbmd0aDswPD0tLXQ7KWVbdF09MH1mdW5jdGlvbiBGKGUpe3ZhciB0PWUuc3RhdGUscj10LnBlbmRpbmc7cj5lLmF2YWlsX291dCYmKHI9ZS5hdmFpbF9vdXQpLDAhPT1yJiYoYy5hcnJheVNldChlLm91dHB1dCx0LnBlbmRpbmdfYnVmLHQucGVuZGluZ19vdXQscixlLm5leHRfb3V0KSxlLm5leHRfb3V0Kz1yLHQucGVuZGluZ19vdXQrPXIsZS50b3RhbF9vdXQrPXIsZS5hdmFpbF9vdXQtPXIsdC5wZW5kaW5nLT1yLDA9PT10LnBlbmRpbmcmJih0LnBlbmRpbmdfb3V0PTApKX1mdW5jdGlvbiBOKGUsdCl7dS5fdHJfZmx1c2hfYmxvY2soZSwwPD1lLmJsb2NrX3N0YXJ0P2UuYmxvY2tfc3RhcnQ6LTEsZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0LHQpLGUuYmxvY2tfc3RhcnQ9ZS5zdHJzdGFydCxGKGUuc3RybSl9ZnVuY3Rpb24gVShlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXR9ZnVuY3Rpb24gUChlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXQ+Pj44JjI1NSxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmdH1mdW5jdGlvbiBMKGUsdCl7dmFyIHIsbixpPWUubWF4X2NoYWluX2xlbmd0aCxzPWUuc3Ryc3RhcnQsYT1lLnByZXZfbGVuZ3RoLG89ZS5uaWNlX21hdGNoLGg9ZS5zdHJzdGFydD5lLndfc2l6ZS16P2Uuc3Ryc3RhcnQtKGUud19zaXplLXopOjAsdT1lLndpbmRvdyxsPWUud19tYXNrLGY9ZS5wcmV2LGM9ZS5zdHJzdGFydCtTLGQ9dVtzK2EtMV0scD11W3MrYV07ZS5wcmV2X2xlbmd0aD49ZS5nb29kX21hdGNoJiYoaT4+PTIpLG8+ZS5sb29rYWhlYWQmJihvPWUubG9va2FoZWFkKTtkb3tpZih1WyhyPXQpK2FdPT09cCYmdVtyK2EtMV09PT1kJiZ1W3JdPT09dVtzXSYmdVsrK3JdPT09dVtzKzFdKXtzKz0yLHIrKztkb3t9d2hpbGUodVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnM8Yyk7aWYobj1TLShjLXMpLHM9Yy1TLGE8bil7aWYoZS5tYXRjaF9zdGFydD10LG88PShhPW4pKWJyZWFrO2Q9dVtzK2EtMV0scD11W3MrYV19fX13aGlsZSgodD1mW3QmbF0pPmgmJjAhPS0taSk7cmV0dXJuIGE8PWUubG9va2FoZWFkP2E6ZS5sb29rYWhlYWR9ZnVuY3Rpb24gaihlKXt2YXIgdCxyLG4saSxzLGEsbyxoLHUsbCxmPWUud19zaXplO2Rve2lmKGk9ZS53aW5kb3dfc2l6ZS1lLmxvb2thaGVhZC1lLnN0cnN0YXJ0LGUuc3Ryc3RhcnQ+PWYrKGYteikpe2ZvcihjLmFycmF5U2V0KGUud2luZG93LGUud2luZG93LGYsZiwwKSxlLm1hdGNoX3N0YXJ0LT1mLGUuc3Ryc3RhcnQtPWYsZS5ibG9ja19zdGFydC09Zix0PXI9ZS5oYXNoX3NpemU7bj1lLmhlYWRbLS10XSxlLmhlYWRbdF09Zjw9bj9uLWY6MCwtLXI7KTtmb3IodD1yPWY7bj1lLnByZXZbLS10XSxlLnByZXZbdF09Zjw9bj9uLWY6MCwtLXI7KTtpKz1mfWlmKDA9PT1lLnN0cm0uYXZhaWxfaW4pYnJlYWs7aWYoYT1lLnN0cm0sbz1lLndpbmRvdyxoPWUuc3Ryc3RhcnQrZS5sb29rYWhlYWQsdT1pLGw9dm9pZCAwLGw9YS5hdmFpbF9pbix1PGwmJihsPXUpLHI9MD09PWw/MDooYS5hdmFpbF9pbi09bCxjLmFycmF5U2V0KG8sYS5pbnB1dCxhLm5leHRfaW4sbCxoKSwxPT09YS5zdGF0ZS53cmFwP2EuYWRsZXI9ZChhLmFkbGVyLG8sbCxoKToyPT09YS5zdGF0ZS53cmFwJiYoYS5hZGxlcj1wKGEuYWRsZXIsbyxsLGgpKSxhLm5leHRfaW4rPWwsYS50b3RhbF9pbis9bCxsKSxlLmxvb2thaGVhZCs9cixlLmxvb2thaGVhZCtlLmluc2VydD49eClmb3Iocz1lLnN0cnN0YXJ0LWUuaW5zZXJ0LGUuaW5zX2g9ZS53aW5kb3dbc10sZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MrMV0pJmUuaGFzaF9tYXNrO2UuaW5zZXJ0JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MreC0xXSkmZS5oYXNoX21hc2ssZS5wcmV2W3MmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09cyxzKyssZS5pbnNlcnQtLSwhKGUubG9va2FoZWFkK2UuaW5zZXJ0PHgpKTspO313aGlsZShlLmxvb2thaGVhZDx6JiYwIT09ZS5zdHJtLmF2YWlsX2luKX1mdW5jdGlvbiBaKGUsdCl7Zm9yKHZhciByLG47Oyl7aWYoZS5sb29rYWhlYWQ8eil7aWYoaihlKSxlLmxvb2thaGVhZDx6JiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj14JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSwwIT09ciYmZS5zdHJzdGFydC1yPD1lLndfc2l6ZS16JiYoZS5tYXRjaF9sZW5ndGg9TChlLHIpKSxlLm1hdGNoX2xlbmd0aD49eClpZihuPXUuX3RyX3RhbGx5KGUsZS5zdHJzdGFydC1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoLXgpLGUubG9va2FoZWFkLT1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aDw9ZS5tYXhfbGF6eV9tYXRjaCYmZS5sb29rYWhlYWQ+PXgpe2ZvcihlLm1hdGNoX2xlbmd0aC0tO2Uuc3Ryc3RhcnQrKyxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCt4LTFdKSZlLmhhc2hfbWFzayxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQsMCE9LS1lLm1hdGNoX2xlbmd0aDspO2Uuc3Ryc3RhcnQrK31lbHNlIGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTAsZS5pbnNfaD1lLndpbmRvd1tlLnN0cnN0YXJ0XSxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCsxXSkmZS5oYXNoX21hc2s7ZWxzZSBuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0Kys7aWYobiYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD1lLnN0cnN0YXJ0PHgtMT9lLnN0cnN0YXJ0OngtMSx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gVyhlLHQpe2Zvcih2YXIgcixuLGk7Oyl7aWYoZS5sb29rYWhlYWQ8eil7aWYoaihlKSxlLmxvb2thaGVhZDx6JiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj14JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSxlLnByZXZfbGVuZ3RoPWUubWF0Y2hfbGVuZ3RoLGUucHJldl9tYXRjaD1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoPXgtMSwwIT09ciYmZS5wcmV2X2xlbmd0aDxlLm1heF9sYXp5X21hdGNoJiZlLnN0cnN0YXJ0LXI8PWUud19zaXplLXomJihlLm1hdGNoX2xlbmd0aD1MKGUsciksZS5tYXRjaF9sZW5ndGg8PTUmJigxPT09ZS5zdHJhdGVneXx8ZS5tYXRjaF9sZW5ndGg9PT14JiY0MDk2PGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCkmJihlLm1hdGNoX2xlbmd0aD14LTEpKSxlLnByZXZfbGVuZ3RoPj14JiZlLm1hdGNoX2xlbmd0aDw9ZS5wcmV2X2xlbmd0aCl7Zm9yKGk9ZS5zdHJzdGFydCtlLmxvb2thaGVhZC14LG49dS5fdHJfdGFsbHkoZSxlLnN0cnN0YXJ0LTEtZS5wcmV2X21hdGNoLGUucHJldl9sZW5ndGgteCksZS5sb29rYWhlYWQtPWUucHJldl9sZW5ndGgtMSxlLnByZXZfbGVuZ3RoLT0yOysrZS5zdHJzdGFydDw9aSYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksMCE9LS1lLnByZXZfbGVuZ3RoOyk7aWYoZS5tYXRjaF9hdmFpbGFibGU9MCxlLm1hdGNoX2xlbmd0aD14LTEsZS5zdHJzdGFydCsrLG4mJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1lbHNlIGlmKGUubWF0Y2hfYXZhaWxhYmxlKXtpZigobj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSkpJiZOKGUsITEpLGUuc3Ryc3RhcnQrKyxlLmxvb2thaGVhZC0tLDA9PT1lLnN0cm0uYXZhaWxfb3V0KXJldHVybiBBfWVsc2UgZS5tYXRjaF9hdmFpbGFibGU9MSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLX1yZXR1cm4gZS5tYXRjaF9hdmFpbGFibGUmJihuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0LTFdKSxlLm1hdGNoX2F2YWlsYWJsZT0wKSxlLmluc2VydD1lLnN0cnN0YXJ0PHgtMT9lLnN0cnN0YXJ0OngtMSx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gTShlLHQscixuLGkpe3RoaXMuZ29vZF9sZW5ndGg9ZSx0aGlzLm1heF9sYXp5PXQsdGhpcy5uaWNlX2xlbmd0aD1yLHRoaXMubWF4X2NoYWluPW4sdGhpcy5mdW5jPWl9ZnVuY3Rpb24gSCgpe3RoaXMuc3RybT1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5wZW5kaW5nX2J1Zj1udWxsLHRoaXMucGVuZGluZ19idWZfc2l6ZT0wLHRoaXMucGVuZGluZ19vdXQ9MCx0aGlzLnBlbmRpbmc9MCx0aGlzLndyYXA9MCx0aGlzLmd6aGVhZD1udWxsLHRoaXMuZ3ppbmRleD0wLHRoaXMubWV0aG9kPXYsdGhpcy5sYXN0X2ZsdXNoPS0xLHRoaXMud19zaXplPTAsdGhpcy53X2JpdHM9MCx0aGlzLndfbWFzaz0wLHRoaXMud2luZG93PW51bGwsdGhpcy53aW5kb3dfc2l6ZT0wLHRoaXMucHJldj1udWxsLHRoaXMuaGVhZD1udWxsLHRoaXMuaW5zX2g9MCx0aGlzLmhhc2hfc2l6ZT0wLHRoaXMuaGFzaF9iaXRzPTAsdGhpcy5oYXNoX21hc2s9MCx0aGlzLmhhc2hfc2hpZnQ9MCx0aGlzLmJsb2NrX3N0YXJ0PTAsdGhpcy5tYXRjaF9sZW5ndGg9MCx0aGlzLnByZXZfbWF0Y2g9MCx0aGlzLm1hdGNoX2F2YWlsYWJsZT0wLHRoaXMuc3Ryc3RhcnQ9MCx0aGlzLm1hdGNoX3N0YXJ0PTAsdGhpcy5sb29rYWhlYWQ9MCx0aGlzLnByZXZfbGVuZ3RoPTAsdGhpcy5tYXhfY2hhaW5fbGVuZ3RoPTAsdGhpcy5tYXhfbGF6eV9tYXRjaD0wLHRoaXMubGV2ZWw9MCx0aGlzLnN0cmF0ZWd5PTAsdGhpcy5nb29kX21hdGNoPTAsdGhpcy5uaWNlX21hdGNoPTAsdGhpcy5keW5fbHRyZWU9bmV3IGMuQnVmMTYoMip3KSx0aGlzLmR5bl9kdHJlZT1uZXcgYy5CdWYxNigyKigyKmErMSkpLHRoaXMuYmxfdHJlZT1uZXcgYy5CdWYxNigyKigyKm8rMSkpLEQodGhpcy5keW5fbHRyZWUpLEQodGhpcy5keW5fZHRyZWUpLEQodGhpcy5ibF90cmVlKSx0aGlzLmxfZGVzYz1udWxsLHRoaXMuZF9kZXNjPW51bGwsdGhpcy5ibF9kZXNjPW51bGwsdGhpcy5ibF9jb3VudD1uZXcgYy5CdWYxNihrKzEpLHRoaXMuaGVhcD1uZXcgYy5CdWYxNigyKnMrMSksRCh0aGlzLmhlYXApLHRoaXMuaGVhcF9sZW49MCx0aGlzLmhlYXBfbWF4PTAsdGhpcy5kZXB0aD1uZXcgYy5CdWYxNigyKnMrMSksRCh0aGlzLmRlcHRoKSx0aGlzLmxfYnVmPTAsdGhpcy5saXRfYnVmc2l6ZT0wLHRoaXMubGFzdF9saXQ9MCx0aGlzLmRfYnVmPTAsdGhpcy5vcHRfbGVuPTAsdGhpcy5zdGF0aWNfbGVuPTAsdGhpcy5tYXRjaGVzPTAsdGhpcy5pbnNlcnQ9MCx0aGlzLmJpX2J1Zj0wLHRoaXMuYmlfdmFsaWQ9MH1mdW5jdGlvbiBHKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyhlLnRvdGFsX2luPWUudG90YWxfb3V0PTAsZS5kYXRhX3R5cGU9aSwodD1lLnN0YXRlKS5wZW5kaW5nPTAsdC5wZW5kaW5nX291dD0wLHQud3JhcDwwJiYodC53cmFwPS10LndyYXApLHQuc3RhdHVzPXQud3JhcD9DOkUsZS5hZGxlcj0yPT09dC53cmFwPzA6MSx0Lmxhc3RfZmx1c2g9bCx1Ll90cl9pbml0KHQpLG0pOlIoZSxfKX1mdW5jdGlvbiBLKGUpe3ZhciB0PUcoZSk7cmV0dXJuIHQ9PT1tJiZmdW5jdGlvbihlKXtlLndpbmRvd19zaXplPTIqZS53X3NpemUsRChlLmhlYWQpLGUubWF4X2xhenlfbWF0Y2g9aFtlLmxldmVsXS5tYXhfbGF6eSxlLmdvb2RfbWF0Y2g9aFtlLmxldmVsXS5nb29kX2xlbmd0aCxlLm5pY2VfbWF0Y2g9aFtlLmxldmVsXS5uaWNlX2xlbmd0aCxlLm1heF9jaGFpbl9sZW5ndGg9aFtlLmxldmVsXS5tYXhfY2hhaW4sZS5zdHJzdGFydD0wLGUuYmxvY2tfc3RhcnQ9MCxlLmxvb2thaGVhZD0wLGUuaW5zZXJ0PTAsZS5tYXRjaF9sZW5ndGg9ZS5wcmV2X2xlbmd0aD14LTEsZS5tYXRjaF9hdmFpbGFibGU9MCxlLmluc19oPTB9KGUuc3RhdGUpLHR9ZnVuY3Rpb24gWShlLHQscixuLGkscyl7aWYoIWUpcmV0dXJuIF87dmFyIGE9MTtpZih0PT09ZyYmKHQ9NiksbjwwPyhhPTAsbj0tbik6MTU8biYmKGE9MixuLT0xNiksaTwxfHx5PGl8fHIhPT12fHxuPDh8fDE1PG58fHQ8MHx8OTx0fHxzPDB8fGI8cylyZXR1cm4gUihlLF8pOzg9PT1uJiYobj05KTt2YXIgbz1uZXcgSDtyZXR1cm4oZS5zdGF0ZT1vKS5zdHJtPWUsby53cmFwPWEsby5nemhlYWQ9bnVsbCxvLndfYml0cz1uLG8ud19zaXplPTE8PG8ud19iaXRzLG8ud19tYXNrPW8ud19zaXplLTEsby5oYXNoX2JpdHM9aSs3LG8uaGFzaF9zaXplPTE8PG8uaGFzaF9iaXRzLG8uaGFzaF9tYXNrPW8uaGFzaF9zaXplLTEsby5oYXNoX3NoaWZ0PX5+KChvLmhhc2hfYml0cyt4LTEpL3gpLG8ud2luZG93PW5ldyBjLkJ1ZjgoMipvLndfc2l6ZSksby5oZWFkPW5ldyBjLkJ1ZjE2KG8uaGFzaF9zaXplKSxvLnByZXY9bmV3IGMuQnVmMTYoby53X3NpemUpLG8ubGl0X2J1ZnNpemU9MTw8aSs2LG8ucGVuZGluZ19idWZfc2l6ZT00Km8ubGl0X2J1ZnNpemUsby5wZW5kaW5nX2J1Zj1uZXcgYy5CdWY4KG8ucGVuZGluZ19idWZfc2l6ZSksby5kX2J1Zj0xKm8ubGl0X2J1ZnNpemUsby5sX2J1Zj0zKm8ubGl0X2J1ZnNpemUsby5sZXZlbD10LG8uc3RyYXRlZ3k9cyxvLm1ldGhvZD1yLEsoZSl9aD1bbmV3IE0oMCwwLDAsMCxmdW5jdGlvbihlLHQpe3ZhciByPTY1NTM1O2ZvcihyPmUucGVuZGluZ19idWZfc2l6ZS01JiYocj1lLnBlbmRpbmdfYnVmX3NpemUtNSk7Oyl7aWYoZS5sb29rYWhlYWQ8PTEpe2lmKGooZSksMD09PWUubG9va2FoZWFkJiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9ZS5zdHJzdGFydCs9ZS5sb29rYWhlYWQsZS5sb29rYWhlYWQ9MDt2YXIgbj1lLmJsb2NrX3N0YXJ0K3I7aWYoKDA9PT1lLnN0cnN0YXJ0fHxlLnN0cnN0YXJ0Pj1uKSYmKGUubG9va2FoZWFkPWUuc3Ryc3RhcnQtbixlLnN0cnN0YXJ0PW4sTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEE7aWYoZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0Pj1lLndfc2l6ZS16JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIGUuaW5zZXJ0PTAsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTooZS5zdHJzdGFydD5lLmJsb2NrX3N0YXJ0JiYoTihlLCExKSxlLnN0cm0uYXZhaWxfb3V0KSxBKX0pLG5ldyBNKDQsNCw4LDQsWiksbmV3IE0oNCw1LDE2LDgsWiksbmV3IE0oNCw2LDMyLDMyLFopLG5ldyBNKDQsNCwxNiwxNixXKSxuZXcgTSg4LDE2LDMyLDMyLFcpLG5ldyBNKDgsMTYsMTI4LDEyOCxXKSxuZXcgTSg4LDMyLDEyOCwyNTYsVyksbmV3IE0oMzIsMTI4LDI1OCwxMDI0LFcpLG5ldyBNKDMyLDI1OCwyNTgsNDA5NixXKV0sci5kZWZsYXRlSW5pdD1mdW5jdGlvbihlLHQpe3JldHVybiBZKGUsdCx2LDE1LDgsMCl9LHIuZGVmbGF0ZUluaXQyPVksci5kZWZsYXRlUmVzZXQ9SyxyLmRlZmxhdGVSZXNldEtlZXA9RyxyLmRlZmxhdGVTZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmZS5zdGF0ZT8yIT09ZS5zdGF0ZS53cmFwP186KGUuc3RhdGUuZ3poZWFkPXQsbSk6X30sci5kZWZsYXRlPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHM7aWYoIWV8fCFlLnN0YXRlfHw1PHR8fHQ8MClyZXR1cm4gZT9SKGUsXyk6XztpZihuPWUuc3RhdGUsIWUub3V0cHV0fHwhZS5pbnB1dCYmMCE9PWUuYXZhaWxfaW58fDY2Nj09PW4uc3RhdHVzJiZ0IT09ZilyZXR1cm4gUihlLDA9PT1lLmF2YWlsX291dD8tNTpfKTtpZihuLnN0cm09ZSxyPW4ubGFzdF9mbHVzaCxuLmxhc3RfZmx1c2g9dCxuLnN0YXR1cz09PUMpaWYoMj09PW4ud3JhcCllLmFkbGVyPTAsVShuLDMxKSxVKG4sMTM5KSxVKG4sOCksbi5nemhlYWQ/KFUobiwobi5nemhlYWQudGV4dD8xOjApKyhuLmd6aGVhZC5oY3JjPzI6MCkrKG4uZ3poZWFkLmV4dHJhPzQ6MCkrKG4uZ3poZWFkLm5hbWU/ODowKSsobi5nemhlYWQuY29tbWVudD8xNjowKSksVShuLDI1NSZuLmd6aGVhZC50aW1lKSxVKG4sbi5nemhlYWQudGltZT4+OCYyNTUpLFUobixuLmd6aGVhZC50aW1lPj4xNiYyNTUpLFUobixuLmd6aGVhZC50aW1lPj4yNCYyNTUpLFUobiw5PT09bi5sZXZlbD8yOjI8PW4uc3RyYXRlZ3l8fG4ubGV2ZWw8Mj80OjApLFUobiwyNTUmbi5nemhlYWQub3MpLG4uZ3poZWFkLmV4dHJhJiZuLmd6aGVhZC5leHRyYS5sZW5ndGgmJihVKG4sMjU1Jm4uZ3poZWFkLmV4dHJhLmxlbmd0aCksVShuLG4uZ3poZWFkLmV4dHJhLmxlbmd0aD4+OCYyNTUpKSxuLmd6aGVhZC5oY3JjJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmcsMCkpLG4uZ3ppbmRleD0wLG4uc3RhdHVzPTY5KTooVShuLDApLFUobiwwKSxVKG4sMCksVShuLDApLFUobiwwKSxVKG4sOT09PW4ubGV2ZWw/MjoyPD1uLnN0cmF0ZWd5fHxuLmxldmVsPDI/NDowKSxVKG4sMyksbi5zdGF0dXM9RSk7ZWxzZXt2YXIgYT12KyhuLndfYml0cy04PDw0KTw8ODthfD0oMjw9bi5zdHJhdGVneXx8bi5sZXZlbDwyPzA6bi5sZXZlbDw2PzE6Nj09PW4ubGV2ZWw/MjozKTw8NiwwIT09bi5zdHJzdGFydCYmKGF8PTMyKSxhKz0zMS1hJTMxLG4uc3RhdHVzPUUsUChuLGEpLDAhPT1uLnN0cnN0YXJ0JiYoUChuLGUuYWRsZXI+Pj4xNiksUChuLDY1NTM1JmUuYWRsZXIpKSxlLmFkbGVyPTF9aWYoNjk9PT1uLnN0YXR1cylpZihuLmd6aGVhZC5leHRyYSl7Zm9yKGk9bi5wZW5kaW5nO24uZ3ppbmRleDwoNjU1MzUmbi5nemhlYWQuZXh0cmEubGVuZ3RoKSYmKG4ucGVuZGluZyE9PW4ucGVuZGluZ19idWZfc2l6ZXx8KG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmchPT1uLnBlbmRpbmdfYnVmX3NpemUpKTspVShuLDI1NSZuLmd6aGVhZC5leHRyYVtuLmd6aW5kZXhdKSxuLmd6aW5kZXgrKztuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLG4uZ3ppbmRleD09PW4uZ3poZWFkLmV4dHJhLmxlbmd0aCYmKG4uZ3ppbmRleD0wLG4uc3RhdHVzPTczKX1lbHNlIG4uc3RhdHVzPTczO2lmKDczPT09bi5zdGF0dXMpaWYobi5nemhlYWQubmFtZSl7aT1uLnBlbmRpbmc7ZG97aWYobi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplJiYobi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxGKGUpLGk9bi5wZW5kaW5nLG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPW4uZ3ppbmRleDxuLmd6aGVhZC5uYW1lLmxlbmd0aD8yNTUmbi5nemhlYWQubmFtZS5jaGFyQ29kZUF0KG4uZ3ppbmRleCsrKTowLFUobixzKX13aGlsZSgwIT09cyk7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSwwPT09cyYmKG4uZ3ppbmRleD0wLG4uc3RhdHVzPTkxKX1lbHNlIG4uc3RhdHVzPTkxO2lmKDkxPT09bi5zdGF0dXMpaWYobi5nemhlYWQuY29tbWVudCl7aT1uLnBlbmRpbmc7ZG97aWYobi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplJiYobi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxGKGUpLGk9bi5wZW5kaW5nLG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPW4uZ3ppbmRleDxuLmd6aGVhZC5jb21tZW50Lmxlbmd0aD8yNTUmbi5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KG4uZ3ppbmRleCsrKTowLFUobixzKX13aGlsZSgwIT09cyk7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSwwPT09cyYmKG4uc3RhdHVzPTEwMyl9ZWxzZSBuLnN0YXR1cz0xMDM7aWYoMTAzPT09bi5zdGF0dXMmJihuLmd6aGVhZC5oY3JjPyhuLnBlbmRpbmcrMj5uLnBlbmRpbmdfYnVmX3NpemUmJkYoZSksbi5wZW5kaW5nKzI8PW4ucGVuZGluZ19idWZfc2l6ZSYmKFUobiwyNTUmZS5hZGxlciksVShuLGUuYWRsZXI+PjgmMjU1KSxlLmFkbGVyPTAsbi5zdGF0dXM9RSkpOm4uc3RhdHVzPUUpLDAhPT1uLnBlbmRpbmcpe2lmKEYoZSksMD09PWUuYXZhaWxfb3V0KXJldHVybiBuLmxhc3RfZmx1c2g9LTEsbX1lbHNlIGlmKDA9PT1lLmF2YWlsX2luJiZUKHQpPD1UKHIpJiZ0IT09ZilyZXR1cm4gUihlLC01KTtpZig2NjY9PT1uLnN0YXR1cyYmMCE9PWUuYXZhaWxfaW4pcmV0dXJuIFIoZSwtNSk7aWYoMCE9PWUuYXZhaWxfaW58fDAhPT1uLmxvb2thaGVhZHx8dCE9PWwmJjY2NiE9PW4uc3RhdHVzKXt2YXIgbz0yPT09bi5zdHJhdGVneT9mdW5jdGlvbihlLHQpe2Zvcih2YXIgcjs7KXtpZigwPT09ZS5sb29rYWhlYWQmJihqKGUpLDA9PT1lLmxvb2thaGVhZCkpe2lmKHQ9PT1sKXJldHVybiBBO2JyZWFrfWlmKGUubWF0Y2hfbGVuZ3RoPTAscj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydF0pLGUubG9va2FoZWFkLS0sZS5zdHJzdGFydCsrLHImJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9MCx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9KG4sdCk6Mz09PW4uc3RyYXRlZ3k/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbixpLHMsYT1lLndpbmRvdzs7KXtpZihlLmxvb2thaGVhZDw9Uyl7aWYoaihlKSxlLmxvb2thaGVhZDw9UyYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKGUubWF0Y2hfbGVuZ3RoPTAsZS5sb29rYWhlYWQ+PXgmJjA8ZS5zdHJzdGFydCYmKG49YVtpPWUuc3Ryc3RhcnQtMV0pPT09YVsrK2ldJiZuPT09YVsrK2ldJiZuPT09YVsrK2ldKXtzPWUuc3Ryc3RhcnQrUztkb3t9d2hpbGUobj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmaTxzKTtlLm1hdGNoX2xlbmd0aD1TLShzLWkpLGUubWF0Y2hfbGVuZ3RoPmUubG9va2FoZWFkJiYoZS5tYXRjaF9sZW5ndGg9ZS5sb29rYWhlYWQpfWlmKGUubWF0Y2hfbGVuZ3RoPj14PyhyPXUuX3RyX3RhbGx5KGUsMSxlLm1hdGNoX2xlbmd0aC14KSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5zdHJzdGFydCs9ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg9MCk6KHI9dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnRdKSxlLmxvb2thaGVhZC0tLGUuc3Ryc3RhcnQrKyksciYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD0wLHQ9PT1mPyhOKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0P086Qik6ZS5sYXN0X2xpdCYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpP0E6SX0obix0KTpoW24ubGV2ZWxdLmZ1bmMobix0KTtpZihvIT09TyYmbyE9PUJ8fChuLnN0YXR1cz02NjYpLG89PT1BfHxvPT09TylyZXR1cm4gMD09PWUuYXZhaWxfb3V0JiYobi5sYXN0X2ZsdXNoPS0xKSxtO2lmKG89PT1JJiYoMT09PXQ/dS5fdHJfYWxpZ24obik6NSE9PXQmJih1Ll90cl9zdG9yZWRfYmxvY2sobiwwLDAsITEpLDM9PT10JiYoRChuLmhlYWQpLDA9PT1uLmxvb2thaGVhZCYmKG4uc3Ryc3RhcnQ9MCxuLmJsb2NrX3N0YXJ0PTAsbi5pbnNlcnQ9MCkpKSxGKGUpLDA9PT1lLmF2YWlsX291dCkpcmV0dXJuIG4ubGFzdF9mbHVzaD0tMSxtfXJldHVybiB0IT09Zj9tOm4ud3JhcDw9MD8xOigyPT09bi53cmFwPyhVKG4sMjU1JmUuYWRsZXIpLFUobixlLmFkbGVyPj44JjI1NSksVShuLGUuYWRsZXI+PjE2JjI1NSksVShuLGUuYWRsZXI+PjI0JjI1NSksVShuLDI1NSZlLnRvdGFsX2luKSxVKG4sZS50b3RhbF9pbj4+OCYyNTUpLFUobixlLnRvdGFsX2luPj4xNiYyNTUpLFUobixlLnRvdGFsX2luPj4yNCYyNTUpKTooUChuLGUuYWRsZXI+Pj4xNiksUChuLDY1NTM1JmUuYWRsZXIpKSxGKGUpLDA8bi53cmFwJiYobi53cmFwPS1uLndyYXApLDAhPT1uLnBlbmRpbmc/bToxKX0sci5kZWZsYXRlRW5kPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyh0PWUuc3RhdGUuc3RhdHVzKSE9PUMmJjY5IT09dCYmNzMhPT10JiY5MSE9PXQmJjEwMyE9PXQmJnQhPT1FJiY2NjYhPT10P1IoZSxfKTooZS5zdGF0ZT1udWxsLHQ9PT1FP1IoZSwtMyk6bSk6X30sci5kZWZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbD10Lmxlbmd0aDtpZighZXx8IWUuc3RhdGUpcmV0dXJuIF87aWYoMj09PShzPShyPWUuc3RhdGUpLndyYXApfHwxPT09cyYmci5zdGF0dXMhPT1DfHxyLmxvb2thaGVhZClyZXR1cm4gXztmb3IoMT09PXMmJihlLmFkbGVyPWQoZS5hZGxlcix0LGwsMCkpLHIud3JhcD0wLGw+PXIud19zaXplJiYoMD09PXMmJihEKHIuaGVhZCksci5zdHJzdGFydD0wLHIuYmxvY2tfc3RhcnQ9MCxyLmluc2VydD0wKSx1PW5ldyBjLkJ1Zjgoci53X3NpemUpLGMuYXJyYXlTZXQodSx0LGwtci53X3NpemUsci53X3NpemUsMCksdD11LGw9ci53X3NpemUpLGE9ZS5hdmFpbF9pbixvPWUubmV4dF9pbixoPWUuaW5wdXQsZS5hdmFpbF9pbj1sLGUubmV4dF9pbj0wLGUuaW5wdXQ9dCxqKHIpO3IubG9va2FoZWFkPj14Oyl7Zm9yKG49ci5zdHJzdGFydCxpPXIubG9va2FoZWFkLSh4LTEpO3IuaW5zX2g9KHIuaW5zX2g8PHIuaGFzaF9zaGlmdF5yLndpbmRvd1tuK3gtMV0pJnIuaGFzaF9tYXNrLHIucHJldltuJnIud19tYXNrXT1yLmhlYWRbci5pbnNfaF0sci5oZWFkW3IuaW5zX2hdPW4sbisrLC0taTspO3Iuc3Ryc3RhcnQ9bixyLmxvb2thaGVhZD14LTEsaihyKX1yZXR1cm4gci5zdHJzdGFydCs9ci5sb29rYWhlYWQsci5ibG9ja19zdGFydD1yLnN0cnN0YXJ0LHIuaW5zZXJ0PXIubG9va2FoZWFkLHIubG9va2FoZWFkPTAsci5tYXRjaF9sZW5ndGg9ci5wcmV2X2xlbmd0aD14LTEsci5tYXRjaF9hdmFpbGFibGU9MCxlLm5leHRfaW49byxlLmlucHV0PWgsZS5hdmFpbF9pbj1hLHIud3JhcD1zLG19LHIuZGVmbGF0ZUluZm89XCJwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL21lc3NhZ2VzXCI6NTEsXCIuL3RyZWVzXCI6NTJ9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMudGV4dD0wLHRoaXMudGltZT0wLHRoaXMueGZsYWdzPTAsdGhpcy5vcz0wLHRoaXMuZXh0cmE9bnVsbCx0aGlzLmV4dHJhX2xlbj0wLHRoaXMubmFtZT1cIlwiLHRoaXMuY29tbWVudD1cIlwiLHRoaXMuaGNyYz0wLHRoaXMuZG9uZT0hMX19LHt9XSw0ODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbCxmLGMsZCxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDO3I9ZS5zdGF0ZSxuPWUubmV4dF9pbix6PWUuaW5wdXQsaT1uKyhlLmF2YWlsX2luLTUpLHM9ZS5uZXh0X291dCxDPWUub3V0cHV0LGE9cy0odC1lLmF2YWlsX291dCksbz1zKyhlLmF2YWlsX291dC0yNTcpLGg9ci5kbWF4LHU9ci53c2l6ZSxsPXIud2hhdmUsZj1yLnduZXh0LGM9ci53aW5kb3csZD1yLmhvbGQscD1yLmJpdHMsbT1yLmxlbmNvZGUsXz1yLmRpc3Rjb2RlLGc9KDE8PHIubGVuYml0cyktMSxiPSgxPDxyLmRpc3RiaXRzKS0xO2U6ZG97cDwxNSYmKGQrPXpbbisrXTw8cCxwKz04LGQrPXpbbisrXTw8cCxwKz04KSx2PW1bZCZnXTt0OmZvcig7Oyl7aWYoZD4+Pj15PXY+Pj4yNCxwLT15LDA9PT0oeT12Pj4+MTYmMjU1KSlDW3MrK109NjU1MzUmdjtlbHNle2lmKCEoMTYmeSkpe2lmKDA9PSg2NCZ5KSl7dj1tWyg2NTUzNSZ2KSsoZCYoMTw8eSktMSldO2NvbnRpbnVlIHR9aWYoMzImeSl7ci5tb2RlPTEyO2JyZWFrIGV9ZS5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgZX13PTY1NTM1JnYsKHkmPTE1KSYmKHA8eSYmKGQrPXpbbisrXTw8cCxwKz04KSx3Kz1kJigxPDx5KS0xLGQ+Pj49eSxwLT15KSxwPDE1JiYoZCs9eltuKytdPDxwLHArPTgsZCs9eltuKytdPDxwLHArPTgpLHY9X1tkJmJdO3I6Zm9yKDs7KXtpZihkPj4+PXk9dj4+PjI0LHAtPXksISgxNiYoeT12Pj4+MTYmMjU1KSkpe2lmKDA9PSg2NCZ5KSl7dj1fWyg2NTUzNSZ2KSsoZCYoMTw8eSktMSldO2NvbnRpbnVlIHJ9ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihrPTY1NTM1JnYscDwoeSY9MTUpJiYoZCs9eltuKytdPDxwLChwKz04KTx5JiYoZCs9eltuKytdPDxwLHArPTgpKSxoPChrKz1kJigxPDx5KS0xKSl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVhayBlfWlmKGQ+Pj49eSxwLT15LCh5PXMtYSk8ayl7aWYobDwoeT1rLXkpJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihTPWMsKHg9MCk9PT1mKXtpZih4Kz11LXkseTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO3g9cy1rLFM9Q319ZWxzZSBpZihmPHkpe2lmKHgrPXUrZi15LCh5LT1mKTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO2lmKHg9MCxmPHcpe2Zvcih3LT15PWY7Q1tzKytdPWNbeCsrXSwtLXk7KTt4PXMtayxTPUN9fX1lbHNlIGlmKHgrPWYteSx5PHcpe2Zvcih3LT15O0NbcysrXT1jW3grK10sLS15Oyk7eD1zLWssUz1DfWZvcig7Mjx3OylDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sQ1tzKytdPVNbeCsrXSx3LT0zO3cmJihDW3MrK109U1t4KytdLDE8dyYmKENbcysrXT1TW3grK10pKX1lbHNle2Zvcih4PXMtaztDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sQ1tzKytdPUNbeCsrXSwyPCh3LT0zKTspO3cmJihDW3MrK109Q1t4KytdLDE8dyYmKENbcysrXT1DW3grK10pKX1icmVha319YnJlYWt9fXdoaWxlKG48aSYmczxvKTtuLT13PXA+PjMsZCY9KDE8PChwLT13PDwzKSktMSxlLm5leHRfaW49bixlLm5leHRfb3V0PXMsZS5hdmFpbF9pbj1uPGk/aS1uKzU6NS0obi1pKSxlLmF2YWlsX291dD1zPG8/by1zKzI1NzoyNTctKHMtbyksci5ob2xkPWQsci5iaXRzPXB9fSx7fV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgST1lKFwiLi4vdXRpbHMvY29tbW9uXCIpLE89ZShcIi4vYWRsZXIzMlwiKSxCPWUoXCIuL2NyYzMyXCIpLFI9ZShcIi4vaW5mZmFzdFwiKSxUPWUoXCIuL2luZnRyZWVzXCIpLEQ9MSxGPTIsTj0wLFU9LTIsUD0xLG49ODUyLGk9NTkyO2Z1bmN0aW9uIEwoZSl7cmV0dXJuKGU+Pj4yNCYyNTUpKyhlPj4+OCY2NTI4MCkrKCg2NTI4MCZlKTw8OCkrKCgyNTUmZSk8PDI0KX1mdW5jdGlvbiBzKCl7dGhpcy5tb2RlPTAsdGhpcy5sYXN0PSExLHRoaXMud3JhcD0wLHRoaXMuaGF2ZWRpY3Q9ITEsdGhpcy5mbGFncz0wLHRoaXMuZG1heD0wLHRoaXMuY2hlY2s9MCx0aGlzLnRvdGFsPTAsdGhpcy5oZWFkPW51bGwsdGhpcy53Yml0cz0wLHRoaXMud3NpemU9MCx0aGlzLndoYXZlPTAsdGhpcy53bmV4dD0wLHRoaXMud2luZG93PW51bGwsdGhpcy5ob2xkPTAsdGhpcy5iaXRzPTAsdGhpcy5sZW5ndGg9MCx0aGlzLm9mZnNldD0wLHRoaXMuZXh0cmE9MCx0aGlzLmxlbmNvZGU9bnVsbCx0aGlzLmRpc3Rjb2RlPW51bGwsdGhpcy5sZW5iaXRzPTAsdGhpcy5kaXN0Yml0cz0wLHRoaXMubmNvZGU9MCx0aGlzLm5sZW49MCx0aGlzLm5kaXN0PTAsdGhpcy5oYXZlPTAsdGhpcy5uZXh0PW51bGwsdGhpcy5sZW5zPW5ldyBJLkJ1ZjE2KDMyMCksdGhpcy53b3JrPW5ldyBJLkJ1ZjE2KDI4OCksdGhpcy5sZW5keW49bnVsbCx0aGlzLmRpc3RkeW49bnVsbCx0aGlzLnNhbmU9MCx0aGlzLmJhY2s9MCx0aGlzLndhcz0wfWZ1bmN0aW9uIGEoZSl7dmFyIHQ7cmV0dXJuIGUmJmUuc3RhdGU/KHQ9ZS5zdGF0ZSxlLnRvdGFsX2luPWUudG90YWxfb3V0PXQudG90YWw9MCxlLm1zZz1cIlwiLHQud3JhcCYmKGUuYWRsZXI9MSZ0LndyYXApLHQubW9kZT1QLHQubGFzdD0wLHQuaGF2ZWRpY3Q9MCx0LmRtYXg9MzI3NjgsdC5oZWFkPW51bGwsdC5ob2xkPTAsdC5iaXRzPTAsdC5sZW5jb2RlPXQubGVuZHluPW5ldyBJLkJ1ZjMyKG4pLHQuZGlzdGNvZGU9dC5kaXN0ZHluPW5ldyBJLkJ1ZjMyKGkpLHQuc2FuZT0xLHQuYmFjaz0tMSxOKTpVfWZ1bmN0aW9uIG8oZSl7dmFyIHQ7cmV0dXJuIGUmJmUuc3RhdGU/KCh0PWUuc3RhdGUpLndzaXplPTAsdC53aGF2ZT0wLHQud25leHQ9MCxhKGUpKTpVfWZ1bmN0aW9uIGgoZSx0KXt2YXIgcixuO3JldHVybiBlJiZlLnN0YXRlPyhuPWUuc3RhdGUsdDwwPyhyPTAsdD0tdCk6KHI9MSsodD4+NCksdDw0OCYmKHQmPTE1KSksdCYmKHQ8OHx8MTU8dCk/VToobnVsbCE9PW4ud2luZG93JiZuLndiaXRzIT09dCYmKG4ud2luZG93PW51bGwpLG4ud3JhcD1yLG4ud2JpdHM9dCxvKGUpKSk6VX1mdW5jdGlvbiB1KGUsdCl7dmFyIHIsbjtyZXR1cm4gZT8obj1uZXcgcywoZS5zdGF0ZT1uKS53aW5kb3c9bnVsbCwocj1oKGUsdCkpIT09TiYmKGUuc3RhdGU9bnVsbCkscik6VX12YXIgbCxmLGM9ITA7ZnVuY3Rpb24gaihlKXtpZihjKXt2YXIgdDtmb3IobD1uZXcgSS5CdWYzMig1MTIpLGY9bmV3IEkuQnVmMzIoMzIpLHQ9MDt0PDE0NDspZS5sZW5zW3QrK109ODtmb3IoO3Q8MjU2OyllLmxlbnNbdCsrXT05O2Zvcig7dDwyODA7KWUubGVuc1t0KytdPTc7Zm9yKDt0PDI4ODspZS5sZW5zW3QrK109ODtmb3IoVChELGUubGVucywwLDI4OCxsLDAsZS53b3JrLHtiaXRzOjl9KSx0PTA7dDwzMjspZS5sZW5zW3QrK109NTtUKEYsZS5sZW5zLDAsMzIsZiwwLGUud29yayx7Yml0czo1fSksYz0hMX1lLmxlbmNvZGU9bCxlLmxlbmJpdHM9OSxlLmRpc3Rjb2RlPWYsZS5kaXN0Yml0cz01fWZ1bmN0aW9uIFooZSx0LHIsbil7dmFyIGkscz1lLnN0YXRlO3JldHVybiBudWxsPT09cy53aW5kb3cmJihzLndzaXplPTE8PHMud2JpdHMscy53bmV4dD0wLHMud2hhdmU9MCxzLndpbmRvdz1uZXcgSS5CdWY4KHMud3NpemUpKSxuPj1zLndzaXplPyhJLmFycmF5U2V0KHMud2luZG93LHQsci1zLndzaXplLHMud3NpemUsMCkscy53bmV4dD0wLHMud2hhdmU9cy53c2l6ZSk6KG48KGk9cy53c2l6ZS1zLnduZXh0KSYmKGk9biksSS5hcnJheVNldChzLndpbmRvdyx0LHItbixpLHMud25leHQpLChuLT1pKT8oSS5hcnJheVNldChzLndpbmRvdyx0LHItbixuLDApLHMud25leHQ9bixzLndoYXZlPXMud3NpemUpOihzLnduZXh0Kz1pLHMud25leHQ9PT1zLndzaXplJiYocy53bmV4dD0wKSxzLndoYXZlPHMud3NpemUmJihzLndoYXZlKz1pKSkpLDB9ci5pbmZsYXRlUmVzZXQ9byxyLmluZmxhdGVSZXNldDI9aCxyLmluZmxhdGVSZXNldEtlZXA9YSxyLmluZmxhdGVJbml0PWZ1bmN0aW9uKGUpe3JldHVybiB1KGUsMTUpfSxyLmluZmxhdGVJbml0Mj11LHIuaW5mbGF0ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbCxmLGMsZCxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDPTAsRT1uZXcgSS5CdWY4KDQpLEE9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO2lmKCFlfHwhZS5zdGF0ZXx8IWUub3V0cHV0fHwhZS5pbnB1dCYmMCE9PWUuYXZhaWxfaW4pcmV0dXJuIFU7MTI9PT0ocj1lLnN0YXRlKS5tb2RlJiYoci5tb2RlPTEzKSxhPWUubmV4dF9vdXQsaT1lLm91dHB1dCxoPWUuYXZhaWxfb3V0LHM9ZS5uZXh0X2luLG49ZS5pbnB1dCxvPWUuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsZj1vLGM9aCx4PU47ZTpmb3IoOzspc3dpdGNoKHIubW9kZSl7Y2FzZSBQOmlmKDA9PT1yLndyYXApe3IubW9kZT0xMzticmVha31mb3IoO2w8MTY7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigyJnIud3JhcCYmMzU2MTU9PT11KXtFW3IuY2hlY2s9MF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApLGw9dT0wLHIubW9kZT0yO2JyZWFrfWlmKHIuZmxhZ3M9MCxyLmhlYWQmJihyLmhlYWQuZG9uZT0hMSksISgxJnIud3JhcCl8fCgoKDI1NSZ1KTw8OCkrKHU+PjgpKSUzMSl7ZS5tc2c9XCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWlmKDghPSgxNSZ1KSl7ZS5tc2c9XCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLHIubW9kZT0zMDticmVha31pZihsLT00LGs9OCsoMTUmKHU+Pj49NCkpLDA9PT1yLndiaXRzKXIud2JpdHM9aztlbHNlIGlmKGs+ci53Yml0cyl7ZS5tc2c9XCJpbnZhbGlkIHdpbmRvdyBzaXplXCIsci5tb2RlPTMwO2JyZWFrfXIuZG1heD0xPDxrLGUuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT01MTImdT8xMDoxMixsPXU9MDticmVhaztjYXNlIDI6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoci5mbGFncz11LDghPSgyNTUmci5mbGFncykpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYoNTczNDQmci5mbGFncyl7ZS5tc2c9XCJ1bmtub3duIGhlYWRlciBmbGFncyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oZWFkJiYoci5oZWFkLnRleHQ9dT4+OCYxKSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MCxyLm1vZGU9MztjYXNlIDM6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnRpbWU9dSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LEVbMl09dT4+PjE2JjI1NSxFWzNdPXU+Pj4yNCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSw0LDApKSxsPXU9MCxyLm1vZGU9NDtjYXNlIDQ6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnhmbGFncz0yNTUmdSxyLmhlYWQub3M9dT4+OCksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTU7Y2FzZSA1OmlmKDEwMjQmci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5sZW5ndGg9dSxyLmhlYWQmJihyLmhlYWQuZXh0cmFfbGVuPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wfWVsc2Ugci5oZWFkJiYoci5oZWFkLmV4dHJhPW51bGwpO3IubW9kZT02O2Nhc2UgNjppZigxMDI0JnIuZmxhZ3MmJihvPChkPXIubGVuZ3RoKSYmKGQ9byksZCYmKHIuaGVhZCYmKGs9ci5oZWFkLmV4dHJhX2xlbi1yLmxlbmd0aCxyLmhlYWQuZXh0cmF8fChyLmhlYWQuZXh0cmE9bmV3IEFycmF5KHIuaGVhZC5leHRyYV9sZW4pKSxJLmFycmF5U2V0KHIuaGVhZC5leHRyYSxuLHMsZCxrKSksNTEyJnIuZmxhZ3MmJihyLmNoZWNrPUIoci5jaGVjayxuLGQscykpLG8tPWQscys9ZCxyLmxlbmd0aC09ZCksci5sZW5ndGgpKWJyZWFrIGU7ci5sZW5ndGg9MCxyLm1vZGU9NztjYXNlIDc6aWYoMjA0OCZyLmZsYWdzKXtpZigwPT09bylicmVhayBlO2ZvcihkPTA7az1uW3MrZCsrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLm5hbWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmQ8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsaylicmVhayBlfWVsc2Ugci5oZWFkJiYoci5oZWFkLm5hbWU9bnVsbCk7ci5sZW5ndGg9MCxyLm1vZGU9ODtjYXNlIDg6aWYoNDA5NiZyLmZsYWdzKXtpZigwPT09bylicmVhayBlO2ZvcihkPTA7az1uW3MrZCsrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLmNvbW1lbnQrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmQ8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsaylicmVhayBlfWVsc2Ugci5oZWFkJiYoci5oZWFkLmNvbW1lbnQ9bnVsbCk7ci5tb2RlPTk7Y2FzZSA5OmlmKDUxMiZyLmZsYWdzKXtmb3IoO2w8MTY7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZih1IT09KDY1NTM1JnIuY2hlY2spKXtlLm1zZz1cImhlYWRlciBjcmMgbWlzbWF0Y2hcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5oZWFkJiYoci5oZWFkLmhjcmM9ci5mbGFncz4+OSYxLHIuaGVhZC5kb25lPSEwKSxlLmFkbGVyPXIuY2hlY2s9MCxyLm1vZGU9MTI7YnJlYWs7Y2FzZSAxMDpmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1lLmFkbGVyPXIuY2hlY2s9TCh1KSxsPXU9MCxyLm1vZGU9MTE7Y2FzZSAxMTppZigwPT09ci5oYXZlZGljdClyZXR1cm4gZS5uZXh0X291dD1hLGUuYXZhaWxfb3V0PWgsZS5uZXh0X2luPXMsZS5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLDI7ZS5hZGxlcj1yLmNoZWNrPTEsci5tb2RlPTEyO2Nhc2UgMTI6aWYoNT09PXR8fDY9PT10KWJyZWFrIGU7Y2FzZSAxMzppZihyLmxhc3Qpe3U+Pj49NyZsLGwtPTcmbCxyLm1vZGU9Mjc7YnJlYWt9Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1zd2l0Y2goci5sYXN0PTEmdSxsLT0xLDMmKHU+Pj49MSkpe2Nhc2UgMDpyLm1vZGU9MTQ7YnJlYWs7Y2FzZSAxOmlmKGoociksci5tb2RlPTIwLDYhPT10KWJyZWFrO3U+Pj49MixsLT0yO2JyZWFrIGU7Y2FzZSAyOnIubW9kZT0xNzticmVhaztjYXNlIDM6ZS5tc2c9XCJpbnZhbGlkIGJsb2NrIHR5cGVcIixyLm1vZGU9MzB9dT4+Pj0yLGwtPTI7YnJlYWs7Y2FzZSAxNDpmb3IodT4+Pj03JmwsbC09NyZsO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigoNjU1MzUmdSkhPSh1Pj4+MTZeNjU1MzUpKXtlLm1zZz1cImludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHNcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5ndGg9NjU1MzUmdSxsPXU9MCxyLm1vZGU9MTUsNj09PXQpYnJlYWsgZTtjYXNlIDE1OnIubW9kZT0xNjtjYXNlIDE2OmlmKGQ9ci5sZW5ndGgpe2lmKG88ZCYmKGQ9byksaDxkJiYoZD1oKSwwPT09ZClicmVhayBlO0kuYXJyYXlTZXQoaSxuLHMsZCxhKSxvLT1kLHMrPWQsaC09ZCxhKz1kLHIubGVuZ3RoLT1kO2JyZWFrfXIubW9kZT0xMjticmVhaztjYXNlIDE3OmZvcig7bDwxNDspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHIubmxlbj0yNTcrKDMxJnUpLHU+Pj49NSxsLT01LHIubmRpc3Q9MSsoMzEmdSksdT4+Pj01LGwtPTUsci5uY29kZT00KygxNSZ1KSx1Pj4+PTQsbC09NCwyODY8ci5ubGVufHwzMDxyLm5kaXN0KXtlLm1zZz1cInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCIsci5tb2RlPTMwO2JyZWFrfXIuaGF2ZT0wLHIubW9kZT0xODtjYXNlIDE4OmZvcig7ci5oYXZlPHIubmNvZGU7KXtmb3IoO2w8Mzspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuc1tBW3IuaGF2ZSsrXV09NyZ1LHU+Pj49MyxsLT0zfWZvcig7ci5oYXZlPDE5OylyLmxlbnNbQVtyLmhhdmUrK11dPTA7aWYoci5sZW5jb2RlPXIubGVuZHluLHIubGVuYml0cz03LFM9e2JpdHM6ci5sZW5iaXRzfSx4PVQoMCxyLmxlbnMsMCwxOSxyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgY29kZSBsZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTk7Y2FzZSAxOTpmb3IoO3IuaGF2ZTxyLm5sZW4rci5uZGlzdDspe2Zvcig7Zz0oQz1yLmxlbmNvZGVbdSYoMTw8ci5sZW5iaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZihiPDE2KXU+Pj49XyxsLT1fLHIubGVuc1tyLmhhdmUrK109YjtlbHNle2lmKDE2PT09Yil7Zm9yKHo9XysyO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHU+Pj49XyxsLT1fLDA9PT1yLmhhdmUpe2UubXNnPVwiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdFwiLHIubW9kZT0zMDticmVha31rPXIubGVuc1tyLmhhdmUtMV0sZD0zKygzJnUpLHU+Pj49MixsLT0yfWVsc2UgaWYoMTc9PT1iKXtmb3Ioej1fKzM7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9bC09XyxrPTAsZD0zKyg3Jih1Pj4+PV8pKSx1Pj4+PTMsbC09M31lbHNle2Zvcih6PV8rNztsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1sLT1fLGs9MCxkPTExKygxMjcmKHU+Pj49XykpLHU+Pj49NyxsLT03fWlmKHIuaGF2ZStkPnIubmxlbityLm5kaXN0KXtlLm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9Zm9yKDtkLS07KXIubGVuc1tyLmhhdmUrK109a319aWYoMzA9PT1yLm1vZGUpYnJlYWs7aWYoMD09PXIubGVuc1syNTZdKXtlLm1zZz1cImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9ja1wiLHIubW9kZT0zMDticmVha31pZihyLmxlbmJpdHM9OSxTPXtiaXRzOnIubGVuYml0c30seD1UKEQsci5sZW5zLDAsci5ubGVuLHIubGVuY29kZSwwLHIud29yayxTKSxyLmxlbmJpdHM9Uy5iaXRzLHgpe2UubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIuZGlzdGJpdHM9NixyLmRpc3Rjb2RlPXIuZGlzdGR5bixTPXtiaXRzOnIuZGlzdGJpdHN9LHg9VChGLHIubGVucyxyLm5sZW4sci5uZGlzdCxyLmRpc3Rjb2RlLDAsci53b3JrLFMpLHIuZGlzdGJpdHM9Uy5iaXRzLHgpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZXMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubW9kZT0yMCw2PT09dClicmVhayBlO2Nhc2UgMjA6ci5tb2RlPTIxO2Nhc2UgMjE6aWYoNjw9byYmMjU4PD1oKXtlLm5leHRfb3V0PWEsZS5hdmFpbF9vdXQ9aCxlLm5leHRfaW49cyxlLmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsUihlLGMpLGE9ZS5uZXh0X291dCxpPWUub3V0cHV0LGg9ZS5hdmFpbF9vdXQscz1lLm5leHRfaW4sbj1lLmlucHV0LG89ZS5hdmFpbF9pbix1PXIuaG9sZCxsPXIuYml0cywxMj09PXIubW9kZSYmKHIuYmFjaz0tMSk7YnJlYWt9Zm9yKHIuYmFjaz0wO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoZyYmMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5sZW5jb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLHIubGVuZ3RoPWIsMD09PWcpe3IubW9kZT0yNjticmVha31pZigzMiZnKXtyLmJhY2s9LTEsci5tb2RlPTEyO2JyZWFrfWlmKDY0Jmcpe2UubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIuZXh0cmE9MTUmZyxyLm1vZGU9MjI7Y2FzZSAyMjppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuZ3RoKz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1yLndhcz1yLmxlbmd0aCxyLm1vZGU9MjM7Y2FzZSAyMzpmb3IoO2c9KEM9ci5kaXN0Y29kZVt1JigxPDxyLmRpc3RiaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigwPT0oMjQwJmcpKXtmb3Iodj1fLHk9Zyx3PWI7Zz0oQz1yLmRpc3Rjb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLDY0Jmcpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIub2Zmc2V0PWIsci5leHRyYT0xNSZnLHIubW9kZT0yNDtjYXNlIDI0OmlmKHIuZXh0cmEpe2Zvcih6PXIuZXh0cmE7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5vZmZzZXQrPXUmKDE8PHIuZXh0cmEpLTEsdT4+Pj1yLmV4dHJhLGwtPXIuZXh0cmEsci5iYWNrKz1yLmV4dHJhfWlmKHIub2Zmc2V0PnIuZG1heCl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31yLm1vZGU9MjU7Y2FzZSAyNTppZigwPT09aClicmVhayBlO2lmKGQ9Yy1oLHIub2Zmc2V0PmQpe2lmKChkPXIub2Zmc2V0LWQpPnIud2hhdmUmJnIuc2FuZSl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31wPWQ+ci53bmV4dD8oZC09ci53bmV4dCxyLndzaXplLWQpOnIud25leHQtZCxkPnIubGVuZ3RoJiYoZD1yLmxlbmd0aCksbT1yLndpbmRvd31lbHNlIG09aSxwPWEtci5vZmZzZXQsZD1yLmxlbmd0aDtmb3IoaDxkJiYoZD1oKSxoLT1kLHIubGVuZ3RoLT1kO2lbYSsrXT1tW3ArK10sLS1kOyk7MD09PXIubGVuZ3RoJiYoci5tb2RlPTIxKTticmVhaztjYXNlIDI2OmlmKDA9PT1oKWJyZWFrIGU7aVthKytdPXIubGVuZ3RoLGgtLSxyLm1vZGU9MjE7YnJlYWs7Y2FzZSAyNzppZihyLndyYXApe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHV8PW5bcysrXTw8bCxsKz04fWlmKGMtPWgsZS50b3RhbF9vdXQrPWMsci50b3RhbCs9YyxjJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLGksYyxhLWMpOk8oci5jaGVjayxpLGMsYS1jKSksYz1oLChyLmZsYWdzP3U6TCh1KSkhPT1yLmNoZWNrKXtlLm1zZz1cImluY29ycmVjdCBkYXRhIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yODtjYXNlIDI4OmlmKHIud3JhcCYmci5mbGFncyl7Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYodSE9PSg0Mjk0OTY3Mjk1JnIudG90YWwpKXtlLm1zZz1cImluY29ycmVjdCBsZW5ndGggY2hlY2tcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5tb2RlPTI5O2Nhc2UgMjk6eD0xO2JyZWFrIGU7Y2FzZSAzMDp4PS0zO2JyZWFrIGU7Y2FzZSAzMTpyZXR1cm4tNDtjYXNlIDMyOmRlZmF1bHQ6cmV0dXJuIFV9cmV0dXJuIGUubmV4dF9vdXQ9YSxlLmF2YWlsX291dD1oLGUubmV4dF9pbj1zLGUuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwoci53c2l6ZXx8YyE9PWUuYXZhaWxfb3V0JiZyLm1vZGU8MzAmJihyLm1vZGU8Mjd8fDQhPT10KSkmJlooZSxlLm91dHB1dCxlLm5leHRfb3V0LGMtZS5hdmFpbF9vdXQpPyhyLm1vZGU9MzEsLTQpOihmLT1lLmF2YWlsX2luLGMtPWUuYXZhaWxfb3V0LGUudG90YWxfaW4rPWYsZS50b3RhbF9vdXQrPWMsci50b3RhbCs9YyxyLndyYXAmJmMmJihlLmFkbGVyPXIuY2hlY2s9ci5mbGFncz9CKHIuY2hlY2ssaSxjLGUubmV4dF9vdXQtYyk6TyhyLmNoZWNrLGksYyxlLm5leHRfb3V0LWMpKSxlLmRhdGFfdHlwZT1yLmJpdHMrKHIubGFzdD82NDowKSsoMTI9PT1yLm1vZGU/MTI4OjApKygyMD09PXIubW9kZXx8MTU9PT1yLm1vZGU/MjU2OjApLCgwPT1mJiYwPT09Y3x8ND09PXQpJiZ4PT09TiYmKHg9LTUpLHgpfSxyLmluZmxhdGVFbmQ9ZnVuY3Rpb24oZSl7aWYoIWV8fCFlLnN0YXRlKXJldHVybiBVO3ZhciB0PWUuc3RhdGU7cmV0dXJuIHQud2luZG93JiYodC53aW5kb3c9bnVsbCksZS5zdGF0ZT1udWxsLE59LHIuaW5mbGF0ZUdldEhlYWRlcj1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBlJiZlLnN0YXRlPzA9PSgyJihyPWUuc3RhdGUpLndyYXApP1U6KChyLmhlYWQ9dCkuZG9uZT0hMSxOKTpVfSxyLmluZmxhdGVTZXREaWN0aW9uYXJ5PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10Lmxlbmd0aDtyZXR1cm4gZSYmZS5zdGF0ZT8wIT09KHI9ZS5zdGF0ZSkud3JhcCYmMTEhPT1yLm1vZGU/VToxMT09PXIubW9kZSYmTygxLHQsbiwwKSE9PXIuY2hlY2s/LTM6WihlLHQsbixuKT8oci5tb2RlPTMxLC00KTooci5oYXZlZGljdD0xLE4pOlV9LHIuaW5mbGF0ZUluZm89XCJwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL2luZmZhc3RcIjo0OCxcIi4vaW5mdHJlZXNcIjo1MH1dLDUwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEQ9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSxGPVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0sTj1bMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTcsMTcsMTcsMTcsMTgsMTgsMTgsMTgsMTksMTksMTksMTksMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMTYsNzIsNzhdLFU9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3NywwLDBdLFA9WzE2LDE2LDE2LDE2LDE3LDE3LDE4LDE4LDE5LDE5LDIwLDIwLDIxLDIxLDIyLDIyLDIzLDIzLDI0LDI0LDI1LDI1LDI2LDI2LDI3LDI3LDI4LDI4LDI5LDI5LDY0LDY0XTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbixpLHMsYSxvKXt2YXIgaCx1LGwsZixjLGQscCxtLF8sZz1vLmJpdHMsYj0wLHY9MCx5PTAsdz0wLGs9MCx4PTAsUz0wLHo9MCxDPTAsRT0wLEE9bnVsbCxJPTAsTz1uZXcgRC5CdWYxNigxNiksQj1uZXcgRC5CdWYxNigxNiksUj1udWxsLFQ9MDtmb3IoYj0wO2I8PTE1O2IrKylPW2JdPTA7Zm9yKHY9MDt2PG47disrKU9bdFtyK3ZdXSsrO2ZvcihrPWcsdz0xNTsxPD13JiYwPT09T1t3XTt3LS0pO2lmKHc8ayYmKGs9dyksMD09PXcpcmV0dXJuIGlbcysrXT0yMDk3MTUyMCxpW3MrK109MjA5NzE1MjAsby5iaXRzPTEsMDtmb3IoeT0xO3k8dyYmMD09PU9beV07eSsrKTtmb3Ioazx5JiYoaz15KSxiPXo9MTtiPD0xNTtiKyspaWYoejw8PTEsKHotPU9bYl0pPDApcmV0dXJuLTE7aWYoMDx6JiYoMD09PWV8fDEhPT13KSlyZXR1cm4tMTtmb3IoQlsxXT0wLGI9MTtiPDE1O2IrKylCW2IrMV09QltiXStPW2JdO2Zvcih2PTA7djxuO3YrKykwIT09dFtyK3ZdJiYoYVtCW3Rbcit2XV0rK109dik7aWYoZD0wPT09ZT8oQT1SPWEsMTkpOjE9PT1lPyhBPUYsSS09MjU3LFI9TixULT0yNTcsMjU2KTooQT1VLFI9UCwtMSksYj15LGM9cyxTPXY9RT0wLGw9LTEsZj0oQz0xPDwoeD1rKSktMSwxPT09ZSYmODUyPEN8fDI9PT1lJiY1OTI8QylyZXR1cm4gMTtmb3IoOzspe2ZvcihwPWItUyxfPWFbdl08ZD8obT0wLGFbdl0pOmFbdl0+ZD8obT1SW1QrYVt2XV0sQVtJK2Fbdl1dKToobT05NiwwKSxoPTE8PGItUyx5PXU9MTw8eDtpW2MrKEU+PlMpKyh1LT1oKV09cDw8MjR8bTw8MTZ8X3wwLDAhPT11Oyk7Zm9yKGg9MTw8Yi0xO0UmaDspaD4+PTE7aWYoMCE9PWg/KEUmPWgtMSxFKz1oKTpFPTAsdisrLDA9PS0tT1tiXSl7aWYoYj09PXcpYnJlYWs7Yj10W3IrYVt2XV19aWYoazxiJiYoRSZmKSE9PWwpe2ZvcigwPT09UyYmKFM9ayksYys9eSx6PTE8PCh4PWItUyk7eCtTPHcmJiEoKHotPU9beCtTXSk8PTApOyl4Kyssejw8PTE7aWYoQys9MTw8eCwxPT09ZSYmODUyPEN8fDI9PT1lJiY1OTI8QylyZXR1cm4gMTtpW2w9RSZmXT1rPDwyNHx4PDwxNnxjLXN8MH19cmV0dXJuIDAhPT1FJiYoaVtjK0VdPWItUzw8MjR8NjQ8PDE2fDApLG8uYml0cz1rLDB9fSx7XCIuLi91dGlscy9jb21tb25cIjo0MX1dLDUxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXsyOlwibmVlZCBkaWN0aW9uYXJ5XCIsMTpcInN0cmVhbSBlbmRcIiwwOlwiXCIsXCItMVwiOlwiZmlsZSBlcnJvclwiLFwiLTJcIjpcInN0cmVhbSBlcnJvclwiLFwiLTNcIjpcImRhdGEgZXJyb3JcIixcIi00XCI6XCJpbnN1ZmZpY2llbnQgbWVtb3J5XCIsXCItNVwiOlwiYnVmZmVyIGVycm9yXCIsXCItNlwiOlwiaW5jb21wYXRpYmxlIHZlcnNpb25cIn19LHt9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCIuLi91dGlscy9jb21tb25cIiksbz0wLGg9MTtmdW5jdGlvbiBuKGUpe2Zvcih2YXIgdD1lLmxlbmd0aDswPD0tLXQ7KWVbdF09MH12YXIgcz0wLGE9MjksdT0yNTYsbD11KzErYSxmPTMwLGM9MTksXz0yKmwrMSxnPTE1LGQ9MTYscD03LG09MjU2LGI9MTYsdj0xNyx5PTE4LHc9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0saz1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM10seD1bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10sUz1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sej1uZXcgQXJyYXkoMioobCsyKSk7bih6KTt2YXIgQz1uZXcgQXJyYXkoMipmKTtuKEMpO3ZhciBFPW5ldyBBcnJheSg1MTIpO24oRSk7dmFyIEE9bmV3IEFycmF5KDI1Nik7bihBKTt2YXIgST1uZXcgQXJyYXkoYSk7bihJKTt2YXIgTyxCLFIsVD1uZXcgQXJyYXkoZik7ZnVuY3Rpb24gRChlLHQscixuLGkpe3RoaXMuc3RhdGljX3RyZWU9ZSx0aGlzLmV4dHJhX2JpdHM9dCx0aGlzLmV4dHJhX2Jhc2U9cix0aGlzLmVsZW1zPW4sdGhpcy5tYXhfbGVuZ3RoPWksdGhpcy5oYXNfc3RyZWU9ZSYmZS5sZW5ndGh9ZnVuY3Rpb24gRihlLHQpe3RoaXMuZHluX3RyZWU9ZSx0aGlzLm1heF9jb2RlPTAsdGhpcy5zdGF0X2Rlc2M9dH1mdW5jdGlvbiBOKGUpe3JldHVybiBlPDI1Nj9FW2VdOkVbMjU2KyhlPj4+NyldfWZ1bmN0aW9uIFUoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmdCxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10Pj4+OCYyNTV9ZnVuY3Rpb24gUChlLHQscil7ZS5iaV92YWxpZD5kLXI/KGUuYmlfYnVmfD10PDxlLmJpX3ZhbGlkJjY1NTM1LFUoZSxlLmJpX2J1ZiksZS5iaV9idWY9dD4+ZC1lLmJpX3ZhbGlkLGUuYmlfdmFsaWQrPXItZCk6KGUuYmlfYnVmfD10PDxlLmJpX3ZhbGlkJjY1NTM1LGUuYmlfdmFsaWQrPXIpfWZ1bmN0aW9uIEwoZSx0LHIpe1AoZSxyWzIqdF0sclsyKnQrMV0pfWZ1bmN0aW9uIGooZSx0KXtmb3IodmFyIHI9MDtyfD0xJmUsZT4+Pj0xLHI8PD0xLDA8LS10Oyk7cmV0dXJuIHI+Pj4xfWZ1bmN0aW9uIFooZSx0LHIpe3ZhciBuLGkscz1uZXcgQXJyYXkoZysxKSxhPTA7Zm9yKG49MTtuPD1nO24rKylzW25dPWE9YStyW24tMV08PDE7Zm9yKGk9MDtpPD10O2krKyl7dmFyIG89ZVsyKmkrMV07MCE9PW8mJihlWzIqaV09aihzW29dKyssbykpfX1mdW5jdGlvbiBXKGUpe3ZhciB0O2Zvcih0PTA7dDxsO3QrKyllLmR5bl9sdHJlZVsyKnRdPTA7Zm9yKHQ9MDt0PGY7dCsrKWUuZHluX2R0cmVlWzIqdF09MDtmb3IodD0wO3Q8Yzt0KyspZS5ibF90cmVlWzIqdF09MDtlLmR5bl9sdHJlZVsyKm1dPTEsZS5vcHRfbGVuPWUuc3RhdGljX2xlbj0wLGUubGFzdF9saXQ9ZS5tYXRjaGVzPTB9ZnVuY3Rpb24gTShlKXs4PGUuYmlfdmFsaWQ/VShlLGUuYmlfYnVmKTowPGUuYmlfdmFsaWQmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT1lLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gSChlLHQscixuKXt2YXIgaT0yKnQscz0yKnI7cmV0dXJuIGVbaV08ZVtzXXx8ZVtpXT09PWVbc10mJm5bdF08PW5bcl19ZnVuY3Rpb24gRyhlLHQscil7Zm9yKHZhciBuPWUuaGVhcFtyXSxpPXI8PDE7aTw9ZS5oZWFwX2xlbiYmKGk8ZS5oZWFwX2xlbiYmSCh0LGUuaGVhcFtpKzFdLGUuaGVhcFtpXSxlLmRlcHRoKSYmaSsrLCFIKHQsbixlLmhlYXBbaV0sZS5kZXB0aCkpOyllLmhlYXBbcl09ZS5oZWFwW2ldLHI9aSxpPDw9MTtlLmhlYXBbcl09bn1mdW5jdGlvbiBLKGUsdCxyKXt2YXIgbixpLHMsYSxvPTA7aWYoMCE9PWUubGFzdF9saXQpZm9yKDtuPWUucGVuZGluZ19idWZbZS5kX2J1ZisyKm9dPDw4fGUucGVuZGluZ19idWZbZS5kX2J1ZisyKm8rMV0saT1lLnBlbmRpbmdfYnVmW2UubF9idWYrb10sbysrLDA9PT1uP0woZSxpLHQpOihMKGUsKHM9QVtpXSkrdSsxLHQpLDAhPT0oYT13W3NdKSYmUChlLGktPUlbc10sYSksTChlLHM9TigtLW4pLHIpLDAhPT0oYT1rW3NdKSYmUChlLG4tPVRbc10sYSkpLG88ZS5sYXN0X2xpdDspO0woZSxtLHQpfWZ1bmN0aW9uIFkoZSx0KXt2YXIgcixuLGkscz10LmR5bl90cmVlLGE9dC5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsbz10LnN0YXRfZGVzYy5oYXNfc3RyZWUsaD10LnN0YXRfZGVzYy5lbGVtcyx1PS0xO2ZvcihlLmhlYXBfbGVuPTAsZS5oZWFwX21heD1fLHI9MDtyPGg7cisrKTAhPT1zWzIqcl0/KGUuaGVhcFsrK2UuaGVhcF9sZW5dPXU9cixlLmRlcHRoW3JdPTApOnNbMipyKzFdPTA7Zm9yKDtlLmhlYXBfbGVuPDI7KXNbMiooaT1lLmhlYXBbKytlLmhlYXBfbGVuXT11PDI/Kyt1OjApXT0xLGUuZGVwdGhbaV09MCxlLm9wdF9sZW4tLSxvJiYoZS5zdGF0aWNfbGVuLT1hWzIqaSsxXSk7Zm9yKHQubWF4X2NvZGU9dSxyPWUuaGVhcF9sZW4+PjE7MTw9cjtyLS0pRyhlLHMscik7Zm9yKGk9aDtyPWUuaGVhcFsxXSxlLmhlYXBbMV09ZS5oZWFwW2UuaGVhcF9sZW4tLV0sRyhlLHMsMSksbj1lLmhlYXBbMV0sZS5oZWFwWy0tZS5oZWFwX21heF09cixlLmhlYXBbLS1lLmhlYXBfbWF4XT1uLHNbMippXT1zWzIqcl0rc1syKm5dLGUuZGVwdGhbaV09KGUuZGVwdGhbcl0+PWUuZGVwdGhbbl0/ZS5kZXB0aFtyXTplLmRlcHRoW25dKSsxLHNbMipyKzFdPXNbMipuKzFdPWksZS5oZWFwWzFdPWkrKyxHKGUscywxKSwyPD1lLmhlYXBfbGVuOyk7ZS5oZWFwWy0tZS5oZWFwX21heF09ZS5oZWFwWzFdLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsYSxvLGg9dC5keW5fdHJlZSx1PXQubWF4X2NvZGUsbD10LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxmPXQuc3RhdF9kZXNjLmhhc19zdHJlZSxjPXQuc3RhdF9kZXNjLmV4dHJhX2JpdHMsZD10LnN0YXRfZGVzYy5leHRyYV9iYXNlLHA9dC5zdGF0X2Rlc2MubWF4X2xlbmd0aCxtPTA7Zm9yKHM9MDtzPD1nO3MrKyllLmJsX2NvdW50W3NdPTA7Zm9yKGhbMiplLmhlYXBbZS5oZWFwX21heF0rMV09MCxyPWUuaGVhcF9tYXgrMTtyPF87cisrKXA8KHM9aFsyKmhbMioobj1lLmhlYXBbcl0pKzFdKzFdKzEpJiYocz1wLG0rKyksaFsyKm4rMV09cyx1PG58fChlLmJsX2NvdW50W3NdKyssYT0wLGQ8PW4mJihhPWNbbi1kXSksbz1oWzIqbl0sZS5vcHRfbGVuKz1vKihzK2EpLGYmJihlLnN0YXRpY19sZW4rPW8qKGxbMipuKzFdK2EpKSk7aWYoMCE9PW0pe2Rve2ZvcihzPXAtMTswPT09ZS5ibF9jb3VudFtzXTspcy0tO2UuYmxfY291bnRbc10tLSxlLmJsX2NvdW50W3MrMV0rPTIsZS5ibF9jb3VudFtwXS0tLG0tPTJ9d2hpbGUoMDxtKTtmb3Iocz1wOzAhPT1zO3MtLSlmb3Iobj1lLmJsX2NvdW50W3NdOzAhPT1uOyl1PChpPWUuaGVhcFstLXJdKXx8KGhbMippKzFdIT09cyYmKGUub3B0X2xlbis9KHMtaFsyKmkrMV0pKmhbMippXSxoWzIqaSsxXT1zKSxuLS0pfX0oZSx0KSxaKHMsdSxlLmJsX2NvdW50KX1mdW5jdGlvbiBYKGUsdCxyKXt2YXIgbixpLHM9LTEsYT10WzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9MyksdFsyKihyKzEpKzFdPTY1NTM1LG49MDtuPD1yO24rKylpPWEsYT10WzIqKG4rMSkrMV0sKytvPGgmJmk9PT1hfHwobzx1P2UuYmxfdHJlZVsyKmldKz1vOjAhPT1pPyhpIT09cyYmZS5ibF90cmVlWzIqaV0rKyxlLmJsX3RyZWVbMipiXSsrKTpvPD0xMD9lLmJsX3RyZWVbMip2XSsrOmUuYmxfdHJlZVsyKnldKysscz1pLHU9KG89MCk9PT1hPyhoPTEzOCwzKTppPT09YT8oaD02LDMpOihoPTcsNCkpfWZ1bmN0aW9uIFYoZSx0LHIpe3ZhciBuLGkscz0tMSxhPXRbMV0sbz0wLGg9Nyx1PTQ7Zm9yKDA9PT1hJiYoaD0xMzgsdT0zKSxuPTA7bjw9cjtuKyspaWYoaT1hLGE9dFsyKihuKzEpKzFdLCEoKytvPGgmJmk9PT1hKSl7aWYobzx1KWZvcig7TChlLGksZS5ibF90cmVlKSwwIT0tLW87KTtlbHNlIDAhPT1pPyhpIT09cyYmKEwoZSxpLGUuYmxfdHJlZSksby0tKSxMKGUsYixlLmJsX3RyZWUpLFAoZSxvLTMsMikpOm88PTEwPyhMKGUsdixlLmJsX3RyZWUpLFAoZSxvLTMsMykpOihMKGUseSxlLmJsX3RyZWUpLFAoZSxvLTExLDcpKTtzPWksdT0obz0wKT09PWE/KGg9MTM4LDMpOmk9PT1hPyhoPTYsMyk6KGg9Nyw0KX19bihUKTt2YXIgcT0hMTtmdW5jdGlvbiBKKGUsdCxyLG4pe1AoZSwoczw8MSkrKG4/MTowKSwzKSxmdW5jdGlvbihlLHQscixuKXtNKGUpLG4mJihVKGUsciksVShlLH5yKSksaS5hcnJheVNldChlLnBlbmRpbmdfYnVmLGUud2luZG93LHQscixlLnBlbmRpbmcpLGUucGVuZGluZys9cn0oZSx0LHIsITApfXIuX3RyX2luaXQ9ZnVuY3Rpb24oZSl7cXx8KGZ1bmN0aW9uKCl7dmFyIGUsdCxyLG4saSxzPW5ldyBBcnJheShnKzEpO2ZvcihuPXI9MDtuPGEtMTtuKyspZm9yKElbbl09cixlPTA7ZTwxPDx3W25dO2UrKylBW3IrK109bjtmb3IoQVtyLTFdPW4sbj1pPTA7bjwxNjtuKyspZm9yKFRbbl09aSxlPTA7ZTwxPDxrW25dO2UrKylFW2krK109bjtmb3IoaT4+PTc7bjxmO24rKylmb3IoVFtuXT1pPDw3LGU9MDtlPDE8PGtbbl0tNztlKyspRVsyNTYraSsrXT1uO2Zvcih0PTA7dDw9Zzt0Kyspc1t0XT0wO2ZvcihlPTA7ZTw9MTQzOyl6WzIqZSsxXT04LGUrKyxzWzhdKys7Zm9yKDtlPD0yNTU7KXpbMiplKzFdPTksZSsrLHNbOV0rKztmb3IoO2U8PTI3OTspelsyKmUrMV09NyxlKyssc1s3XSsrO2Zvcig7ZTw9Mjg3Oyl6WzIqZSsxXT04LGUrKyxzWzhdKys7Zm9yKFooeixsKzEscyksZT0wO2U8ZjtlKyspQ1syKmUrMV09NSxDWzIqZV09aihlLDUpO089bmV3IEQoeix3LHUrMSxsLGcpLEI9bmV3IEQoQyxrLDAsZixnKSxSPW5ldyBEKG5ldyBBcnJheSgwKSx4LDAsYyxwKX0oKSxxPSEwKSxlLmxfZGVzYz1uZXcgRihlLmR5bl9sdHJlZSxPKSxlLmRfZGVzYz1uZXcgRihlLmR5bl9kdHJlZSxCKSxlLmJsX2Rlc2M9bmV3IEYoZS5ibF90cmVlLFIpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wLFcoZSl9LHIuX3RyX3N0b3JlZF9ibG9jaz1KLHIuX3RyX2ZsdXNoX2Jsb2NrPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpLHMsYT0wOzA8ZS5sZXZlbD8oMj09PWUuc3RybS5kYXRhX3R5cGUmJihlLnN0cm0uZGF0YV90eXBlPWZ1bmN0aW9uKGUpe3ZhciB0LHI9NDA5MzYyNDQ0Nztmb3IodD0wO3Q8PTMxO3QrKyxyPj4+PTEpaWYoMSZyJiYwIT09ZS5keW5fbHRyZWVbMip0XSlyZXR1cm4gbztpZigwIT09ZS5keW5fbHRyZWVbMThdfHwwIT09ZS5keW5fbHRyZWVbMjBdfHwwIT09ZS5keW5fbHRyZWVbMjZdKXJldHVybiBoO2Zvcih0PTMyO3Q8dTt0KyspaWYoMCE9PWUuZHluX2x0cmVlWzIqdF0pcmV0dXJuIGg7cmV0dXJuIG99KGUpKSxZKGUsZS5sX2Rlc2MpLFkoZSxlLmRfZGVzYyksYT1mdW5jdGlvbihlKXt2YXIgdDtmb3IoWChlLGUuZHluX2x0cmVlLGUubF9kZXNjLm1heF9jb2RlKSxYKGUsZS5keW5fZHRyZWUsZS5kX2Rlc2MubWF4X2NvZGUpLFkoZSxlLmJsX2Rlc2MpLHQ9Yy0xOzM8PXQmJjA9PT1lLmJsX3RyZWVbMipTW3RdKzFdO3QtLSk7cmV0dXJuIGUub3B0X2xlbis9MyoodCsxKSs1KzUrNCx0fShlKSxpPWUub3B0X2xlbiszKzc+Pj4zLChzPWUuc3RhdGljX2xlbiszKzc+Pj4zKTw9aSYmKGk9cykpOmk9cz1yKzUscis0PD1pJiYtMSE9PXQ/SihlLHQscixuKTo0PT09ZS5zdHJhdGVneXx8cz09PWk/KFAoZSwyKyhuPzE6MCksMyksSyhlLHosQykpOihQKGUsNCsobj8xOjApLDMpLGZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpO2ZvcihQKGUsdC0yNTcsNSksUChlLHItMSw1KSxQKGUsbi00LDQpLGk9MDtpPG47aSsrKVAoZSxlLmJsX3RyZWVbMipTW2ldKzFdLDMpO1YoZSxlLmR5bl9sdHJlZSx0LTEpLFYoZSxlLmR5bl9kdHJlZSxyLTEpfShlLGUubF9kZXNjLm1heF9jb2RlKzEsZS5kX2Rlc2MubWF4X2NvZGUrMSxhKzEpLEsoZSxlLmR5bl9sdHJlZSxlLmR5bl9kdHJlZSkpLFcoZSksbiYmTShlKX0sci5fdHJfdGFsbHk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLnBlbmRpbmdfYnVmW2UuZF9idWYrMiplLmxhc3RfbGl0XT10Pj4+OCYyNTUsZS5wZW5kaW5nX2J1ZltlLmRfYnVmKzIqZS5sYXN0X2xpdCsxXT0yNTUmdCxlLnBlbmRpbmdfYnVmW2UubF9idWYrZS5sYXN0X2xpdF09MjU1JnIsZS5sYXN0X2xpdCsrLDA9PT10P2UuZHluX2x0cmVlWzIqcl0rKzooZS5tYXRjaGVzKyssdC0tLGUuZHluX2x0cmVlWzIqKEFbcl0rdSsxKV0rKyxlLmR5bl9kdHJlZVsyKk4odCldKyspLGUubGFzdF9saXQ9PT1lLmxpdF9idWZzaXplLTF9LHIuX3RyX2FsaWduPWZ1bmN0aW9uKGUpe1AoZSwyLDMpLEwoZSxtLHopLGZ1bmN0aW9uKGUpezE2PT09ZS5iaV92YWxpZD8oVShlLGUuYmlfYnVmKSxlLmJpX2J1Zj0wLGUuYmlfdmFsaWQ9MCk6ODw9ZS5iaV92YWxpZCYmKGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPTI1NSZlLmJpX2J1ZixlLmJpX2J1Zj4+PTgsZS5iaV92YWxpZC09OCl9KGUpfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMuaW5wdXQ9bnVsbCx0aGlzLm5leHRfaW49MCx0aGlzLmF2YWlsX2luPTAsdGhpcy50b3RhbF9pbj0wLHRoaXMub3V0cHV0PW51bGwsdGhpcy5uZXh0X291dD0wLHRoaXMuYXZhaWxfb3V0PTAsdGhpcy50b3RhbF9vdXQ9MCx0aGlzLm1zZz1cIlwiLHRoaXMuc3RhdGU9bnVsbCx0aGlzLmRhdGFfdHlwZT0yLHRoaXMuYWRsZXI9MH19LHt9XSw1NDpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihlKXshZnVuY3Rpb24ocixuKXtcInVzZSBzdHJpY3RcIjtpZighci5zZXRJbW1lZGlhdGUpe3ZhciBpLHMsdCxhLG89MSxoPXt9LHU9ITEsbD1yLmRvY3VtZW50LGU9T2JqZWN0LmdldFByb3RvdHlwZU9mJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Yocik7ZT1lJiZlLnNldFRpbWVvdXQ/ZTpyLGk9XCJbb2JqZWN0IHByb2Nlc3NdXCI9PT17fS50b1N0cmluZy5jYWxsKHIucHJvY2Vzcyk/ZnVuY3Rpb24oZSl7cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpe2MoZSl9KX06ZnVuY3Rpb24oKXtpZihyLnBvc3RNZXNzYWdlJiYhci5pbXBvcnRTY3JpcHRzKXt2YXIgZT0hMCx0PXIub25tZXNzYWdlO3JldHVybiByLm9ubWVzc2FnZT1mdW5jdGlvbigpe2U9ITF9LHIucG9zdE1lc3NhZ2UoXCJcIixcIipcIiksci5vbm1lc3NhZ2U9dCxlfX0oKT8oYT1cInNldEltbWVkaWF0ZSRcIitNYXRoLnJhbmRvbSgpK1wiJFwiLHIuYWRkRXZlbnRMaXN0ZW5lcj9yLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZCwhMSk6ci5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLGQpLGZ1bmN0aW9uKGUpe3IucG9zdE1lc3NhZ2UoYStlLFwiKlwiKX0pOnIuTWVzc2FnZUNoYW5uZWw/KCh0PW5ldyBNZXNzYWdlQ2hhbm5lbCkucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKGUpe2MoZS5kYXRhKX0sZnVuY3Rpb24oZSl7dC5wb3J0Mi5wb3N0TWVzc2FnZShlKX0pOmwmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBsLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/KHM9bC5kb2N1bWVudEVsZW1lbnQsZnVuY3Rpb24oZSl7dmFyIHQ9bC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3Qub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7YyhlKSx0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLHMucmVtb3ZlQ2hpbGQodCksdD1udWxsfSxzLmFwcGVuZENoaWxkKHQpfSk6ZnVuY3Rpb24oZSl7c2V0VGltZW91dChjLDAsZSl9LGUuc2V0SW1tZWRpYXRlPWZ1bmN0aW9uKGUpe1wiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJihlPW5ldyBGdW5jdGlvbihcIlwiK2UpKTtmb3IodmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSkscj0wO3I8dC5sZW5ndGg7cisrKXRbcl09YXJndW1lbnRzW3IrMV07dmFyIG49e2NhbGxiYWNrOmUsYXJnczp0fTtyZXR1cm4gaFtvXT1uLGkobyksbysrfSxlLmNsZWFySW1tZWRpYXRlPWZ9ZnVuY3Rpb24gZihlKXtkZWxldGUgaFtlXX1mdW5jdGlvbiBjKGUpe2lmKHUpc2V0VGltZW91dChjLDAsZSk7ZWxzZXt2YXIgdD1oW2VdO2lmKHQpe3U9ITA7dHJ5eyFmdW5jdGlvbihlKXt2YXIgdD1lLmNhbGxiYWNrLHI9ZS5hcmdzO3N3aXRjaChyLmxlbmd0aCl7Y2FzZSAwOnQoKTticmVhaztjYXNlIDE6dChyWzBdKTticmVhaztjYXNlIDI6dChyWzBdLHJbMV0pO2JyZWFrO2Nhc2UgMzp0KHJbMF0sclsxXSxyWzJdKTticmVhaztkZWZhdWx0OnQuYXBwbHkobixyKX19KHQpfWZpbmFsbHl7ZihlKSx1PSExfX19fWZ1bmN0aW9uIGQoZSl7ZS5zb3VyY2U9PT1yJiZcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09ZS5kYXRhLmluZGV4T2YoYSkmJmMoK2UuZGF0YS5zbGljZShhLmxlbmd0aCkpfX0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGY/dm9pZCAwPT09ZT90aGlzOmU6c2VsZil9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzEwXSkoMTApfSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBcImZiNTE3Zjc4MTg2MzgyNWQ0NjZhXCIgKyBcIi5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZShpbWdQYXRoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9O1xuICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBJbWFnZSAke2ltZ1BhdGh9IGNhbm5vdCBiZSBsb2FkZWRgKSk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSBpbWdQYXRoO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50VG9IZXgoYykge1xuICB2YXIgaGV4ID0gYy50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgucGFkU3RhcnQoMiwgXCIwXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYikge1xuICByZXR1cm4gXCIjXCIgKyBjb21wb25lbnRUb0hleChyKSArIGNvbXBvbmVudFRvSGV4KGcpICsgY29tcG9uZW50VG9IZXgoYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VOdW1iZXIoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBpZiAoc3RvcmVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHN0b3JlZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICB9XG59XG4iLCIvKiFcbiogQHN2Z2RvdGpzL3N2Zy5qcyAtIEEgbGlnaHR3ZWlnaHQgbGlicmFyeSBmb3IgbWFuaXB1bGF0aW5nIGFuZCBhbmltYXRpbmcgU1ZHLlxuKiBAdmVyc2lvbiAzLjEuMlxuKiBodHRwczovL3N2Z2pzLmRldi9cbipcbiogQGNvcHlyaWdodCBXb3V0IEZpZXJlbnMgPHdvdXRAbWljay13b3V0LmNvbT5cbiogQGxpY2Vuc2UgTUlUXG4qXG4qIEJVSUxUOiBXZWQgSmFuIDI2IDIwMjIgMjM6MTk6MDcgR01UKzAxMDAgKE1pdHRlbGV1cm9ww6Rpc2NoZSBOb3JtYWx6ZWl0KVxuKi87XG5jb25zdCBtZXRob2RzJDEgPSB7fTtcbmNvbnN0IG5hbWVzID0gW107XG5mdW5jdGlvbiByZWdpc3Rlck1ldGhvZHMobmFtZSwgbSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgIGZvciAoY29uc3QgX25hbWUgb2YgbmFtZSkge1xuICAgICAgcmVnaXN0ZXJNZXRob2RzKF9uYW1lLCBtKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yIChjb25zdCBfbmFtZSBpbiBuYW1lKSB7XG4gICAgICByZWdpc3Rlck1ldGhvZHMoX25hbWUsIG5hbWVbX25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBhZGRNZXRob2ROYW1lcyhPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhtKSk7XG4gIG1ldGhvZHMkMVtuYW1lXSA9IE9iamVjdC5hc3NpZ24obWV0aG9kcyQxW25hbWVdIHx8IHt9LCBtKTtcbn1cbmZ1bmN0aW9uIGdldE1ldGhvZHNGb3IobmFtZSkge1xuICByZXR1cm4gbWV0aG9kcyQxW25hbWVdIHx8IHt9O1xufVxuZnVuY3Rpb24gZ2V0TWV0aG9kTmFtZXMoKSB7XG4gIHJldHVybiBbLi4ubmV3IFNldChuYW1lcyldO1xufVxuZnVuY3Rpb24gYWRkTWV0aG9kTmFtZXMoX25hbWVzKSB7XG4gIG5hbWVzLnB1c2goLi4uX25hbWVzKTtcbn1cblxuLy8gTWFwIGZ1bmN0aW9uXG5mdW5jdGlvbiBtYXAoYXJyYXksIGJsb2NrKSB7XG4gIGxldCBpO1xuICBjb25zdCBpbCA9IGFycmF5Lmxlbmd0aDtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IGlsOyBpKyspIHtcbiAgICByZXN1bHQucHVzaChibG9jayhhcnJheVtpXSkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0gLy8gRmlsdGVyIGZ1bmN0aW9uXG5cbmZ1bmN0aW9uIGZpbHRlcihhcnJheSwgYmxvY2spIHtcbiAgbGV0IGk7XG4gIGNvbnN0IGlsID0gYXJyYXkubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgaWw7IGkrKykge1xuICAgIGlmIChibG9jayhhcnJheVtpXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBEZWdyZWVzIHRvIHJhZGlhbnNcblxuZnVuY3Rpb24gcmFkaWFucyhkKSB7XG4gIHJldHVybiBkICUgMzYwICogTWF0aC5QSSAvIDE4MDtcbn0gLy8gUmFkaWFucyB0byBkZWdyZWVzXG5cbmZ1bmN0aW9uIGRlZ3JlZXMocikge1xuICByZXR1cm4gciAqIDE4MCAvIE1hdGguUEkgJSAzNjA7XG59IC8vIENvbnZlcnQgZGFzaC1zZXBhcmF0ZWQtc3RyaW5nIHRvIGNhbWVsQ2FzZVxuXG5mdW5jdGlvbiBjYW1lbENhc2Uocykge1xuICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG0sIGcpIHtcbiAgICByZXR1cm4gZy50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn0gLy8gQ29udmVydCBjYW1lbCBjYXNlZCBzdHJpbmcgdG8gZGFzaCBzZXBhcmF0ZWRcblxuZnVuY3Rpb24gdW5DYW1lbENhc2Uocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChtLCBnKSB7XG4gICAgcmV0dXJuICctJyArIGcudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59IC8vIENhcGl0YWxpemUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nXG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG59IC8vIENhbGN1bGF0ZSBwcm9wb3J0aW9uYWwgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXMgd2hlbiBuZWNlc3NhcnlcblxuZnVuY3Rpb24gcHJvcG9ydGlvbmFsU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBib3gpIHtcbiAgaWYgKHdpZHRoID09IG51bGwgfHwgaGVpZ2h0ID09IG51bGwpIHtcbiAgICBib3ggPSBib3ggfHwgZWxlbWVudC5iYm94KCk7XG5cbiAgICBpZiAod2lkdGggPT0gbnVsbCkge1xuICAgICAgd2lkdGggPSBib3gud2lkdGggLyBib3guaGVpZ2h0ICogaGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgIGhlaWdodCA9IGJveC5oZWlnaHQgLyBib3gud2lkdGggKiB3aWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gYWRkcyBzdXBwb3J0IGZvciBzdHJpbmcgb3JpZ2lucy5cclxuICogSXQgc2VhcmNoZXMgZm9yIGFuIG9yaWdpbiBpbiBvLm9yaWdpbiBvLm94IGFuZCBvLm9yaWdpblguXHJcbiAqIFRoaXMgd2F5LCBvcmlnaW46IHt4OiAnY2VudGVyJywgeTogNTB9IGNhbiBiZSBwYXNzZWQgYXMgd2VsbCBhcyBveDogJ2NlbnRlcicsIG95OiA1MFxyXG4qKi9cblxuZnVuY3Rpb24gZ2V0T3JpZ2luKG8sIGVsZW1lbnQpIHtcbiAgY29uc3Qgb3JpZ2luID0gby5vcmlnaW47IC8vIEZpcnN0IGNoZWNrIGlmIG9yaWdpbiBpcyBpbiBveCBvciBvcmlnaW5YXG5cbiAgbGV0IG94ID0gby5veCAhPSBudWxsID8gby5veCA6IG8ub3JpZ2luWCAhPSBudWxsID8gby5vcmlnaW5YIDogJ2NlbnRlcic7XG4gIGxldCBveSA9IG8ub3kgIT0gbnVsbCA/IG8ub3kgOiBvLm9yaWdpblkgIT0gbnVsbCA/IG8ub3JpZ2luWSA6ICdjZW50ZXInOyAvLyBUaGVuIGNoZWNrIGlmIG9yaWdpbiB3YXMgdXNlZCBhbmQgb3ZlcndyaXRlIGluIHRoYXQgY2FzZVxuXG4gIGlmIChvcmlnaW4gIT0gbnVsbCkge1xuICAgIFtveCwgb3ldID0gQXJyYXkuaXNBcnJheShvcmlnaW4pID8gb3JpZ2luIDogdHlwZW9mIG9yaWdpbiA9PT0gJ29iamVjdCcgPyBbb3JpZ2luLngsIG9yaWdpbi55XSA6IFtvcmlnaW4sIG9yaWdpbl07XG4gIH0gLy8gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCBiYm94IHdoZW4gYWN0dWFsbHkgbmVlZGVkXG5cblxuICBjb25zdCBjb25kWCA9IHR5cGVvZiBveCA9PT0gJ3N0cmluZyc7XG4gIGNvbnN0IGNvbmRZID0gdHlwZW9mIG95ID09PSAnc3RyaW5nJztcblxuICBpZiAoY29uZFggfHwgY29uZFkpIHtcbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQsXG4gICAgICB3aWR0aCxcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IGVsZW1lbnQuYmJveCgpOyAvLyBBbmQgb25seSBvdmVyd3JpdGUgaWYgc3RyaW5nIHdhcyBwYXNzZWQgZm9yIHRoaXMgc3BlY2lmaWMgYXhpc1xuXG4gICAgaWYgKGNvbmRYKSB7XG4gICAgICBveCA9IG94LmluY2x1ZGVzKCdsZWZ0JykgPyB4IDogb3guaW5jbHVkZXMoJ3JpZ2h0JykgPyB4ICsgd2lkdGggOiB4ICsgd2lkdGggLyAyO1xuICAgIH1cblxuICAgIGlmIChjb25kWSkge1xuICAgICAgb3kgPSBveS5pbmNsdWRlcygndG9wJykgPyB5IDogb3kuaW5jbHVkZXMoJ2JvdHRvbScpID8geSArIGhlaWdodCA6IHkgKyBoZWlnaHQgLyAyO1xuICAgIH1cbiAgfSAvLyBSZXR1cm4gdGhlIG9yaWdpbiBhcyBpdCBpcyBpZiBpdCB3YXNuJ3QgYSBzdHJpbmdcblxuXG4gIHJldHVybiBbb3gsIG95XTtcbn1cblxudmFyIHV0aWxzID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIG1hcDogbWFwLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgcmFkaWFuczogcmFkaWFucyxcbiAgZGVncmVlczogZGVncmVlcyxcbiAgY2FtZWxDYXNlOiBjYW1lbENhc2UsXG4gIHVuQ2FtZWxDYXNlOiB1bkNhbWVsQ2FzZSxcbiAgY2FwaXRhbGl6ZTogY2FwaXRhbGl6ZSxcbiAgcHJvcG9ydGlvbmFsU2l6ZTogcHJvcG9ydGlvbmFsU2l6ZSxcbiAgZ2V0T3JpZ2luOiBnZXRPcmlnaW5cbn07XG5cbi8vIERlZmF1bHQgbmFtZXNwYWNlc1xuY29uc3Qgc3ZnID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IGh0bWwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5jb25zdCB4bWxucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5jb25zdCB4bGluayA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcbmNvbnN0IHN2Z2pzID0gJ2h0dHA6Ly9zdmdqcy5kZXYvc3ZnanMnO1xuXG52YXIgbmFtZXNwYWNlcyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBzdmc6IHN2ZyxcbiAgaHRtbDogaHRtbCxcbiAgeG1sbnM6IHhtbG5zLFxuICB4bGluazogeGxpbmssXG4gIHN2Z2pzOiBzdmdqc1xufTtcblxuY29uc3QgZ2xvYmFscyA9IHtcbiAgd2luZG93OiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3csXG4gIGRvY3VtZW50OiB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGRvY3VtZW50XG59O1xuZnVuY3Rpb24gcmVnaXN0ZXJXaW5kb3cod2luID0gbnVsbCwgZG9jID0gbnVsbCkge1xuICBnbG9iYWxzLndpbmRvdyA9IHdpbjtcbiAgZ2xvYmFscy5kb2N1bWVudCA9IGRvYztcbn1cbmNvbnN0IHNhdmUgPSB7fTtcbmZ1bmN0aW9uIHNhdmVXaW5kb3coKSB7XG4gIHNhdmUud2luZG93ID0gZ2xvYmFscy53aW5kb3c7XG4gIHNhdmUuZG9jdW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50O1xufVxuZnVuY3Rpb24gcmVzdG9yZVdpbmRvdygpIHtcbiAgZ2xvYmFscy53aW5kb3cgPSBzYXZlLndpbmRvdztcbiAgZ2xvYmFscy5kb2N1bWVudCA9IHNhdmUuZG9jdW1lbnQ7XG59XG5mdW5jdGlvbiB3aXRoV2luZG93KHdpbiwgZm4pIHtcbiAgc2F2ZVdpbmRvdygpO1xuICByZWdpc3RlcldpbmRvdyh3aW4sIHdpbi5kb2N1bWVudCk7XG4gIGZuKHdpbiwgd2luLmRvY3VtZW50KTtcbiAgcmVzdG9yZVdpbmRvdygpO1xufVxuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICByZXR1cm4gZ2xvYmFscy53aW5kb3c7XG59XG5cbmNsYXNzIEJhc2Ugey8vIGNvbnN0cnVjdG9yIChub2RlLyosIHtleHRlbnNpb25zID0gW119ICovKSB7XG4gIC8vICAgLy8gdGhpcy50YWdzID0gW11cbiAgLy8gICAvL1xuICAvLyAgIC8vIGZvciAobGV0IGV4dGVuc2lvbiBvZiBleHRlbnNpb25zKSB7XG4gIC8vICAgLy8gICBleHRlbnNpb24uc2V0dXAuY2FsbCh0aGlzLCBub2RlKVxuICAvLyAgIC8vICAgdGhpcy50YWdzLnB1c2goZXh0ZW5zaW9uLm5hbWUpXG4gIC8vICAgLy8gfVxuICAvLyB9XG59XG5cbmNvbnN0IGVsZW1lbnRzID0ge307XG5jb25zdCByb290ID0gJ19fX1NZTUJPTF9fX1JPT1RfX18nOyAvLyBNZXRob2QgZm9yIGVsZW1lbnQgY3JlYXRpb25cblxuZnVuY3Rpb24gY3JlYXRlKG5hbWUsIG5zID0gc3ZnKSB7XG4gIC8vIGNyZWF0ZSBlbGVtZW50XG4gIHJldHVybiBnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgbmFtZSk7XG59XG5mdW5jdGlvbiBtYWtlSW5zdGFuY2UoZWxlbWVudCwgaXNIVE1MID0gZmFsc2UpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBCYXNlKSByZXR1cm4gZWxlbWVudDtcblxuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGFkb3B0ZXIoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBlbGVtZW50c1tyb290XSgpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPT0gJzwnKSB7XG4gICAgcmV0dXJuIGFkb3B0ZXIoZ2xvYmFscy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpKTtcbiAgfSAvLyBNYWtlIHN1cmUsIHRoYXQgSFRNTCBlbGVtZW50cyBhcmUgY3JlYXRlZCB3aXRoIHRoZSBjb3JyZWN0IG5hbWVzcGFjZVxuXG5cbiAgY29uc3Qgd3JhcHBlciA9IGlzSFRNTCA/IGdsb2JhbHMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBjcmVhdGUoJ3N2ZycpO1xuICB3cmFwcGVyLmlubmVySFRNTCA9IGVsZW1lbnQ7IC8vIFdlIGNhbiB1c2UgZmlyc3RDaGlsZCBoZXJlIGJlY2F1c2Ugd2Uga25vdyxcbiAgLy8gdGhhdCB0aGUgZmlyc3QgY2hhciBpcyA8IGFuZCB0aHVzIGFuIGVsZW1lbnRcblxuICBlbGVtZW50ID0gYWRvcHRlcih3cmFwcGVyLmZpcnN0Q2hpbGQpOyAvLyBtYWtlIHN1cmUsIHRoYXQgZWxlbWVudCBkb2VzbnQgaGF2ZSBpdHMgd3JhcHBlciBhdHRhY2hlZFxuXG4gIHdyYXBwZXIucmVtb3ZlQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBub2RlT3JOZXcobmFtZSwgbm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZSBpbnN0YW5jZW9mIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5Ob2RlID8gbm9kZSA6IGNyZWF0ZShuYW1lKTtcbn0gLy8gQWRvcHQgZXhpc3Rpbmcgc3ZnIGVsZW1lbnRzXG5cbmZ1bmN0aW9uIGFkb3B0KG5vZGUpIHtcbiAgLy8gY2hlY2sgZm9yIHByZXNlbmNlIG9mIG5vZGVcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDsgLy8gbWFrZSBzdXJlIGEgbm9kZSBpc24ndCBhbHJlYWR5IGFkb3B0ZWRcblxuICBpZiAobm9kZS5pbnN0YW5jZSBpbnN0YW5jZW9mIEJhc2UpIHJldHVybiBub2RlLmluc3RhbmNlO1xuXG4gIGlmIChub2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50LWZyYWdtZW50Jykge1xuICAgIHJldHVybiBuZXcgZWxlbWVudHMuRnJhZ21lbnQobm9kZSk7XG4gIH0gLy8gaW5pdGlhbGl6ZSB2YXJpYWJsZXNcblxuXG4gIGxldCBjbGFzc05hbWUgPSBjYXBpdGFsaXplKG5vZGUubm9kZU5hbWUgfHwgJ0RvbScpOyAvLyBNYWtlIHN1cmUgdGhhdCBncmFkaWVudHMgYXJlIGFkb3B0ZWQgY29ycmVjdGx5XG5cbiAgaWYgKGNsYXNzTmFtZSA9PT0gJ0xpbmVhckdyYWRpZW50JyB8fCBjbGFzc05hbWUgPT09ICdSYWRpYWxHcmFkaWVudCcpIHtcbiAgICBjbGFzc05hbWUgPSAnR3JhZGllbnQnOyAvLyBGYWxsYmFjayB0byBEb20gaWYgZWxlbWVudCBpcyBub3Qga25vd25cbiAgfSBlbHNlIGlmICghZWxlbWVudHNbY2xhc3NOYW1lXSkge1xuICAgIGNsYXNzTmFtZSA9ICdEb20nO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBlbGVtZW50c1tjbGFzc05hbWVdKG5vZGUpO1xufVxubGV0IGFkb3B0ZXIgPSBhZG9wdDtcbmZ1bmN0aW9uIG1vY2tBZG9wdChtb2NrID0gYWRvcHQpIHtcbiAgYWRvcHRlciA9IG1vY2s7XG59XG5mdW5jdGlvbiByZWdpc3RlcihlbGVtZW50LCBuYW1lID0gZWxlbWVudC5uYW1lLCBhc1Jvb3QgPSBmYWxzZSkge1xuICBlbGVtZW50c1tuYW1lXSA9IGVsZW1lbnQ7XG4gIGlmIChhc1Jvb3QpIGVsZW1lbnRzW3Jvb3RdID0gZWxlbWVudDtcbiAgYWRkTWV0aG9kTmFtZXMoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZWxlbWVudC5wcm90b3R5cGUpKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBnZXRDbGFzcyhuYW1lKSB7XG4gIHJldHVybiBlbGVtZW50c1tuYW1lXTtcbn0gLy8gRWxlbWVudCBpZCBzZXF1ZW5jZVxuXG5sZXQgZGlkID0gMTAwMDsgLy8gR2V0IG5leHQgbmFtZWQgZWxlbWVudCBpZFxuXG5mdW5jdGlvbiBlaWQobmFtZSkge1xuICByZXR1cm4gJ1N2Z2pzJyArIGNhcGl0YWxpemUobmFtZSkgKyBkaWQrKztcbn0gLy8gRGVlcCBuZXcgaWQgYXNzaWdubWVudFxuXG5mdW5jdGlvbiBhc3NpZ25OZXdJZChub2RlKSB7XG4gIC8vIGRvIHRoZSBzYW1lIGZvciBTVkcgY2hpbGQgbm9kZXMgYXMgd2VsbFxuICBmb3IgKGxldCBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGFzc2lnbk5ld0lkKG5vZGUuY2hpbGRyZW5baV0pO1xuICB9XG5cbiAgaWYgKG5vZGUuaWQpIHtcbiAgICBub2RlLmlkID0gZWlkKG5vZGUubm9kZU5hbWUpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IC8vIE1ldGhvZCBmb3IgZXh0ZW5kaW5nIG9iamVjdHNcblxuZnVuY3Rpb24gZXh0ZW5kKG1vZHVsZXMsIG1ldGhvZHMpIHtcbiAgbGV0IGtleSwgaTtcbiAgbW9kdWxlcyA9IEFycmF5LmlzQXJyYXkobW9kdWxlcykgPyBtb2R1bGVzIDogW21vZHVsZXNdO1xuXG4gIGZvciAoaSA9IG1vZHVsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBtb2R1bGVzW2ldLnByb3RvdHlwZVtrZXldID0gbWV0aG9kc1trZXldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gd3JhcFdpdGhBdHRyQ2hlY2soZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgY29uc3QgbyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChvICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiAhKG8gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzLnNsaWNlKDAsIC0xKSkuYXR0cihvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2libGluZ3MoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudCgpLmNoaWxkcmVuKCk7XG59IC8vIEdldCB0aGUgY3VycmVudCBwb3NpdGlvbiBzaWJsaW5nc1xuXG5mdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50KCkuaW5kZXgodGhpcyk7XG59IC8vIEdldCB0aGUgbmV4dCBlbGVtZW50ICh3aWxsIHJldHVybiBudWxsIGlmIHRoZXJlIGlzIG5vbmUpXG5cbmZ1bmN0aW9uIG5leHQoKSB7XG4gIHJldHVybiB0aGlzLnNpYmxpbmdzKClbdGhpcy5wb3NpdGlvbigpICsgMV07XG59IC8vIEdldCB0aGUgbmV4dCBlbGVtZW50ICh3aWxsIHJldHVybiBudWxsIGlmIHRoZXJlIGlzIG5vbmUpXG5cbmZ1bmN0aW9uIHByZXYoKSB7XG4gIHJldHVybiB0aGlzLnNpYmxpbmdzKClbdGhpcy5wb3NpdGlvbigpIC0gMV07XG59IC8vIFNlbmQgZ2l2ZW4gZWxlbWVudCBvbmUgc3RlcCBmb3J3YXJkXG5cbmZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gIGNvbnN0IGkgPSB0aGlzLnBvc2l0aW9uKCk7XG4gIGNvbnN0IHAgPSB0aGlzLnBhcmVudCgpOyAvLyBtb3ZlIG5vZGUgb25lIHN0ZXAgZm9yd2FyZFxuXG4gIHAuYWRkKHRoaXMucmVtb3ZlKCksIGkgKyAxKTtcbiAgcmV0dXJuIHRoaXM7XG59IC8vIFNlbmQgZ2l2ZW4gZWxlbWVudCBvbmUgc3RlcCBiYWNrd2FyZFxuXG5mdW5jdGlvbiBiYWNrd2FyZCgpIHtcbiAgY29uc3QgaSA9IHRoaXMucG9zaXRpb24oKTtcbiAgY29uc3QgcCA9IHRoaXMucGFyZW50KCk7XG4gIHAuYWRkKHRoaXMucmVtb3ZlKCksIGkgPyBpIC0gMSA6IDApO1xuICByZXR1cm4gdGhpcztcbn0gLy8gU2VuZCBnaXZlbiBlbGVtZW50IGFsbCB0aGUgd2F5IHRvIHRoZSBmcm9udFxuXG5mdW5jdGlvbiBmcm9udCgpIHtcbiAgY29uc3QgcCA9IHRoaXMucGFyZW50KCk7IC8vIE1vdmUgbm9kZSBmb3J3YXJkXG5cbiAgcC5hZGQodGhpcy5yZW1vdmUoKSk7XG4gIHJldHVybiB0aGlzO1xufSAvLyBTZW5kIGdpdmVuIGVsZW1lbnQgYWxsIHRoZSB3YXkgdG8gdGhlIGJhY2tcblxuZnVuY3Rpb24gYmFjaygpIHtcbiAgY29uc3QgcCA9IHRoaXMucGFyZW50KCk7IC8vIE1vdmUgbm9kZSBiYWNrXG5cbiAgcC5hZGQodGhpcy5yZW1vdmUoKSwgMCk7XG4gIHJldHVybiB0aGlzO1xufSAvLyBJbnNlcnRzIGEgZ2l2ZW4gZWxlbWVudCBiZWZvcmUgdGhlIHRhcmdldGVkIGVsZW1lbnRcblxuZnVuY3Rpb24gYmVmb3JlKGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IG1ha2VJbnN0YW5jZShlbGVtZW50KTtcbiAgZWxlbWVudC5yZW1vdmUoKTtcbiAgY29uc3QgaSA9IHRoaXMucG9zaXRpb24oKTtcbiAgdGhpcy5wYXJlbnQoKS5hZGQoZWxlbWVudCwgaSk7XG4gIHJldHVybiB0aGlzO1xufSAvLyBJbnNlcnRzIGEgZ2l2ZW4gZWxlbWVudCBhZnRlciB0aGUgdGFyZ2V0ZWQgZWxlbWVudFxuXG5mdW5jdGlvbiBhZnRlcihlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBtYWtlSW5zdGFuY2UoZWxlbWVudCk7XG4gIGVsZW1lbnQucmVtb3ZlKCk7XG4gIGNvbnN0IGkgPSB0aGlzLnBvc2l0aW9uKCk7XG4gIHRoaXMucGFyZW50KCkuYWRkKGVsZW1lbnQsIGkgKyAxKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoZWxlbWVudCkge1xuICBlbGVtZW50ID0gbWFrZUluc3RhbmNlKGVsZW1lbnQpO1xuICBlbGVtZW50LmJlZm9yZSh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBpbnNlcnRBZnRlcihlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBtYWtlSW5zdGFuY2UoZWxlbWVudCk7XG4gIGVsZW1lbnQuYWZ0ZXIodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxucmVnaXN0ZXJNZXRob2RzKCdEb20nLCB7XG4gIHNpYmxpbmdzLFxuICBwb3NpdGlvbixcbiAgbmV4dCxcbiAgcHJldixcbiAgZm9yd2FyZCxcbiAgYmFja3dhcmQsXG4gIGZyb250LFxuICBiYWNrLFxuICBiZWZvcmUsXG4gIGFmdGVyLFxuICBpbnNlcnRCZWZvcmUsXG4gIGluc2VydEFmdGVyXG59KTtcblxuLy8gUGFyc2UgdW5pdCB2YWx1ZVxuY29uc3QgbnVtYmVyQW5kVW5pdCA9IC9eKFsrLV0/KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPykoW2EteiVdKikkL2k7IC8vIFBhcnNlIGhleCB2YWx1ZVxuXG5jb25zdCBoZXggPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pOyAvLyBQYXJzZSByZ2IgdmFsdWVcblxuY29uc3QgcmdiID0gL3JnYlxcKChcXGQrKSwoXFxkKyksKFxcZCspXFwpLzsgLy8gUGFyc2UgcmVmZXJlbmNlIGlkXG5cbmNvbnN0IHJlZmVyZW5jZSA9IC8oI1thLXpfXVthLXowLTlcXC1fXSopL2k7IC8vIHNwbGl0cyBhIHRyYW5zZm9ybWF0aW9uIGNoYWluXG5cbmNvbnN0IHRyYW5zZm9ybXMgPSAvXFwpXFxzKiw/XFxzKi87IC8vIFdoaXRlc3BhY2VcblxuY29uc3Qgd2hpdGVzcGFjZSA9IC9cXHMvZzsgLy8gVGVzdCBoZXggdmFsdWVcblxuY29uc3QgaXNIZXggPSAvXiNbYS1mMC05XXszfSR8XiNbYS1mMC05XXs2fSQvaTsgLy8gVGVzdCByZ2IgdmFsdWVcblxuY29uc3QgaXNSZ2IgPSAvXnJnYlxcKC87IC8vIFRlc3QgZm9yIGJsYW5rIHN0cmluZ1xuXG5jb25zdCBpc0JsYW5rID0gL14oXFxzKyk/JC87IC8vIFRlc3QgZm9yIG51bWVyaWMgc3RyaW5nXG5cbmNvbnN0IGlzTnVtYmVyID0gL15bKy1dPyhcXGQrKFxcLlxcZCopP3xcXC5cXGQrKShlWystXT9cXGQrKT8kL2k7IC8vIFRlc3QgZm9yIGltYWdlIHVybFxuXG5jb25zdCBpc0ltYWdlID0gL1xcLihqcGd8anBlZ3xwbmd8Z2lmfHN2ZykoXFw/W149XSsuKik/L2k7IC8vIHNwbGl0IGF0IHdoaXRlc3BhY2UgYW5kIGNvbW1hXG5cbmNvbnN0IGRlbGltaXRlciA9IC9bXFxzLF0rLzsgLy8gVGVzdCBmb3IgcGF0aCBsZXR0ZXJcblxuY29uc3QgaXNQYXRoTGV0dGVyID0gL1tNTEhWQ1NRVEFaXS9pO1xuXG52YXIgcmVnZXggPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgbnVtYmVyQW5kVW5pdDogbnVtYmVyQW5kVW5pdCxcbiAgaGV4OiBoZXgsXG4gIHJnYjogcmdiLFxuICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgdHJhbnNmb3JtczogdHJhbnNmb3JtcyxcbiAgd2hpdGVzcGFjZTogd2hpdGVzcGFjZSxcbiAgaXNIZXg6IGlzSGV4LFxuICBpc1JnYjogaXNSZ2IsXG4gIGlzQmxhbms6IGlzQmxhbmssXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNJbWFnZTogaXNJbWFnZSxcbiAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gIGlzUGF0aExldHRlcjogaXNQYXRoTGV0dGVyXG59O1xuXG5mdW5jdGlvbiBjbGFzc2VzKCkge1xuICBjb25zdCBhdHRyID0gdGhpcy5hdHRyKCdjbGFzcycpO1xuICByZXR1cm4gYXR0ciA9PSBudWxsID8gW10gOiBhdHRyLnRyaW0oKS5zcGxpdChkZWxpbWl0ZXIpO1xufSAvLyBSZXR1cm4gdHJ1ZSBpZiBjbGFzcyBleGlzdHMgb24gdGhlIG5vZGUsIGZhbHNlIG90aGVyd2lzZVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhuYW1lKSB7XG4gIHJldHVybiB0aGlzLmNsYXNzZXMoKS5pbmRleE9mKG5hbWUpICE9PSAtMTtcbn0gLy8gQWRkIGNsYXNzIHRvIHRoZSBub2RlXG5cbmZ1bmN0aW9uIGFkZENsYXNzKG5hbWUpIHtcbiAgaWYgKCF0aGlzLmhhc0NsYXNzKG5hbWUpKSB7XG4gICAgY29uc3QgYXJyYXkgPSB0aGlzLmNsYXNzZXMoKTtcbiAgICBhcnJheS5wdXNoKG5hbWUpO1xuICAgIHRoaXMuYXR0cignY2xhc3MnLCBhcnJheS5qb2luKCcgJykpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59IC8vIFJlbW92ZSBjbGFzcyBmcm9tIHRoZSBub2RlXG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5hbWUpIHtcbiAgaWYgKHRoaXMuaGFzQ2xhc3MobmFtZSkpIHtcbiAgICB0aGlzLmF0dHIoJ2NsYXNzJywgdGhpcy5jbGFzc2VzKCkuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYyAhPT0gbmFtZTtcbiAgICB9KS5qb2luKCcgJykpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59IC8vIFRvZ2dsZSB0aGUgcHJlc2VuY2Ugb2YgYSBjbGFzcyBvbiB0aGUgbm9kZVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhuYW1lKSB7XG4gIHJldHVybiB0aGlzLmhhc0NsYXNzKG5hbWUpID8gdGhpcy5yZW1vdmVDbGFzcyhuYW1lKSA6IHRoaXMuYWRkQ2xhc3MobmFtZSk7XG59XG5yZWdpc3Rlck1ldGhvZHMoJ0RvbScsIHtcbiAgY2xhc3NlcyxcbiAgaGFzQ2xhc3MsXG4gIGFkZENsYXNzLFxuICByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3Ncbn0pO1xuXG5mdW5jdGlvbiBjc3Moc3R5bGUsIHZhbCkge1xuICBjb25zdCByZXQgPSB7fTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIGdldCBmdWxsIHN0eWxlIGFzIG9iamVjdFxuICAgIHRoaXMubm9kZS5zdHlsZS5jc3NUZXh0LnNwbGl0KC9cXHMqO1xccyovKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gISFlbC5sZW5ndGg7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGNvbnN0IHQgPSBlbC5zcGxpdCgvXFxzKjpcXHMqLyk7XG4gICAgICByZXRbdFswXV0gPSB0WzFdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAvLyBnZXQgc3R5bGUgcHJvcGVydGllcyBhcyBhcnJheVxuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHN0eWxlKSB7XG4gICAgICAgIGNvbnN0IGNhc2VkID0gY2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICByZXRbbmFtZV0gPSB0aGlzLm5vZGUuc3R5bGVbY2FzZWRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gZ2V0IHN0eWxlIGZvciBwcm9wZXJ0eVxuXG5cbiAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHlsZVtjYW1lbENhc2Uoc3R5bGUpXTtcbiAgICB9IC8vIHNldCBzdHlsZXMgaW4gb2JqZWN0XG5cblxuICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgLy8gc2V0IGVtcHR5IHN0cmluZyBpZiBudWxsL3VuZGVmaW5lZC8nJyB3YXMgZ2l2ZW5cbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlW2NhbWVsQ2FzZShuYW1lKV0gPSBzdHlsZVtuYW1lXSA9PSBudWxsIHx8IGlzQmxhbmsudGVzdChzdHlsZVtuYW1lXSkgPyAnJyA6IHN0eWxlW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBzZXQgc3R5bGUgZm9yIHByb3BlcnR5XG5cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHRoaXMubm9kZS5zdHlsZVtjYW1lbENhc2Uoc3R5bGUpXSA9IHZhbCA9PSBudWxsIHx8IGlzQmxhbmsudGVzdCh2YWwpID8gJycgOiB2YWw7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn0gLy8gU2hvdyBlbGVtZW50XG5cbmZ1bmN0aW9uIHNob3coKSB7XG4gIHJldHVybiB0aGlzLmNzcygnZGlzcGxheScsICcnKTtcbn0gLy8gSGlkZSBlbGVtZW50XG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIHJldHVybiB0aGlzLmNzcygnZGlzcGxheScsICdub25lJyk7XG59IC8vIElzIGVsZW1lbnQgdmlzaWJsZT9cblxuZnVuY3Rpb24gdmlzaWJsZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3NzKCdkaXNwbGF5JykgIT09ICdub25lJztcbn1cbnJlZ2lzdGVyTWV0aG9kcygnRG9tJywge1xuICBjc3MsXG4gIHNob3csXG4gIGhpZGUsXG4gIHZpc2libGVcbn0pO1xuXG5mdW5jdGlvbiBkYXRhKGEsIHYsIHIpIHtcbiAgaWYgKGEgPT0gbnVsbCkge1xuICAgIC8vIGdldCBhbiBvYmplY3Qgb2YgYXR0cmlidXRlc1xuICAgIHJldHVybiB0aGlzLmRhdGEobWFwKGZpbHRlcih0aGlzLm5vZGUuYXR0cmlidXRlcywgZWwgPT4gZWwubm9kZU5hbWUuaW5kZXhPZignZGF0YS0nKSA9PT0gMCksIGVsID0+IGVsLm5vZGVOYW1lLnNsaWNlKDUpKSk7XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgYSkge1xuICAgICAgZGF0YVtrZXldID0gdGhpcy5kYXRhKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2IGluIGEpIHtcbiAgICAgIHRoaXMuZGF0YSh2LCBhW3ZdKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5hdHRyKCdkYXRhLScgKyBhKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZGF0YS0nICsgYSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuYXR0cignZGF0YS0nICsgYSwgdiA9PT0gbnVsbCA/IG51bGwgOiByID09PSB0cnVlIHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcicgPyB2IDogSlNPTi5zdHJpbmdpZnkodikpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5yZWdpc3Rlck1ldGhvZHMoJ0RvbScsIHtcbiAgZGF0YVxufSk7XG5cbmZ1bmN0aW9uIHJlbWVtYmVyKGssIHYpIHtcbiAgLy8gcmVtZW1iZXIgZXZlcnkgaXRlbSBpbiBhbiBvYmplY3QgaW5kaXZpZHVhbGx5XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGspIHtcbiAgICAgIHRoaXMucmVtZW1iZXIoa2V5LCBrW2tleV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gcmV0cmlldmUgbWVtb3J5XG4gICAgcmV0dXJuIHRoaXMubWVtb3J5KClba107XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RvcmUgbWVtb3J5XG4gICAgdGhpcy5tZW1vcnkoKVtrXSA9IHY7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn0gLy8gRXJhc2UgYSBnaXZlbiBtZW1vcnlcblxuZnVuY3Rpb24gZm9yZ2V0KCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMuX21lbW9yeSA9IHt9O1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1lbW9yeSgpW2FyZ3VtZW50c1tpXV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59IC8vIFRoaXMgdHJpZ2dlcnMgY3JlYXRpb24gb2YgYSBuZXcgaGlkZGVuIGNsYXNzIHdoaWNoIGlzIG5vdCBwZXJmb3JtYW50XG4vLyBIb3dldmVyLCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCByYXJlbHkgdXNlZCBzbyBpdCB3aWxsIG5vdCBoYXBwZW4gZnJlcXVlbnRseVxuLy8gUmV0dXJuIGxvY2FsIG1lbW9yeSBvYmplY3RcblxuZnVuY3Rpb24gbWVtb3J5KCkge1xuICByZXR1cm4gdGhpcy5fbWVtb3J5ID0gdGhpcy5fbWVtb3J5IHx8IHt9O1xufVxucmVnaXN0ZXJNZXRob2RzKCdEb20nLCB7XG4gIHJlbWVtYmVyLFxuICBmb3JnZXQsXG4gIG1lbW9yeVxufSk7XG5cbmZ1bmN0aW9uIHNpeERpZ2l0SGV4KGhleCkge1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gNCA/IFsnIycsIGhleC5zdWJzdHJpbmcoMSwgMiksIGhleC5zdWJzdHJpbmcoMSwgMiksIGhleC5zdWJzdHJpbmcoMiwgMyksIGhleC5zdWJzdHJpbmcoMiwgMyksIGhleC5zdWJzdHJpbmcoMywgNCksIGhleC5zdWJzdHJpbmcoMywgNCldLmpvaW4oJycpIDogaGV4O1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRIZXgoY29tcG9uZW50KSB7XG4gIGNvbnN0IGludGVnZXIgPSBNYXRoLnJvdW5kKGNvbXBvbmVudCk7XG4gIGNvbnN0IGJvdW5kZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGludGVnZXIpKTtcbiAgY29uc3QgaGV4ID0gYm91bmRlZC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gJzAnICsgaGV4IDogaGV4O1xufVxuXG5mdW5jdGlvbiBpcyhvYmplY3QsIHNwYWNlKSB7XG4gIGZvciAobGV0IGkgPSBzcGFjZS5sZW5ndGg7IGktLTspIHtcbiAgICBpZiAob2JqZWN0W3NwYWNlW2ldXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmFtZXRlcnMoYSwgYikge1xuICBjb25zdCBwYXJhbXMgPSBpcyhhLCAncmdiJykgPyB7XG4gICAgX2E6IGEucixcbiAgICBfYjogYS5nLFxuICAgIF9jOiBhLmIsXG4gICAgX2Q6IDAsXG4gICAgc3BhY2U6ICdyZ2InXG4gIH0gOiBpcyhhLCAneHl6JykgPyB7XG4gICAgX2E6IGEueCxcbiAgICBfYjogYS55LFxuICAgIF9jOiBhLnosXG4gICAgX2Q6IDAsXG4gICAgc3BhY2U6ICd4eXonXG4gIH0gOiBpcyhhLCAnaHNsJykgPyB7XG4gICAgX2E6IGEuaCxcbiAgICBfYjogYS5zLFxuICAgIF9jOiBhLmwsXG4gICAgX2Q6IDAsXG4gICAgc3BhY2U6ICdoc2wnXG4gIH0gOiBpcyhhLCAnbGFiJykgPyB7XG4gICAgX2E6IGEubCxcbiAgICBfYjogYS5hLFxuICAgIF9jOiBhLmIsXG4gICAgX2Q6IDAsXG4gICAgc3BhY2U6ICdsYWInXG4gIH0gOiBpcyhhLCAnbGNoJykgPyB7XG4gICAgX2E6IGEubCxcbiAgICBfYjogYS5jLFxuICAgIF9jOiBhLmgsXG4gICAgX2Q6IDAsXG4gICAgc3BhY2U6ICdsY2gnXG4gIH0gOiBpcyhhLCAnY215aycpID8ge1xuICAgIF9hOiBhLmMsXG4gICAgX2I6IGEubSxcbiAgICBfYzogYS55LFxuICAgIF9kOiBhLmssXG4gICAgc3BhY2U6ICdjbXlrJ1xuICB9IDoge1xuICAgIF9hOiAwLFxuICAgIF9iOiAwLFxuICAgIF9jOiAwLFxuICAgIHNwYWNlOiAncmdiJ1xuICB9O1xuICBwYXJhbXMuc3BhY2UgPSBiIHx8IHBhcmFtcy5zcGFjZTtcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZnVuY3Rpb24gY2llU3BhY2Uoc3BhY2UpIHtcbiAgaWYgKHNwYWNlID09PSAnbGFiJyB8fCBzcGFjZSA9PT0gJ3h5eicgfHwgc3BhY2UgPT09ICdsY2gnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGh1ZVRvUmdiKHAsIHEsIHQpIHtcbiAgaWYgKHQgPCAwKSB0ICs9IDE7XG4gIGlmICh0ID4gMSkgdCAtPSAxO1xuICBpZiAodCA8IDEgLyA2KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgaWYgKHQgPCAxIC8gMikgcmV0dXJuIHE7XG4gIGlmICh0IDwgMiAvIDMpIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgcmV0dXJuIHA7XG59XG5cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoLi4uaW5wdXRzKSB7XG4gICAgdGhpcy5pbml0KC4uLmlucHV0cyk7XG4gIH0gLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yXG5cblxuICBzdGF0aWMgaXNDb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjb2xvciAmJiAoY29sb3IgaW5zdGFuY2VvZiBDb2xvciB8fCB0aGlzLmlzUmdiKGNvbG9yKSB8fCB0aGlzLnRlc3QoY29sb3IpKTtcbiAgfSAvLyBUZXN0IGlmIGdpdmVuIHZhbHVlIGlzIGFuIHJnYiBvYmplY3RcblxuXG4gIHN0YXRpYyBpc1JnYihjb2xvcikge1xuICAgIHJldHVybiBjb2xvciAmJiB0eXBlb2YgY29sb3IuciA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGNvbG9yLmcgPT09ICdudW1iZXInICYmIHR5cGVvZiBjb2xvci5iID09PSAnbnVtYmVyJztcbiAgfVxuICAvKlxyXG4gIEdlbmVyYXRpbmcgcmFuZG9tIGNvbG9yc1xyXG4gICovXG5cblxuICBzdGF0aWMgcmFuZG9tKG1vZGUgPSAndmlicmFudCcsIHQsIHUpIHtcbiAgICAvLyBHZXQgdGhlIG1hdGggbW9kdWxlc1xuICAgIGNvbnN0IHtcbiAgICAgIHJhbmRvbSxcbiAgICAgIHJvdW5kLFxuICAgICAgc2luLFxuICAgICAgUEk6IHBpXG4gICAgfSA9IE1hdGg7IC8vIFJ1biB0aGUgY29ycmVjdCBnZW5lcmF0b3JcblxuICAgIGlmIChtb2RlID09PSAndmlicmFudCcpIHtcbiAgICAgIGNvbnN0IGwgPSAoODEgLSA1NykgKiByYW5kb20oKSArIDU3O1xuICAgICAgY29uc3QgYyA9ICg4MyAtIDQ1KSAqIHJhbmRvbSgpICsgNDU7XG4gICAgICBjb25zdCBoID0gMzYwICogcmFuZG9tKCk7XG4gICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihsLCBjLCBoLCAnbGNoJyk7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnc2luZScpIHtcbiAgICAgIHQgPSB0ID09IG51bGwgPyByYW5kb20oKSA6IHQ7XG4gICAgICBjb25zdCByID0gcm91bmQoODAgKiBzaW4oMiAqIHBpICogdCAvIDAuNSArIDAuMDEpICsgMTUwKTtcbiAgICAgIGNvbnN0IGcgPSByb3VuZCg1MCAqIHNpbigyICogcGkgKiB0IC8gMC41ICsgNC42KSArIDIwMCk7XG4gICAgICBjb25zdCBiID0gcm91bmQoMTAwICogc2luKDIgKiBwaSAqIHQgLyAwLjUgKyAyLjMpICsgMTUwKTtcbiAgICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKHIsIGcsIGIpO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3Bhc3RlbCcpIHtcbiAgICAgIGNvbnN0IGwgPSAoOTQgLSA4NikgKiByYW5kb20oKSArIDg2O1xuICAgICAgY29uc3QgYyA9ICgyNiAtIDkpICogcmFuZG9tKCkgKyA5O1xuICAgICAgY29uc3QgaCA9IDM2MCAqIHJhbmRvbSgpO1xuICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IobCwgYywgaCwgJ2xjaCcpO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICBjb25zdCBsID0gMTAgKyAxMCAqIHJhbmRvbSgpO1xuICAgICAgY29uc3QgYyA9ICgxMjUgLSA3NSkgKiByYW5kb20oKSArIDg2O1xuICAgICAgY29uc3QgaCA9IDM2MCAqIHJhbmRvbSgpO1xuICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IobCwgYywgaCwgJ2xjaCcpO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3JnYicpIHtcbiAgICAgIGNvbnN0IHIgPSAyNTUgKiByYW5kb20oKTtcbiAgICAgIGNvbnN0IGcgPSAyNTUgKiByYW5kb20oKTtcbiAgICAgIGNvbnN0IGIgPSAyNTUgKiByYW5kb20oKTtcbiAgICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKHIsIGcsIGIpO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2xhYicpIHtcbiAgICAgIGNvbnN0IGwgPSAxMDAgKiByYW5kb20oKTtcbiAgICAgIGNvbnN0IGEgPSAyNTYgKiByYW5kb20oKSAtIDEyODtcbiAgICAgIGNvbnN0IGIgPSAyNTYgKiByYW5kb20oKSAtIDEyODtcbiAgICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKGwsIGEsIGIsICdsYWInKTtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdncmV5Jykge1xuICAgICAgY29uc3QgZ3JleSA9IDI1NSAqIHJhbmRvbSgpO1xuICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IoZ3JleSwgZ3JleSwgZ3JleSk7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgcmFuZG9tIGNvbG9yIG1vZGUnKTtcbiAgICB9XG4gIH0gLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yIHN0cmluZ1xuXG5cbiAgc3RhdGljIHRlc3QoY29sb3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJyAmJiAoaXNIZXgudGVzdChjb2xvcikgfHwgaXNSZ2IudGVzdChjb2xvcikpO1xuICB9XG5cbiAgY215aygpIHtcbiAgICAvLyBHZXQgdGhlIHJnYiB2YWx1ZXMgZm9yIHRoZSBjdXJyZW50IGNvbG9yXG4gICAgY29uc3Qge1xuICAgICAgX2EsXG4gICAgICBfYixcbiAgICAgIF9jXG4gICAgfSA9IHRoaXMucmdiKCk7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gW19hLCBfYiwgX2NdLm1hcCh2ID0+IHYgLyAyNTUpOyAvLyBHZXQgdGhlIGNteWsgdmFsdWVzIGluIGFuIHVuYm91bmRlZCBmb3JtYXRcblxuICAgIGNvbnN0IGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblxuICAgIGlmIChrID09PSAxKSB7XG4gICAgICAvLyBDYXRjaCB0aGUgYmxhY2sgY2FzZVxuICAgICAgcmV0dXJuIG5ldyBDb2xvcigwLCAwLCAwLCAxLCAnY215aycpO1xuICAgIH1cblxuICAgIGNvbnN0IGMgPSAoMSAtIHIgLSBrKSAvICgxIC0gayk7XG4gICAgY29uc3QgbSA9ICgxIC0gZyAtIGspIC8gKDEgLSBrKTtcbiAgICBjb25zdCB5ID0gKDEgLSBiIC0gaykgLyAoMSAtIGspOyAvLyBDb25zdHJ1Y3QgdGhlIG5ldyBjb2xvclxuXG4gICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IoYywgbSwgeSwgaywgJ2NteWsnKTtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBoc2woKSB7XG4gICAgLy8gR2V0IHRoZSByZ2IgdmFsdWVzXG4gICAgY29uc3Qge1xuICAgICAgX2EsXG4gICAgICBfYixcbiAgICAgIF9jXG4gICAgfSA9IHRoaXMucmdiKCk7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gW19hLCBfYiwgX2NdLm1hcCh2ID0+IHYgLyAyNTUpOyAvLyBGaW5kIHRoZSBtYXhpbXVtIGFuZCBtaW5pbXVtIHZhbHVlcyB0byBnZXQgdGhlIGxpZ2h0bmVzc1xuXG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgY29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjsgLy8gSWYgdGhlIHIsIGcsIHYgdmFsdWVzIGFyZSBpZGVudGljYWwgdGhlbiB3ZSBhcmUgZ3JleVxuXG4gICAgY29uc3QgaXNHcmV5ID0gbWF4ID09PSBtaW47IC8vIENhbGN1bGF0ZSB0aGUgaHVlIGFuZCBzYXR1cmF0aW9uXG5cbiAgICBjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICBjb25zdCBzID0gaXNHcmV5ID8gMCA6IGwgPiAwLjUgPyBkZWx0YSAvICgyIC0gbWF4IC0gbWluKSA6IGRlbHRhIC8gKG1heCArIG1pbik7XG4gICAgY29uc3QgaCA9IGlzR3JleSA/IDAgOiBtYXggPT09IHIgPyAoKGcgLSBiKSAvIGRlbHRhICsgKGcgPCBiID8gNiA6IDApKSAvIDYgOiBtYXggPT09IGcgPyAoKGIgLSByKSAvIGRlbHRhICsgMikgLyA2IDogbWF4ID09PSBiID8gKChyIC0gZykgLyBkZWx0YSArIDQpIC8gNiA6IDA7IC8vIENvbnN0cnVjdCBhbmQgcmV0dXJuIHRoZSBuZXcgY29sb3JcblxuICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKDM2MCAqIGgsIDEwMCAqIHMsIDEwMCAqIGwsICdoc2wnKTtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpbml0KGEgPSAwLCBiID0gMCwgYyA9IDAsIGQgPSAwLCBzcGFjZSA9ICdyZ2InKSB7XG4gICAgLy8gVGhpcyBjYXRjaGVzIHRoZSBjYXNlIHdoZW4gYSBmYWxzeSB2YWx1ZSBpcyBwYXNzZWQgbGlrZSAnJ1xuICAgIGEgPSAhYSA/IDAgOiBhOyAvLyBSZXNldCBhbGwgdmFsdWVzIGluIGNhc2UgdGhlIGluaXQgZnVuY3Rpb24gaXMgcmVydW4gd2l0aCBuZXcgY29sb3Igc3BhY2VcblxuICAgIGlmICh0aGlzLnNwYWNlKSB7XG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBpbiB0aGlzLnNwYWNlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW3RoaXMuc3BhY2VbY29tcG9uZW50XV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gQWxsb3cgZm9yIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgbmVlZCBkLi4uXG4gICAgICBzcGFjZSA9IHR5cGVvZiBkID09PSAnc3RyaW5nJyA/IGQgOiBzcGFjZTtcbiAgICAgIGQgPSB0eXBlb2YgZCA9PT0gJ3N0cmluZycgPyAwIDogZDsgLy8gQXNzaWduIHRoZSB2YWx1ZXMgc3RyYWlnaHQgdG8gdGhlIGNvbG9yXG5cbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgICBfYTogYSxcbiAgICAgICAgX2I6IGIsXG4gICAgICAgIF9jOiBjLFxuICAgICAgICBfZDogZCxcbiAgICAgICAgc3BhY2VcbiAgICAgIH0pOyAvLyBJZiB0aGUgdXNlciBnYXZlIHVzIGFuIGFycmF5LCBtYWtlIHRoZSBjb2xvciBmcm9tIGl0XG4gICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMuc3BhY2UgPSBiIHx8ICh0eXBlb2YgYVszXSA9PT0gJ3N0cmluZycgPyBhWzNdIDogYVs0XSkgfHwgJ3JnYic7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgX2E6IGFbMF0sXG4gICAgICAgIF9iOiBhWzFdLFxuICAgICAgICBfYzogYVsyXSxcbiAgICAgICAgX2Q6IGFbM10gfHwgMFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAvLyBTZXQgdGhlIG9iamVjdCB1cCBhbmQgYXNzaWduIGl0cyB2YWx1ZXMgZGlyZWN0bHlcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGdldFBhcmFtZXRlcnMoYSwgYik7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHZhbHVlcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChpc1JnYi50ZXN0KGEpKSB7XG4gICAgICAgIGNvbnN0IG5vV2hpdGVzcGFjZSA9IGEucmVwbGFjZSh3aGl0ZXNwYWNlLCAnJyk7XG4gICAgICAgIGNvbnN0IFtfYSwgX2IsIF9jXSA9IHJnYi5leGVjKG5vV2hpdGVzcGFjZSkuc2xpY2UoMSwgNCkubWFwKHYgPT4gcGFyc2VJbnQodikpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgICBfYSxcbiAgICAgICAgICBfYixcbiAgICAgICAgICBfYyxcbiAgICAgICAgICBfZDogMCxcbiAgICAgICAgICBzcGFjZTogJ3JnYidcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzSGV4LnRlc3QoYSkpIHtcbiAgICAgICAgY29uc3QgaGV4UGFyc2UgPSB2ID0+IHBhcnNlSW50KHYsIDE2KTtcblxuICAgICAgICBjb25zdCBbLCBfYSwgX2IsIF9jXSA9IGhleC5leGVjKHNpeERpZ2l0SGV4KGEpKS5tYXAoaGV4UGFyc2UpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgICBfYSxcbiAgICAgICAgICBfYixcbiAgICAgICAgICBfYyxcbiAgICAgICAgICBfZDogMCxcbiAgICAgICAgICBzcGFjZTogJ3JnYidcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0cmluZyBmb3JtYXQsIGNhblxcJ3QgY29uc3RydWN0IENvbG9yJyk7XG4gICAgfSAvLyBOb3cgYWRkIHRoZSBjb21wb25lbnRzIGFzIGEgY29udmVuaWVuY2VcblxuXG4gICAgY29uc3Qge1xuICAgICAgX2EsXG4gICAgICBfYixcbiAgICAgIF9jLFxuICAgICAgX2RcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy5zcGFjZSA9PT0gJ3JnYicgPyB7XG4gICAgICByOiBfYSxcbiAgICAgIGc6IF9iLFxuICAgICAgYjogX2NcbiAgICB9IDogdGhpcy5zcGFjZSA9PT0gJ3h5eicgPyB7XG4gICAgICB4OiBfYSxcbiAgICAgIHk6IF9iLFxuICAgICAgejogX2NcbiAgICB9IDogdGhpcy5zcGFjZSA9PT0gJ2hzbCcgPyB7XG4gICAgICBoOiBfYSxcbiAgICAgIHM6IF9iLFxuICAgICAgbDogX2NcbiAgICB9IDogdGhpcy5zcGFjZSA9PT0gJ2xhYicgPyB7XG4gICAgICBsOiBfYSxcbiAgICAgIGE6IF9iLFxuICAgICAgYjogX2NcbiAgICB9IDogdGhpcy5zcGFjZSA9PT0gJ2xjaCcgPyB7XG4gICAgICBsOiBfYSxcbiAgICAgIGM6IF9iLFxuICAgICAgaDogX2NcbiAgICB9IDogdGhpcy5zcGFjZSA9PT0gJ2NteWsnID8ge1xuICAgICAgYzogX2EsXG4gICAgICBtOiBfYixcbiAgICAgIHk6IF9jLFxuICAgICAgazogX2RcbiAgICB9IDoge307XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb21wb25lbnRzKTtcbiAgfVxuXG4gIGxhYigpIHtcbiAgICAvLyBHZXQgdGhlIHh5eiBjb2xvclxuICAgIGNvbnN0IHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgelxuICAgIH0gPSB0aGlzLnh5eigpOyAvLyBHZXQgdGhlIGxhYiBjb21wb25lbnRzXG5cbiAgICBjb25zdCBsID0gMTE2ICogeSAtIDE2O1xuICAgIGNvbnN0IGEgPSA1MDAgKiAoeCAtIHkpO1xuICAgIGNvbnN0IGIgPSAyMDAgKiAoeSAtIHopOyAvLyBDb25zdHJ1Y3QgYW5kIHJldHVybiBhIG5ldyBjb2xvclxuXG4gICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IobCwgYSwgYiwgJ2xhYicpO1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGxjaCgpIHtcbiAgICAvLyBHZXQgdGhlIGxhYiBjb2xvciBkaXJlY3RseVxuICAgIGNvbnN0IHtcbiAgICAgIGwsXG4gICAgICBhLFxuICAgICAgYlxuICAgIH0gPSB0aGlzLmxhYigpOyAvLyBHZXQgdGhlIGNocm9tYXRpY2l0eSBhbmQgdGhlIGh1ZSB1c2luZyBwb2xhciBjb29yZGluYXRlc1xuXG4gICAgY29uc3QgYyA9IE1hdGguc3FydChhICoqIDIgKyBiICoqIDIpO1xuICAgIGxldCBoID0gMTgwICogTWF0aC5hdGFuMihiLCBhKSAvIE1hdGguUEk7XG5cbiAgICBpZiAoaCA8IDApIHtcbiAgICAgIGggKj0gLTE7XG4gICAgICBoID0gMzYwIC0gaDtcbiAgICB9IC8vIE1ha2UgYSBuZXcgY29sb3IgYW5kIHJldHVybiBpdFxuXG5cbiAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihsLCBjLCBoLCAnbGNoJyk7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIC8qXHJcbiAgQ29udmVyc2lvbiBNZXRob2RzXHJcbiAgKi9cblxuXG4gIHJnYigpIHtcbiAgICBpZiAodGhpcy5zcGFjZSA9PT0gJ3JnYicpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoY2llU3BhY2UodGhpcy5zcGFjZSkpIHtcbiAgICAgIC8vIENvbnZlcnQgdG8gdGhlIHh5eiBjb2xvciBzcGFjZVxuICAgICAgbGV0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgelxuICAgICAgfSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnNwYWNlID09PSAnbGFiJyB8fCB0aGlzLnNwYWNlID09PSAnbGNoJykge1xuICAgICAgICAvLyBHZXQgdGhlIHZhbHVlcyBpbiB0aGUgbGFiIHNwYWNlXG4gICAgICAgIGxldCB7XG4gICAgICAgICAgbCxcbiAgICAgICAgICBhLFxuICAgICAgICAgIGJcbiAgICAgICAgfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuc3BhY2UgPT09ICdsY2gnKSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYyxcbiAgICAgICAgICAgIGhcbiAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBkVG9SID0gTWF0aC5QSSAvIDE4MDtcbiAgICAgICAgICBhID0gYyAqIE1hdGguY29zKGRUb1IgKiBoKTtcbiAgICAgICAgICBiID0gYyAqIE1hdGguc2luKGRUb1IgKiBoKTtcbiAgICAgICAgfSAvLyBVbmRvIHRoZSBub25saW5lYXIgZnVuY3Rpb25cblxuXG4gICAgICAgIGNvbnN0IHlMID0gKGwgKyAxNikgLyAxMTY7XG4gICAgICAgIGNvbnN0IHhMID0gYSAvIDUwMCArIHlMO1xuICAgICAgICBjb25zdCB6TCA9IHlMIC0gYiAvIDIwMDsgLy8gR2V0IHRoZSB4eXogdmFsdWVzXG5cbiAgICAgICAgY29uc3QgY3QgPSAxNiAvIDExNjtcbiAgICAgICAgY29uc3QgbXggPSAwLjAwODg1NjtcbiAgICAgICAgY29uc3Qgbm0gPSA3Ljc4NztcbiAgICAgICAgeCA9IDAuOTUwNDcgKiAoeEwgKiogMyA+IG14ID8geEwgKiogMyA6ICh4TCAtIGN0KSAvIG5tKTtcbiAgICAgICAgeSA9IDEuMDAwMDAgKiAoeUwgKiogMyA+IG14ID8geUwgKiogMyA6ICh5TCAtIGN0KSAvIG5tKTtcbiAgICAgICAgeiA9IDEuMDg4ODMgKiAoekwgKiogMyA+IG14ID8gekwgKiogMyA6ICh6TCAtIGN0KSAvIG5tKTtcbiAgICAgIH0gLy8gQ29udmVydCB4eXogdG8gdW5ib3VuZGVkIHJnYiB2YWx1ZXNcblxuXG4gICAgICBjb25zdCByVSA9IHggKiAzLjI0MDYgKyB5ICogLTEuNTM3MiArIHogKiAtMC40OTg2O1xuICAgICAgY29uc3QgZ1UgPSB4ICogLTAuOTY4OSArIHkgKiAxLjg3NTggKyB6ICogMC4wNDE1O1xuICAgICAgY29uc3QgYlUgPSB4ICogMC4wNTU3ICsgeSAqIC0wLjIwNDAgKyB6ICogMS4wNTcwOyAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgdG8gdHJ1ZSByZ2IgdmFsdWVzXG5cbiAgICAgIGNvbnN0IHBvdyA9IE1hdGgucG93O1xuICAgICAgY29uc3QgYmQgPSAwLjAwMzEzMDg7XG4gICAgICBjb25zdCByID0gclUgPiBiZCA/IDEuMDU1ICogcG93KHJVLCAxIC8gMi40KSAtIDAuMDU1IDogMTIuOTIgKiByVTtcbiAgICAgIGNvbnN0IGcgPSBnVSA+IGJkID8gMS4wNTUgKiBwb3coZ1UsIDEgLyAyLjQpIC0gMC4wNTUgOiAxMi45MiAqIGdVO1xuICAgICAgY29uc3QgYiA9IGJVID4gYmQgPyAxLjA1NSAqIHBvdyhiVSwgMSAvIDIuNCkgLSAwLjA1NSA6IDEyLjkyICogYlU7IC8vIE1ha2UgYW5kIHJldHVybiB0aGUgY29sb3JcblxuICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IoMjU1ICogciwgMjU1ICogZywgMjU1ICogYik7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNwYWNlID09PSAnaHNsJykge1xuICAgICAgLy8gaHR0cHM6Ly9iZ3JpbnMuZ2l0aHViLmlvL1RpbnlDb2xvci9kb2NzL3Rpbnljb2xvci5odG1sXG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgaHNsIHZhbHVlc1xuICAgICAgbGV0IHtcbiAgICAgICAgaCxcbiAgICAgICAgcyxcbiAgICAgICAgbFxuICAgICAgfSA9IHRoaXM7XG4gICAgICBoIC89IDM2MDtcbiAgICAgIHMgLz0gMTAwO1xuICAgICAgbCAvPSAxMDA7IC8vIElmIHdlIGFyZSBncmV5LCB0aGVuIGp1c3QgbWFrZSB0aGUgY29sb3IgZGlyZWN0bHlcblxuICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgbCAqPSAyNTU7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKGwsIGwsIGwpO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICB9IC8vIFRPRE8gSSBoYXZlIG5vIGlkZWEgd2hhdCB0aGlzIGRvZXMgOkQgSWYgeW91IGZpZ3VyZSBpdCBvdXQsIHRlbGwgbWUhXG5cblxuICAgICAgY29uc3QgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICBjb25zdCBwID0gMiAqIGwgLSBxOyAvLyBHZXQgdGhlIHJnYiB2YWx1ZXNcblxuICAgICAgY29uc3QgciA9IDI1NSAqIGh1ZVRvUmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICBjb25zdCBnID0gMjU1ICogaHVlVG9SZ2IocCwgcSwgaCk7XG4gICAgICBjb25zdCBiID0gMjU1ICogaHVlVG9SZ2IocCwgcSwgaCAtIDEgLyAzKTsgLy8gTWFrZSBhIG5ldyBjb2xvclxuXG4gICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihyLCBnLCBiKTtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3BhY2UgPT09ICdjbXlrJykge1xuICAgICAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZmVsaXBlc2FiaW5vLzUwNjYzMzZcbiAgICAgIC8vIEdldCB0aGUgbm9ybWFsaXNlZCBjbXlrIHZhbHVlc1xuICAgICAgY29uc3Qge1xuICAgICAgICBjLFxuICAgICAgICBtLFxuICAgICAgICB5LFxuICAgICAgICBrXG4gICAgICB9ID0gdGhpczsgLy8gR2V0IHRoZSByZ2IgdmFsdWVzXG5cbiAgICAgIGNvbnN0IHIgPSAyNTUgKiAoMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgaykpO1xuICAgICAgY29uc3QgZyA9IDI1NSAqICgxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKSk7XG4gICAgICBjb25zdCBiID0gMjU1ICogKDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspKTsgLy8gRm9ybSB0aGUgY29sb3IgYW5kIHJldHVybiBpdFxuXG4gICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihyLCBnLCBiKTtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdG9BcnJheSgpIHtcbiAgICBjb25zdCB7XG4gICAgICBfYSxcbiAgICAgIF9iLFxuICAgICAgX2MsXG4gICAgICBfZCxcbiAgICAgIHNwYWNlXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIFtfYSwgX2IsIF9jLCBfZCwgc3BhY2VdO1xuICB9XG5cbiAgdG9IZXgoKSB7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gdGhpcy5fY2xhbXBlZCgpLm1hcChjb21wb25lbnRIZXgpO1xuXG4gICAgcmV0dXJuIGAjJHtyfSR7Z30ke2J9YDtcbiAgfVxuXG4gIHRvUmdiKCkge1xuICAgIGNvbnN0IFtyViwgZ1YsIGJWXSA9IHRoaXMuX2NsYW1wZWQoKTtcblxuICAgIGNvbnN0IHN0cmluZyA9IGByZ2IoJHtyVn0sJHtnVn0sJHtiVn0pYDtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9IZXgoKTtcbiAgfVxuXG4gIHh5eigpIHtcbiAgICAvLyBOb3JtYWxpc2UgdGhlIHJlZCwgZ3JlZW4gYW5kIGJsdWUgdmFsdWVzXG4gICAgY29uc3Qge1xuICAgICAgX2E6IHIyNTUsXG4gICAgICBfYjogZzI1NSxcbiAgICAgIF9jOiBiMjU1XG4gICAgfSA9IHRoaXMucmdiKCk7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gW3IyNTUsIGcyNTUsIGIyNTVdLm1hcCh2ID0+IHYgLyAyNTUpOyAvLyBDb252ZXJ0IHRvIHRoZSBsYWIgcmdiIHNwYWNlXG5cbiAgICBjb25zdCByTCA9IHIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKHIgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IHIgLyAxMi45MjtcbiAgICBjb25zdCBnTCA9IGcgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKGcgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IGcgLyAxMi45MjtcbiAgICBjb25zdCBiTCA9IGIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKGIgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IGIgLyAxMi45MjsgLy8gQ29udmVydCB0byB0aGUgeHl6IGNvbG9yIHNwYWNlIHdpdGhvdXQgYm91bmRpbmcgdGhlIHZhbHVlc1xuXG4gICAgY29uc3QgeFUgPSAockwgKiAwLjQxMjQgKyBnTCAqIDAuMzU3NiArIGJMICogMC4xODA1KSAvIDAuOTUwNDc7XG4gICAgY29uc3QgeVUgPSAockwgKiAwLjIxMjYgKyBnTCAqIDAuNzE1MiArIGJMICogMC4wNzIyKSAvIDEuMDAwMDA7XG4gICAgY29uc3QgelUgPSAockwgKiAwLjAxOTMgKyBnTCAqIDAuMTE5MiArIGJMICogMC45NTA1KSAvIDEuMDg4ODM7IC8vIEdldCB0aGUgcHJvcGVyIHh5eiB2YWx1ZXMgYnkgYXBwbHlpbmcgdGhlIGJvdW5kaW5nXG5cbiAgICBjb25zdCB4ID0geFUgPiAwLjAwODg1NiA/IE1hdGgucG93KHhVLCAxIC8gMykgOiA3Ljc4NyAqIHhVICsgMTYgLyAxMTY7XG4gICAgY29uc3QgeSA9IHlVID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5VSwgMSAvIDMpIDogNy43ODcgKiB5VSArIDE2IC8gMTE2O1xuICAgIGNvbnN0IHogPSB6VSA+IDAuMDA4ODU2ID8gTWF0aC5wb3coelUsIDEgLyAzKSA6IDcuNzg3ICogelUgKyAxNiAvIDExNjsgLy8gTWFrZSBhbmQgcmV0dXJuIHRoZSBjb2xvclxuXG4gICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IoeCwgeSwgeiwgJ3h5eicpO1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICAvKlxyXG4gIElucHV0IGFuZCBPdXRwdXQgbWV0aG9kc1xyXG4gICovXG5cblxuICBfY2xhbXBlZCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBfYSxcbiAgICAgIF9iLFxuICAgICAgX2NcbiAgICB9ID0gdGhpcy5yZ2IoKTtcbiAgICBjb25zdCB7XG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICByb3VuZFxuICAgIH0gPSBNYXRoO1xuXG4gICAgY29uc3QgZm9ybWF0ID0gdiA9PiBtYXgoMCwgbWluKHJvdW5kKHYpLCAyNTUpKTtcblxuICAgIHJldHVybiBbX2EsIF9iLCBfY10ubWFwKGZvcm1hdCk7XG4gIH1cbiAgLypcclxuICBDb25zdHJ1Y3RpbmcgY29sb3JzXHJcbiAgKi9cblxuXG59XG5cbmNsYXNzIFBvaW50IHtcbiAgLy8gSW5pdGlhbGl6ZVxuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdGhpcy5pbml0KC4uLmFyZ3MpO1xuICB9IC8vIENsb25lIHBvaW50XG5cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMpO1xuICB9XG5cbiAgaW5pdCh4LCB5KSB7XG4gICAgY29uc3QgYmFzZSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTsgLy8gZW5zdXJlIHNvdXJjZSBhcyBvYmplY3RcblxuICAgIGNvbnN0IHNvdXJjZSA9IEFycmF5LmlzQXJyYXkoeCkgPyB7XG4gICAgICB4OiB4WzBdLFxuICAgICAgeTogeFsxXVxuICAgIH0gOiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyB7XG4gICAgICB4OiB4LngsXG4gICAgICB5OiB4LnlcbiAgICB9IDoge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9OyAvLyBtZXJnZSBzb3VyY2VcblxuICAgIHRoaXMueCA9IHNvdXJjZS54ID09IG51bGwgPyBiYXNlLnggOiBzb3VyY2UueDtcbiAgICB0aGlzLnkgPSBzb3VyY2UueSA9PSBudWxsID8gYmFzZS55IDogc291cmNlLnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnldO1xuICB9XG5cbiAgdHJhbnNmb3JtKG0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnRyYW5zZm9ybU8obSk7XG4gIH0gLy8gVHJhbnNmb3JtIHBvaW50IHdpdGggbWF0cml4XG5cblxuICB0cmFuc2Zvcm1PKG0pIHtcbiAgICBpZiAoIU1hdHJpeC5pc01hdHJpeExpa2UobSkpIHtcbiAgICAgIG0gPSBuZXcgTWF0cml4KG0pO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfSA9IHRoaXM7IC8vIFBlcmZvcm0gdGhlIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gICAgdGhpcy54ID0gbS5hICogeCArIG0uYyAqIHkgKyBtLmU7XG4gICAgdGhpcy55ID0gbS5iICogeCArIG0uZCAqIHkgKyBtLmY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICByZXR1cm4gbmV3IFBvaW50KHgsIHkpLnRyYW5zZm9ybSh0aGlzLnNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlRW5vdWdoKGEsIGIsIHRocmVzaG9sZCkge1xuICByZXR1cm4gTWF0aC5hYnMoYiAtIGEpIDwgKHRocmVzaG9sZCB8fCAxZS02KTtcbn1cblxuY2xhc3MgTWF0cml4IHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHRoaXMuaW5pdCguLi5hcmdzKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRUcmFuc2Zvcm1zKG8pIHtcbiAgICAvLyBHZXQgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIHJlcXVpcmVkIHRvIGZvcm0gdGhlIG1hdHJpeFxuICAgIGNvbnN0IGZsaXBCb3RoID0gby5mbGlwID09PSAnYm90aCcgfHwgby5mbGlwID09PSB0cnVlO1xuICAgIGNvbnN0IGZsaXBYID0gby5mbGlwICYmIChmbGlwQm90aCB8fCBvLmZsaXAgPT09ICd4JykgPyAtMSA6IDE7XG4gICAgY29uc3QgZmxpcFkgPSBvLmZsaXAgJiYgKGZsaXBCb3RoIHx8IG8uZmxpcCA9PT0gJ3knKSA/IC0xIDogMTtcbiAgICBjb25zdCBza2V3WCA9IG8uc2tldyAmJiBvLnNrZXcubGVuZ3RoID8gby5za2V3WzBdIDogaXNGaW5pdGUoby5za2V3KSA/IG8uc2tldyA6IGlzRmluaXRlKG8uc2tld1gpID8gby5za2V3WCA6IDA7XG4gICAgY29uc3Qgc2tld1kgPSBvLnNrZXcgJiYgby5za2V3Lmxlbmd0aCA/IG8uc2tld1sxXSA6IGlzRmluaXRlKG8uc2tldykgPyBvLnNrZXcgOiBpc0Zpbml0ZShvLnNrZXdZKSA/IG8uc2tld1kgOiAwO1xuICAgIGNvbnN0IHNjYWxlWCA9IG8uc2NhbGUgJiYgby5zY2FsZS5sZW5ndGggPyBvLnNjYWxlWzBdICogZmxpcFggOiBpc0Zpbml0ZShvLnNjYWxlKSA/IG8uc2NhbGUgKiBmbGlwWCA6IGlzRmluaXRlKG8uc2NhbGVYKSA/IG8uc2NhbGVYICogZmxpcFggOiBmbGlwWDtcbiAgICBjb25zdCBzY2FsZVkgPSBvLnNjYWxlICYmIG8uc2NhbGUubGVuZ3RoID8gby5zY2FsZVsxXSAqIGZsaXBZIDogaXNGaW5pdGUoby5zY2FsZSkgPyBvLnNjYWxlICogZmxpcFkgOiBpc0Zpbml0ZShvLnNjYWxlWSkgPyBvLnNjYWxlWSAqIGZsaXBZIDogZmxpcFk7XG4gICAgY29uc3Qgc2hlYXIgPSBvLnNoZWFyIHx8IDA7XG4gICAgY29uc3QgdGhldGEgPSBvLnJvdGF0ZSB8fCBvLnRoZXRhIHx8IDA7XG4gICAgY29uc3Qgb3JpZ2luID0gbmV3IFBvaW50KG8ub3JpZ2luIHx8IG8uYXJvdW5kIHx8IG8ub3ggfHwgby5vcmlnaW5YLCBvLm95IHx8IG8ub3JpZ2luWSk7XG4gICAgY29uc3Qgb3ggPSBvcmlnaW4ueDtcbiAgICBjb25zdCBveSA9IG9yaWdpbi55OyAvLyBXZSBuZWVkIFBvaW50IHRvIGJlIGludmFsaWQgaWYgbm90aGluZyB3YXMgcGFzc2VkIGJlY2F1c2Ugd2UgY2Fubm90IGRlZmF1bHQgdG8gMCBoZXJlLiBUaGF0cyB3aHkgTmFOXG5cbiAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBQb2ludChvLnBvc2l0aW9uIHx8IG8ucHggfHwgby5wb3NpdGlvblggfHwgTmFOLCBvLnB5IHx8IG8ucG9zaXRpb25ZIHx8IE5hTik7XG4gICAgY29uc3QgcHggPSBwb3NpdGlvbi54O1xuICAgIGNvbnN0IHB5ID0gcG9zaXRpb24ueTtcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBuZXcgUG9pbnQoby50cmFuc2xhdGUgfHwgby50eCB8fCBvLnRyYW5zbGF0ZVgsIG8udHkgfHwgby50cmFuc2xhdGVZKTtcbiAgICBjb25zdCB0eCA9IHRyYW5zbGF0ZS54O1xuICAgIGNvbnN0IHR5ID0gdHJhbnNsYXRlLnk7XG4gICAgY29uc3QgcmVsYXRpdmUgPSBuZXcgUG9pbnQoby5yZWxhdGl2ZSB8fCBvLnJ4IHx8IG8ucmVsYXRpdmVYLCBvLnJ5IHx8IG8ucmVsYXRpdmVZKTtcbiAgICBjb25zdCByeCA9IHJlbGF0aXZlLng7XG4gICAgY29uc3QgcnkgPSByZWxhdGl2ZS55OyAvLyBQb3B1bGF0ZSBhbGwgb2YgdGhlIHZhbHVlc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHNrZXdYLFxuICAgICAgc2tld1ksXG4gICAgICBzaGVhcixcbiAgICAgIHRoZXRhLFxuICAgICAgcngsXG4gICAgICByeSxcbiAgICAgIHR4LFxuICAgICAgdHksXG4gICAgICBveCxcbiAgICAgIG95LFxuICAgICAgcHgsXG4gICAgICBweVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbUFycmF5KGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYTogYVswXSxcbiAgICAgIGI6IGFbMV0sXG4gICAgICBjOiBhWzJdLFxuICAgICAgZDogYVszXSxcbiAgICAgIGU6IGFbNF0sXG4gICAgICBmOiBhWzVdXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBpc01hdHJpeExpa2Uobykge1xuICAgIHJldHVybiBvLmEgIT0gbnVsbCB8fCBvLmIgIT0gbnVsbCB8fCBvLmMgIT0gbnVsbCB8fCBvLmQgIT0gbnVsbCB8fCBvLmUgIT0gbnVsbCB8fCBvLmYgIT0gbnVsbDtcbiAgfSAvLyBsZWZ0IG1hdHJpeCwgcmlnaHQgbWF0cml4LCB0YXJnZXQgbWF0cml4IHdoaWNoIGlzIG92ZXJ3cml0dGVuXG5cblxuICBzdGF0aWMgbWF0cml4TXVsdGlwbHkobCwgciwgbykge1xuICAgIC8vIFdvcmsgb3V0IHRoZSBwcm9kdWN0IGRpcmVjdGx5XG4gICAgY29uc3QgYSA9IGwuYSAqIHIuYSArIGwuYyAqIHIuYjtcbiAgICBjb25zdCBiID0gbC5iICogci5hICsgbC5kICogci5iO1xuICAgIGNvbnN0IGMgPSBsLmEgKiByLmMgKyBsLmMgKiByLmQ7XG4gICAgY29uc3QgZCA9IGwuYiAqIHIuYyArIGwuZCAqIHIuZDtcbiAgICBjb25zdCBlID0gbC5lICsgbC5hICogci5lICsgbC5jICogci5mO1xuICAgIGNvbnN0IGYgPSBsLmYgKyBsLmIgKiByLmUgKyBsLmQgKiByLmY7IC8vIG1ha2Ugc3VyZSB0byB1c2UgbG9jYWwgdmFyaWFibGVzIGJlY2F1c2UgbC9yIGFuZCBvIGNvdWxkIGJlIHRoZSBzYW1lXG5cbiAgICBvLmEgPSBhO1xuICAgIG8uYiA9IGI7XG4gICAgby5jID0gYztcbiAgICBvLmQgPSBkO1xuICAgIG8uZSA9IGU7XG4gICAgby5mID0gZjtcbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIGFyb3VuZChjeCwgY3ksIG1hdHJpeCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuYXJvdW5kTyhjeCwgY3ksIG1hdHJpeCk7XG4gIH0gLy8gVHJhbnNmb3JtIGFyb3VuZCBhIGNlbnRlciBwb2ludFxuXG5cbiAgYXJvdW5kTyhjeCwgY3ksIG1hdHJpeCkge1xuICAgIGNvbnN0IGR4ID0gY3ggfHwgMDtcbiAgICBjb25zdCBkeSA9IGN5IHx8IDA7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlTygtZHgsIC1keSkubG11bHRpcGx5TyhtYXRyaXgpLnRyYW5zbGF0ZU8oZHgsIGR5KTtcbiAgfSAvLyBDbG9uZXMgdGhpcyBtYXRyaXhcblxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgTWF0cml4KHRoaXMpO1xuICB9IC8vIERlY29tcG9zZXMgdGhpcyBtYXRyaXggaW50byBpdHMgYWZmaW5lIHBhcmFtZXRlcnNcblxuXG4gIGRlY29tcG9zZShjeCA9IDAsIGN5ID0gMCkge1xuICAgIC8vIEdldCB0aGUgcGFyYW1ldGVycyBmcm9tIHRoZSBtYXRyaXhcbiAgICBjb25zdCBhID0gdGhpcy5hO1xuICAgIGNvbnN0IGIgPSB0aGlzLmI7XG4gICAgY29uc3QgYyA9IHRoaXMuYztcbiAgICBjb25zdCBkID0gdGhpcy5kO1xuICAgIGNvbnN0IGUgPSB0aGlzLmU7XG4gICAgY29uc3QgZiA9IHRoaXMuZjsgLy8gRmlndXJlIG91dCBpZiB0aGUgd2luZGluZyBkaXJlY3Rpb24gaXMgY2xvY2t3aXNlIG9yIGNvdW50ZXJjbG9ja3dpc2VcblxuICAgIGNvbnN0IGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYztcbiAgICBjb25zdCBjY3cgPSBkZXRlcm1pbmFudCA+IDAgPyAxIDogLTE7IC8vIFNpbmNlIHdlIG9ubHkgc2hlYXIgaW4geCwgd2UgY2FuIHVzZSB0aGUgeCBiYXNpcyB0byBnZXQgdGhlIHggc2NhbGVcbiAgICAvLyBhbmQgdGhlIHJvdGF0aW9uIG9mIHRoZSByZXN1bHRpbmcgbWF0cml4XG5cbiAgICBjb25zdCBzeCA9IGNjdyAqIE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICBjb25zdCB0aGV0YVJhZCA9IE1hdGguYXRhbjIoY2N3ICogYiwgY2N3ICogYSk7XG4gICAgY29uc3QgdGhldGEgPSAxODAgLyBNYXRoLlBJICogdGhldGFSYWQ7XG4gICAgY29uc3QgY3QgPSBNYXRoLmNvcyh0aGV0YVJhZCk7XG4gICAgY29uc3Qgc3QgPSBNYXRoLnNpbih0aGV0YVJhZCk7IC8vIFdlIGNhbiB0aGVuIHNvbHZlIHRoZSB5IGJhc2lzIHZlY3RvciBzaW11bHRhbmVvdXNseSB0byBnZXQgdGhlIG90aGVyXG4gICAgLy8gdHdvIGFmZmluZSBwYXJhbWV0ZXJzIGRpcmVjdGx5IGZyb20gdGhlc2UgcGFyYW1ldGVyc1xuXG4gICAgY29uc3QgbGFtID0gKGEgKiBjICsgYiAqIGQpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgY29uc3Qgc3kgPSBjICogc3ggLyAobGFtICogYSAtIGIpIHx8IGQgKiBzeCAvIChsYW0gKiBiICsgYSk7IC8vIFVzZSB0aGUgdHJhbnNsYXRpb25zXG5cbiAgICBjb25zdCB0eCA9IGUgLSBjeCArIGN4ICogY3QgKiBzeCArIGN5ICogKGxhbSAqIGN0ICogc3ggLSBzdCAqIHN5KTtcbiAgICBjb25zdCB0eSA9IGYgLSBjeSArIGN4ICogc3QgKiBzeCArIGN5ICogKGxhbSAqIHN0ICogc3ggKyBjdCAqIHN5KTsgLy8gQ29uc3RydWN0IHRoZSBkZWNvbXBvc2l0aW9uIGFuZCByZXR1cm4gaXRcblxuICAgIHJldHVybiB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGFmZmluZSBwYXJhbWV0ZXJzXG4gICAgICBzY2FsZVg6IHN4LFxuICAgICAgc2NhbGVZOiBzeSxcbiAgICAgIHNoZWFyOiBsYW0sXG4gICAgICByb3RhdGU6IHRoZXRhLFxuICAgICAgdHJhbnNsYXRlWDogdHgsXG4gICAgICB0cmFuc2xhdGVZOiB0eSxcbiAgICAgIG9yaWdpblg6IGN4LFxuICAgICAgb3JpZ2luWTogY3ksXG4gICAgICAvLyBSZXR1cm4gdGhlIG1hdHJpeCBwYXJhbWV0ZXJzXG4gICAgICBhOiB0aGlzLmEsXG4gICAgICBiOiB0aGlzLmIsXG4gICAgICBjOiB0aGlzLmMsXG4gICAgICBkOiB0aGlzLmQsXG4gICAgICBlOiB0aGlzLmUsXG4gICAgICBmOiB0aGlzLmZcbiAgICB9O1xuICB9IC8vIENoZWNrIGlmIHR3byBtYXRyaWNlcyBhcmUgZXF1YWxcblxuXG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmIChvdGhlciA9PT0gdGhpcykgcmV0dXJuIHRydWU7XG4gICAgY29uc3QgY29tcCA9IG5ldyBNYXRyaXgob3RoZXIpO1xuICAgIHJldHVybiBjbG9zZUVub3VnaCh0aGlzLmEsIGNvbXAuYSkgJiYgY2xvc2VFbm91Z2godGhpcy5iLCBjb21wLmIpICYmIGNsb3NlRW5vdWdoKHRoaXMuYywgY29tcC5jKSAmJiBjbG9zZUVub3VnaCh0aGlzLmQsIGNvbXAuZCkgJiYgY2xvc2VFbm91Z2godGhpcy5lLCBjb21wLmUpICYmIGNsb3NlRW5vdWdoKHRoaXMuZiwgY29tcC5mKTtcbiAgfSAvLyBGbGlwIG1hdHJpeCBvbiB4IG9yIHksIGF0IGEgZ2l2ZW4gb2Zmc2V0XG5cblxuICBmbGlwKGF4aXMsIGFyb3VuZCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuZmxpcE8oYXhpcywgYXJvdW5kKTtcbiAgfVxuXG4gIGZsaXBPKGF4aXMsIGFyb3VuZCkge1xuICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLnNjYWxlTygtMSwgMSwgYXJvdW5kLCAwKSA6IGF4aXMgPT09ICd5JyA/IHRoaXMuc2NhbGVPKDEsIC0xLCAwLCBhcm91bmQpIDogdGhpcy5zY2FsZU8oLTEsIC0xLCBheGlzLCBhcm91bmQgfHwgYXhpcyk7IC8vIERlZmluZSBhbiB4LCB5IGZsaXAgcG9pbnRcbiAgfSAvLyBJbml0aWFsaXplXG5cblxuICBpbml0KHNvdXJjZSkge1xuICAgIGNvbnN0IGJhc2UgPSBNYXRyaXguZnJvbUFycmF5KFsxLCAwLCAwLCAxLCAwLCAwXSk7IC8vIGVuc3VyZSBzb3VyY2UgYXMgb2JqZWN0XG5cbiAgICBzb3VyY2UgPSBzb3VyY2UgaW5zdGFuY2VvZiBFbGVtZW50ID8gc291cmNlLm1hdHJpeGlmeSgpIDogdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgPyBNYXRyaXguZnJvbUFycmF5KHNvdXJjZS5zcGxpdChkZWxpbWl0ZXIpLm1hcChwYXJzZUZsb2F0KSkgOiBBcnJheS5pc0FycmF5KHNvdXJjZSkgPyBNYXRyaXguZnJvbUFycmF5KHNvdXJjZSkgOiB0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0JyAmJiBNYXRyaXguaXNNYXRyaXhMaWtlKHNvdXJjZSkgPyBzb3VyY2UgOiB0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0JyA/IG5ldyBNYXRyaXgoKS50cmFuc2Zvcm0oc291cmNlKSA6IGFyZ3VtZW50cy5sZW5ndGggPT09IDYgPyBNYXRyaXguZnJvbUFycmF5KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkgOiBiYXNlOyAvLyBNZXJnZSB0aGUgc291cmNlIG1hdHJpeCB3aXRoIHRoZSBiYXNlIG1hdHJpeFxuXG4gICAgdGhpcy5hID0gc291cmNlLmEgIT0gbnVsbCA/IHNvdXJjZS5hIDogYmFzZS5hO1xuICAgIHRoaXMuYiA9IHNvdXJjZS5iICE9IG51bGwgPyBzb3VyY2UuYiA6IGJhc2UuYjtcbiAgICB0aGlzLmMgPSBzb3VyY2UuYyAhPSBudWxsID8gc291cmNlLmMgOiBiYXNlLmM7XG4gICAgdGhpcy5kID0gc291cmNlLmQgIT0gbnVsbCA/IHNvdXJjZS5kIDogYmFzZS5kO1xuICAgIHRoaXMuZSA9IHNvdXJjZS5lICE9IG51bGwgPyBzb3VyY2UuZSA6IGJhc2UuZTtcbiAgICB0aGlzLmYgPSBzb3VyY2UuZiAhPSBudWxsID8gc291cmNlLmYgOiBiYXNlLmY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpbnZlcnNlKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW52ZXJzZU8oKTtcbiAgfSAvLyBJbnZlcnNlcyBtYXRyaXhcblxuXG4gIGludmVyc2VPKCkge1xuICAgIC8vIEdldCB0aGUgY3VycmVudCBwYXJhbWV0ZXJzIG91dCBvZiB0aGUgbWF0cml4XG4gICAgY29uc3QgYSA9IHRoaXMuYTtcbiAgICBjb25zdCBiID0gdGhpcy5iO1xuICAgIGNvbnN0IGMgPSB0aGlzLmM7XG4gICAgY29uc3QgZCA9IHRoaXMuZDtcbiAgICBjb25zdCBlID0gdGhpcy5lO1xuICAgIGNvbnN0IGYgPSB0aGlzLmY7IC8vIEludmVydCB0aGUgMngyIG1hdHJpeCBpbiB0aGUgdG9wIGxlZnRcblxuICAgIGNvbnN0IGRldCA9IGEgKiBkIC0gYiAqIGM7XG4gICAgaWYgKCFkZXQpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGludmVydCAnICsgdGhpcyk7IC8vIENhbGN1bGF0ZSB0aGUgdG9wIDJ4MiBtYXRyaXhcblxuICAgIGNvbnN0IG5hID0gZCAvIGRldDtcbiAgICBjb25zdCBuYiA9IC1iIC8gZGV0O1xuICAgIGNvbnN0IG5jID0gLWMgLyBkZXQ7XG4gICAgY29uc3QgbmQgPSBhIC8gZGV0OyAvLyBBcHBseSB0aGUgaW52ZXJ0ZWQgbWF0cml4IHRvIHRoZSB0b3AgcmlnaHRcblxuICAgIGNvbnN0IG5lID0gLShuYSAqIGUgKyBuYyAqIGYpO1xuICAgIGNvbnN0IG5mID0gLShuYiAqIGUgKyBuZCAqIGYpOyAvLyBDb25zdHJ1Y3QgdGhlIGludmVydGVkIG1hdHJpeFxuXG4gICAgdGhpcy5hID0gbmE7XG4gICAgdGhpcy5iID0gbmI7XG4gICAgdGhpcy5jID0gbmM7XG4gICAgdGhpcy5kID0gbmQ7XG4gICAgdGhpcy5lID0gbmU7XG4gICAgdGhpcy5mID0gbmY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsbXVsdGlwbHkobWF0cml4KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sbXVsdGlwbHlPKG1hdHJpeCk7XG4gIH1cblxuICBsbXVsdGlwbHlPKG1hdHJpeCkge1xuICAgIGNvbnN0IHIgPSB0aGlzO1xuICAgIGNvbnN0IGwgPSBtYXRyaXggaW5zdGFuY2VvZiBNYXRyaXggPyBtYXRyaXggOiBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIE1hdHJpeC5tYXRyaXhNdWx0aXBseShsLCByLCB0aGlzKTtcbiAgfSAvLyBMZWZ0IG11bHRpcGxpZXMgYnkgdGhlIGdpdmVuIG1hdHJpeFxuXG5cbiAgbXVsdGlwbHkobWF0cml4KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWx0aXBseU8obWF0cml4KTtcbiAgfVxuXG4gIG11bHRpcGx5TyhtYXRyaXgpIHtcbiAgICAvLyBHZXQgdGhlIG1hdHJpY2VzXG4gICAgY29uc3QgbCA9IHRoaXM7XG4gICAgY29uc3QgciA9IG1hdHJpeCBpbnN0YW5jZW9mIE1hdHJpeCA/IG1hdHJpeCA6IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gTWF0cml4Lm1hdHJpeE11bHRpcGx5KGwsIHIsIHRoaXMpO1xuICB9IC8vIFJvdGF0ZSBtYXRyaXhcblxuXG4gIHJvdGF0ZShyLCBjeCwgY3kpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnJvdGF0ZU8ociwgY3gsIGN5KTtcbiAgfVxuXG4gIHJvdGF0ZU8ociwgY3ggPSAwLCBjeSA9IDApIHtcbiAgICAvLyBDb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFuc1xuICAgIHIgPSByYWRpYW5zKHIpO1xuICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKHIpO1xuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKHIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBlLFxuICAgICAgZlxuICAgIH0gPSB0aGlzO1xuICAgIHRoaXMuYSA9IGEgKiBjb3MgLSBiICogc2luO1xuICAgIHRoaXMuYiA9IGIgKiBjb3MgKyBhICogc2luO1xuICAgIHRoaXMuYyA9IGMgKiBjb3MgLSBkICogc2luO1xuICAgIHRoaXMuZCA9IGQgKiBjb3MgKyBjICogc2luO1xuICAgIHRoaXMuZSA9IGUgKiBjb3MgLSBmICogc2luICsgY3kgKiBzaW4gLSBjeCAqIGNvcyArIGN4O1xuICAgIHRoaXMuZiA9IGYgKiBjb3MgKyBlICogc2luIC0gY3ggKiBzaW4gLSBjeSAqIGNvcyArIGN5O1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFNjYWxlIG1hdHJpeFxuXG5cbiAgc2NhbGUoeCwgeSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zY2FsZU8oLi4uYXJndW1lbnRzKTtcbiAgfVxuXG4gIHNjYWxlTyh4LCB5ID0geCwgY3ggPSAwLCBjeSA9IDApIHtcbiAgICAvLyBTdXBwb3J0IHVuaWZvcm0gc2NhbGluZ1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBjeSA9IGN4O1xuICAgICAgY3ggPSB5O1xuICAgICAgeSA9IHg7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGUsXG4gICAgICBmXG4gICAgfSA9IHRoaXM7XG4gICAgdGhpcy5hID0gYSAqIHg7XG4gICAgdGhpcy5iID0gYiAqIHk7XG4gICAgdGhpcy5jID0gYyAqIHg7XG4gICAgdGhpcy5kID0gZCAqIHk7XG4gICAgdGhpcy5lID0gZSAqIHggLSBjeCAqIHggKyBjeDtcbiAgICB0aGlzLmYgPSBmICogeSAtIGN5ICogeSArIGN5O1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFNoZWFyIG1hdHJpeFxuXG5cbiAgc2hlYXIoYSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zaGVhck8oYSwgY3gsIGN5KTtcbiAgfVxuXG4gIHNoZWFyTyhseCwgY3ggPSAwLCBjeSA9IDApIHtcbiAgICBjb25zdCB7XG4gICAgICBhLFxuICAgICAgYixcbiAgICAgIGMsXG4gICAgICBkLFxuICAgICAgZSxcbiAgICAgIGZcbiAgICB9ID0gdGhpcztcbiAgICB0aGlzLmEgPSBhICsgYiAqIGx4O1xuICAgIHRoaXMuYyA9IGMgKyBkICogbHg7XG4gICAgdGhpcy5lID0gZSArIGYgKiBseCAtIGN5ICogbHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gU2tldyBNYXRyaXhcblxuXG4gIHNrZXcoeCwgeSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5za2V3TyguLi5hcmd1bWVudHMpO1xuICB9XG5cbiAgc2tld08oeCwgeSA9IHgsIGN4ID0gMCwgY3kgPSAwKSB7XG4gICAgLy8gc3VwcG9ydCB1bmlmb3JtYWwgc2tld1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBjeSA9IGN4O1xuICAgICAgY3ggPSB5O1xuICAgICAgeSA9IHg7XG4gICAgfSAvLyBDb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFuc1xuXG5cbiAgICB4ID0gcmFkaWFucyh4KTtcbiAgICB5ID0gcmFkaWFucyh5KTtcbiAgICBjb25zdCBseCA9IE1hdGgudGFuKHgpO1xuICAgIGNvbnN0IGx5ID0gTWF0aC50YW4oeSk7XG4gICAgY29uc3Qge1xuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGUsXG4gICAgICBmXG4gICAgfSA9IHRoaXM7XG4gICAgdGhpcy5hID0gYSArIGIgKiBseDtcbiAgICB0aGlzLmIgPSBiICsgYSAqIGx5O1xuICAgIHRoaXMuYyA9IGMgKyBkICogbHg7XG4gICAgdGhpcy5kID0gZCArIGMgKiBseTtcbiAgICB0aGlzLmUgPSBlICsgZiAqIGx4IC0gY3kgKiBseDtcbiAgICB0aGlzLmYgPSBmICsgZSAqIGx5IC0gY3ggKiBseTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBTa2V3WFxuXG5cbiAgc2tld1goeCwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIHRoaXMuc2tldyh4LCAwLCBjeCwgY3kpO1xuICB9IC8vIFNrZXdZXG5cblxuICBza2V3WSh5LCBjeCwgY3kpIHtcbiAgICByZXR1cm4gdGhpcy5za2V3KDAsIHksIGN4LCBjeSk7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGhpcy5kLCB0aGlzLmUsIHRoaXMuZl07XG4gIH0gLy8gQ29udmVydCBtYXRyaXggdG8gc3RyaW5nXG5cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ21hdHJpeCgnICsgdGhpcy5hICsgJywnICsgdGhpcy5iICsgJywnICsgdGhpcy5jICsgJywnICsgdGhpcy5kICsgJywnICsgdGhpcy5lICsgJywnICsgdGhpcy5mICsgJyknO1xuICB9IC8vIFRyYW5zZm9ybSBhIG1hdHJpeCBpbnRvIGFub3RoZXIgbWF0cml4IGJ5IG1hbmlwdWxhdGluZyB0aGUgc3BhY2VcblxuXG4gIHRyYW5zZm9ybShvKSB7XG4gICAgLy8gQ2hlY2sgaWYgbyBpcyBhIG1hdHJpeCBhbmQgdGhlbiBsZWZ0IG11bHRpcGx5IGl0IGRpcmVjdGx5XG4gICAgaWYgKE1hdHJpeC5pc01hdHJpeExpa2UobykpIHtcbiAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgobyk7XG4gICAgICByZXR1cm4gbWF0cml4Lm11bHRpcGx5Tyh0aGlzKTtcbiAgICB9IC8vIEdldCB0aGUgcHJvcG9zZWQgdHJhbnNmb3JtYXRpb25zIGFuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbnNcblxuXG4gICAgY29uc3QgdCA9IE1hdHJpeC5mb3JtYXRUcmFuc2Zvcm1zKG8pO1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHg6IG94LFxuICAgICAgeTogb3lcbiAgICB9ID0gbmV3IFBvaW50KHQub3gsIHQub3kpLnRyYW5zZm9ybShjdXJyZW50KTsgLy8gQ29uc3RydWN0IHRoZSByZXN1bHRpbmcgbWF0cml4XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IG5ldyBNYXRyaXgoKS50cmFuc2xhdGVPKHQucngsIHQucnkpLmxtdWx0aXBseU8oY3VycmVudCkudHJhbnNsYXRlTygtb3gsIC1veSkuc2NhbGVPKHQuc2NhbGVYLCB0LnNjYWxlWSkuc2tld08odC5za2V3WCwgdC5za2V3WSkuc2hlYXJPKHQuc2hlYXIpLnJvdGF0ZU8odC50aGV0YSkudHJhbnNsYXRlTyhveCwgb3kpOyAvLyBJZiB3ZSB3YW50IHRoZSBvcmlnaW4gYXQgYSBwYXJ0aWN1bGFyIHBsYWNlLCB3ZSBmb3JjZSBpdCB0aGVyZVxuXG4gICAgaWYgKGlzRmluaXRlKHQucHgpIHx8IGlzRmluaXRlKHQucHkpKSB7XG4gICAgICBjb25zdCBvcmlnaW4gPSBuZXcgUG9pbnQob3gsIG95KS50cmFuc2Zvcm0odHJhbnNmb3JtZXIpOyAvLyBUT0RPOiBSZXBsYWNlIHQucHggd2l0aCBpc0Zpbml0ZSh0LnB4KVxuICAgICAgLy8gRG9lc250IHdvcmsgYmVjYXVzZSB0LnB4IGlzIGFsc28gMCBpZiBpdCB3YXNudCBwYXNzZWRcblxuICAgICAgY29uc3QgZHggPSBpc0Zpbml0ZSh0LnB4KSA/IHQucHggLSBvcmlnaW4ueCA6IDA7XG4gICAgICBjb25zdCBkeSA9IGlzRmluaXRlKHQucHkpID8gdC5weSAtIG9yaWdpbi55IDogMDtcbiAgICAgIHRyYW5zZm9ybWVyLnRyYW5zbGF0ZU8oZHgsIGR5KTtcbiAgICB9IC8vIFRyYW5zbGF0ZSBub3cgYWZ0ZXIgcG9zaXRpb25pbmdcblxuXG4gICAgdHJhbnNmb3JtZXIudHJhbnNsYXRlTyh0LnR4LCB0LnR5KTtcbiAgICByZXR1cm4gdHJhbnNmb3JtZXI7XG4gIH0gLy8gVHJhbnNsYXRlIG1hdHJpeFxuXG5cbiAgdHJhbnNsYXRlKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnRyYW5zbGF0ZU8oeCwgeSk7XG4gIH1cblxuICB0cmFuc2xhdGVPKHgsIHkpIHtcbiAgICB0aGlzLmUgKz0geCB8fCAwO1xuICAgIHRoaXMuZiArPSB5IHx8IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhOiB0aGlzLmEsXG4gICAgICBiOiB0aGlzLmIsXG4gICAgICBjOiB0aGlzLmMsXG4gICAgICBkOiB0aGlzLmQsXG4gICAgICBlOiB0aGlzLmUsXG4gICAgICBmOiB0aGlzLmZcbiAgICB9O1xuICB9XG5cbn1cbmZ1bmN0aW9uIGN0bSgpIHtcbiAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5ub2RlLmdldENUTSgpKTtcbn1cbmZ1bmN0aW9uIHNjcmVlbkNUTSgpIHtcbiAgLyogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM0NDUzN1xyXG4gICAgIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgRkYgZG9lcyBub3QgcmV0dXJuIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcclxuICAgICBmb3IgdGhlIGlubmVyIGNvb3JkaW5hdGUgc3lzdGVtIHdoZW4gZ2V0U2NyZWVuQ1RNKCkgaXMgY2FsbGVkIG9uIG5lc3RlZCBzdmdzLlxyXG4gICAgIEhvd2V2ZXIgYWxsIG90aGVyIEJyb3dzZXJzIGRvIHRoYXQgKi9cbiAgaWYgKHR5cGVvZiB0aGlzLmlzUm9vdCA9PT0gJ2Z1bmN0aW9uJyAmJiAhdGhpcy5pc1Jvb3QoKSkge1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLnJlY3QoMSwgMSk7XG4gICAgY29uc3QgbSA9IHJlY3Qubm9kZS5nZXRTY3JlZW5DVE0oKTtcbiAgICByZWN0LnJlbW92ZSgpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG0pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5ub2RlLmdldFNjcmVlbkNUTSgpKTtcbn1cbnJlZ2lzdGVyKE1hdHJpeCwgJ01hdHJpeCcpO1xuXG5mdW5jdGlvbiBwYXJzZXIoKSB7XG4gIC8vIFJldXNlIGNhY2hlZCBlbGVtZW50IGlmIHBvc3NpYmxlXG4gIGlmICghcGFyc2VyLm5vZGVzKSB7XG4gICAgY29uc3Qgc3ZnID0gbWFrZUluc3RhbmNlKCkuc2l6ZSgyLCAwKTtcbiAgICBzdmcubm9kZS5zdHlsZS5jc3NUZXh0ID0gWydvcGFjaXR5OiAwJywgJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsICdsZWZ0OiAtMTAwJScsICd0b3A6IC0xMDAlJywgJ292ZXJmbG93OiBoaWRkZW4nXS5qb2luKCc7Jyk7XG4gICAgc3ZnLmF0dHIoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuICAgIHN2Zy5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgY29uc3QgcGF0aCA9IHN2Zy5wYXRoKCkubm9kZTtcbiAgICBwYXJzZXIubm9kZXMgPSB7XG4gICAgICBzdmcsXG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmICghcGFyc2VyLm5vZGVzLnN2Zy5ub2RlLnBhcmVudE5vZGUpIHtcbiAgICBjb25zdCBiID0gZ2xvYmFscy5kb2N1bWVudC5ib2R5IHx8IGdsb2JhbHMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHBhcnNlci5ub2Rlcy5zdmcuYWRkVG8oYik7XG4gIH1cblxuICByZXR1cm4gcGFyc2VyLm5vZGVzO1xufVxuXG5mdW5jdGlvbiBpc051bGxlZEJveChib3gpIHtcbiAgcmV0dXJuICFib3gud2lkdGggJiYgIWJveC5oZWlnaHQgJiYgIWJveC54ICYmICFib3gueTtcbn1cbmZ1bmN0aW9uIGRvbUNvbnRhaW5zKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgPT09IGdsb2JhbHMuZG9jdW1lbnQgfHwgKGdsb2JhbHMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zIHx8IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gVGhpcyBpcyBJRSAtIGl0IGRvZXMgbm90IHN1cHBvcnQgY29udGFpbnMoKSBmb3IgdG9wLWxldmVsIFNWR3NcbiAgICB3aGlsZSAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlID09PSBnbG9iYWxzLmRvY3VtZW50O1xuICB9KS5jYWxsKGdsb2JhbHMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cbmNsYXNzIEJveCB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmluaXQoLi4uYXJncyk7XG4gIH1cblxuICBhZGRPZmZzZXQoKSB7XG4gICAgLy8gb2Zmc2V0IGJ5IHdpbmRvdyBzY3JvbGwgcG9zaXRpb24sIGJlY2F1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNoYW5nZXMgd2hlbiB3aW5kb3cgaXMgc2Nyb2xsZWRcbiAgICB0aGlzLnggKz0gZ2xvYmFscy53aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgdGhpcy55ICs9IGdsb2JhbHMud2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIHJldHVybiBuZXcgQm94KHRoaXMpO1xuICB9XG5cbiAgaW5pdChzb3VyY2UpIHtcbiAgICBjb25zdCBiYXNlID0gWzAsIDAsIDAsIDBdO1xuICAgIHNvdXJjZSA9IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gc291cmNlLnNwbGl0KGRlbGltaXRlcikubWFwKHBhcnNlRmxvYXQpIDogQXJyYXkuaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogdHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcgPyBbc291cmNlLmxlZnQgIT0gbnVsbCA/IHNvdXJjZS5sZWZ0IDogc291cmNlLngsIHNvdXJjZS50b3AgIT0gbnVsbCA/IHNvdXJjZS50b3AgOiBzb3VyY2UueSwgc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0XSA6IGFyZ3VtZW50cy5sZW5ndGggPT09IDQgPyBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykgOiBiYXNlO1xuICAgIHRoaXMueCA9IHNvdXJjZVswXSB8fCAwO1xuICAgIHRoaXMueSA9IHNvdXJjZVsxXSB8fCAwO1xuICAgIHRoaXMud2lkdGggPSB0aGlzLncgPSBzb3VyY2VbMl0gfHwgMDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuaCA9IHNvdXJjZVszXSB8fCAwOyAvLyBBZGQgbW9yZSBib3VuZGluZyBib3ggcHJvcGVydGllc1xuXG4gICAgdGhpcy54MiA9IHRoaXMueCArIHRoaXMudztcbiAgICB0aGlzLnkyID0gdGhpcy55ICsgdGhpcy5oO1xuICAgIHRoaXMuY3ggPSB0aGlzLnggKyB0aGlzLncgLyAyO1xuICAgIHRoaXMuY3kgPSB0aGlzLnkgKyB0aGlzLmggLyAyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaXNOdWxsZWQoKSB7XG4gICAgcmV0dXJuIGlzTnVsbGVkQm94KHRoaXMpO1xuICB9IC8vIE1lcmdlIHJlY3QgYm94IHdpdGggYW5vdGhlciwgcmV0dXJuIGEgbmV3IGluc3RhbmNlXG5cblxuICBtZXJnZShib3gpIHtcbiAgICBjb25zdCB4ID0gTWF0aC5taW4odGhpcy54LCBib3gueCk7XG4gICAgY29uc3QgeSA9IE1hdGgubWluKHRoaXMueSwgYm94LnkpO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgodGhpcy54ICsgdGhpcy53aWR0aCwgYm94LnggKyBib3gud2lkdGgpIC0geDtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgYm94LnkgKyBib3guaGVpZ2h0KSAtIHk7XG4gICAgcmV0dXJuIG5ldyBCb3goeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnggKyAnICcgKyB0aGlzLnkgKyAnICcgKyB0aGlzLndpZHRoICsgJyAnICsgdGhpcy5oZWlnaHQ7XG4gIH1cblxuICB0cmFuc2Zvcm0obSkge1xuICAgIGlmICghKG0gaW5zdGFuY2VvZiBNYXRyaXgpKSB7XG4gICAgICBtID0gbmV3IE1hdHJpeChtKTtcbiAgICB9XG5cbiAgICBsZXQgeE1pbiA9IEluZmluaXR5O1xuICAgIGxldCB4TWF4ID0gLUluZmluaXR5O1xuICAgIGxldCB5TWluID0gSW5maW5pdHk7XG4gICAgbGV0IHlNYXggPSAtSW5maW5pdHk7XG4gICAgY29uc3QgcHRzID0gW25ldyBQb2ludCh0aGlzLngsIHRoaXMueSksIG5ldyBQb2ludCh0aGlzLngyLCB0aGlzLnkpLCBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkyKSwgbmV3IFBvaW50KHRoaXMueDIsIHRoaXMueTIpXTtcbiAgICBwdHMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgcCA9IHAudHJhbnNmb3JtKG0pO1xuICAgICAgeE1pbiA9IE1hdGgubWluKHhNaW4sIHAueCk7XG4gICAgICB4TWF4ID0gTWF0aC5tYXgoeE1heCwgcC54KTtcbiAgICAgIHlNaW4gPSBNYXRoLm1pbih5TWluLCBwLnkpO1xuICAgICAgeU1heCA9IE1hdGgubWF4KHlNYXgsIHAueSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBCb3goeE1pbiwgeU1pbiwgeE1heCAtIHhNaW4sIHlNYXggLSB5TWluKTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGdldEJveChlbCwgZ2V0QkJveEZuLCByZXRyeSkge1xuICBsZXQgYm94O1xuXG4gIHRyeSB7XG4gICAgLy8gVHJ5IHRvIGdldCB0aGUgYm94IHdpdGggdGhlIHByb3ZpZGVkIGZ1bmN0aW9uXG4gICAgYm94ID0gZ2V0QkJveEZuKGVsLm5vZGUpOyAvLyBJZiB0aGUgYm94IGlzIHdvcnRobGVzcyBhbmQgbm90IGV2ZW4gaW4gdGhlIGRvbSwgcmV0cnlcbiAgICAvLyBieSB0aHJvd2luZyBhbiBlcnJvciBoZXJlLi4uXG5cbiAgICBpZiAoaXNOdWxsZWRCb3goYm94KSAmJiAhZG9tQ29udGFpbnMoZWwubm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudCBub3QgaW4gdGhlIGRvbScpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIC4uLiBhbmQgY2FsbGluZyB0aGUgcmV0cnkgaGFuZGxlciBoZXJlXG4gICAgYm94ID0gcmV0cnkoZWwpO1xuICB9XG5cbiAgcmV0dXJuIGJveDtcbn1cblxuZnVuY3Rpb24gYmJveCgpIHtcbiAgLy8gRnVuY3Rpb24gdG8gZ2V0IGJib3ggaXMgZ2V0QkJveCgpXG4gIGNvbnN0IGdldEJCb3ggPSBub2RlID0+IG5vZGUuZ2V0QkJveCgpOyAvLyBUYWtlIGFsbCBtZWFzdXJlcyBzbyB0aGF0IGEgc3R1cGlkIGJyb3dzZXIgcmVuZGVycyB0aGUgZWxlbWVudFxuICAvLyBzbyB3ZSBjYW4gZ2V0IHRoZSBiYm94IGZyb20gaXQgd2hlbiB3ZSB0cnkgYWdhaW5cblxuXG4gIGNvbnN0IHJldHJ5ID0gZWwgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjbG9uZSA9IGVsLmNsb25lKCkuYWRkVG8ocGFyc2VyKCkuc3ZnKS5zaG93KCk7XG4gICAgICBjb25zdCBib3ggPSBjbG9uZS5ub2RlLmdldEJCb3goKTtcbiAgICAgIGNsb25lLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIGJveDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBXZSBnaXZlIHVwLi4uXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEdldHRpbmcgYmJveCBvZiBlbGVtZW50IFwiJHtlbC5ub2RlLm5vZGVOYW1lfVwiIGlzIG5vdCBwb3NzaWJsZTogJHtlLnRvU3RyaW5nKCl9YCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGJveCA9IGdldEJveCh0aGlzLCBnZXRCQm94LCByZXRyeSk7XG4gIGNvbnN0IGJib3ggPSBuZXcgQm94KGJveCk7XG4gIHJldHVybiBiYm94O1xufVxuZnVuY3Rpb24gcmJveChlbCkge1xuICBjb25zdCBnZXRSQm94ID0gbm9kZSA9PiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHJldHJ5ID0gZWwgPT4ge1xuICAgIC8vIFRoZXJlIGlzIG5vIHBvaW50IGluIHRyeWluZyB0cmlja3MgaGVyZSBiZWNhdXNlIGlmIHdlIGluc2VydCB0aGUgZWxlbWVudCBpbnRvIHRoZSBkb20gb3Vyc2VsdmVzXG4gICAgLy8gaXQgb2J2aW91c2x5IHdpbGwgYmUgYXQgdGhlIHdyb25nIHBvc2l0aW9uXG4gICAgdGhyb3cgbmV3IEVycm9yKGBHZXR0aW5nIHJib3ggb2YgZWxlbWVudCBcIiR7ZWwubm9kZS5ub2RlTmFtZX1cIiBpcyBub3QgcG9zc2libGVgKTtcbiAgfTtcblxuICBjb25zdCBib3ggPSBnZXRCb3godGhpcywgZ2V0UkJveCwgcmV0cnkpO1xuICBjb25zdCByYm94ID0gbmV3IEJveChib3gpOyAvLyBJZiBhbiBlbGVtZW50IHdhcyBwYXNzZWQsIHdlIHdhbnQgdGhlIGJib3ggaW4gdGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoYXQgZWxlbWVudFxuXG4gIGlmIChlbCkge1xuICAgIHJldHVybiByYm94LnRyYW5zZm9ybShlbC5zY3JlZW5DVE0oKS5pbnZlcnNlTygpKTtcbiAgfSAvLyBFbHNlIHdlIHdhbnQgaXQgaW4gYWJzb2x1dGUgc2NyZWVuIGNvb3JkaW5hdGVzXG4gIC8vIFRoZXJlZm9yZSB3ZSBuZWVkIHRvIGFkZCB0aGUgc2Nyb2xsT2Zmc2V0XG5cblxuICByZXR1cm4gcmJveC5hZGRPZmZzZXQoKTtcbn0gLy8gQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHBvaW50IGlzIGluc2lkZSB0aGUgYm91bmRpbmcgYm94XG5cbmZ1bmN0aW9uIGluc2lkZSh4LCB5KSB7XG4gIGNvbnN0IGJveCA9IHRoaXMuYmJveCgpO1xuICByZXR1cm4geCA+IGJveC54ICYmIHkgPiBib3gueSAmJiB4IDwgYm94LnggKyBib3gud2lkdGggJiYgeSA8IGJveC55ICsgYm94LmhlaWdodDtcbn1cbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIHZpZXdib3g6IHtcbiAgICB2aWV3Ym94KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgIGlmICh4ID09IG51bGwpIHJldHVybiBuZXcgQm94KHRoaXMuYXR0cigndmlld0JveCcpKTsgLy8gYWN0IGFzIHNldHRlclxuXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd2aWV3Qm94JywgbmV3IEJveCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgfSxcblxuICAgIHpvb20obGV2ZWwsIHBvaW50KSB7XG4gICAgICAvLyBJdHMgYmVzdCB0byByZWx5IG9uIHRoZSBhdHRyaWJ1dGVzIGhlcmUgYW5kIGhlcmUgaXMgd2h5OlxuICAgICAgLy8gY2xpZW50WFlaOiBEb2Vzbid0IHdvcmsgb24gbm9uLXJvb3Qgc3ZncyBiZWNhdXNlIHRoZXkgZG9udCBoYXZlIGEgQ1NTQm94IChzaWxseSEpXG4gICAgICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IERvZXNuJ3Qgd29yayBiZWNhdXNlIENocm9tZSBqdXN0IGlnbm9yZXMgd2lkdGggYW5kIGhlaWdodCBvZiBuZXN0ZWQgc3ZncyBjb21wbGV0ZWx5XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgbWVhbnMsIHRoZWlyIGNsaWVudFJlY3QgaXMgYWx3YXlzIGFzIGJpZyBhcyB0aGUgY29udGVudC5cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgRnVydGhlcm1vcmUgdGhpcyBzaXplIGlzIGluY29ycmVjdCBpZiB0aGUgZWxlbWVudCBpcyBmdXJ0aGVyIHRyYW5zZm9ybWVkIGJ5IGl0cyBwYXJlbnRzXG4gICAgICAvLyBjb21wdXRlZFN0eWxlOiBPbmx5IHJldHVybnMgbWVhbmluZ2Z1bCB2YWx1ZXMgaWYgY3NzIHdhcyB1c2VkIHdpdGggcHguIFdlIGRvbnQgZ28gdGhpcyByb3V0ZSBoZXJlIVxuICAgICAgLy8gZ2V0QkJveDogcmV0dXJucyB0aGUgYm91bmRpbmcgYm94IG9mIGl0cyBjb250ZW50IC0gdGhhdCBkb2VzbnQgaGVscCFcbiAgICAgIGxldCB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgIH0gPSB0aGlzLmF0dHIoWyd3aWR0aCcsICdoZWlnaHQnXSk7IC8vIFdpZHRoIGFuZCBoZWlnaHQgaXMgYSBzdHJpbmcgd2hlbiBhIG51bWJlciB3aXRoIGEgdW5pdCBpcyBwcmVzZW50IHdoaWNoIHdlIGNhbid0IHVzZVxuICAgICAgLy8gU28gd2UgdHJ5IGNsaWVudFhZWlxuXG4gICAgICBpZiAoIXdpZHRoICYmICFoZWlnaHQgfHwgdHlwZW9mIHdpZHRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaGVpZ2h0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB3aWR0aCA9IHRoaXMubm9kZS5jbGllbnRXaWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gdGhpcy5ub2RlLmNsaWVudEhlaWdodDtcbiAgICAgIH0gLy8gR2l2aW5nIHVwLi4uXG5cblxuICAgICAgaWYgKCF3aWR0aCB8fCAhaGVpZ2h0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW1wb3NzaWJsZSB0byBnZXQgYWJzb2x1dGUgd2lkdGggYW5kIGhlaWdodC4gUGxlYXNlIHByb3ZpZGUgYW4gYWJzb2x1dGUgd2lkdGggYW5kIGhlaWdodCBhdHRyaWJ1dGUgb24gdGhlIHpvb21pbmcgZWxlbWVudCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2ID0gdGhpcy52aWV3Ym94KCk7XG4gICAgICBjb25zdCB6b29tWCA9IHdpZHRoIC8gdi53aWR0aDtcbiAgICAgIGNvbnN0IHpvb21ZID0gaGVpZ2h0IC8gdi5oZWlnaHQ7XG4gICAgICBjb25zdCB6b29tID0gTWF0aC5taW4oem9vbVgsIHpvb21ZKTtcblxuICAgICAgaWYgKGxldmVsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHpvb207XG4gICAgICB9XG5cbiAgICAgIGxldCB6b29tQW1vdW50ID0gem9vbSAvIGxldmVsOyAvLyBTZXQgdGhlIHpvb21BbW91bnQgdG8gdGhlIGhpZ2hlc3QgdmFsdWUgd2hpY2ggaXMgc2FmZSB0byBwcm9jZXNzIGFuZCByZWNvdmVyIGZyb21cbiAgICAgIC8vIFRoZSAqIDEwMCBpcyBhIGJpdCBvZiB3aWdnbGUgcm9vbSBmb3IgdGhlIG1hdHJpeCB0cmFuc2Zvcm1hdGlvblxuXG4gICAgICBpZiAoem9vbUFtb3VudCA9PT0gSW5maW5pdHkpIHpvb21BbW91bnQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAvIDEwMDtcbiAgICAgIHBvaW50ID0gcG9pbnQgfHwgbmV3IFBvaW50KHdpZHRoIC8gMiAvIHpvb21YICsgdi54LCBoZWlnaHQgLyAyIC8gem9vbVkgKyB2LnkpO1xuICAgICAgY29uc3QgYm94ID0gbmV3IEJveCh2KS50cmFuc2Zvcm0obmV3IE1hdHJpeCh7XG4gICAgICAgIHNjYWxlOiB6b29tQW1vdW50LFxuICAgICAgICBvcmlnaW46IHBvaW50XG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gdGhpcy52aWV3Ym94KGJveCk7XG4gICAgfVxuXG4gIH1cbn0pO1xucmVnaXN0ZXIoQm94LCAnQm94Jyk7XG5cbmNsYXNzIExpc3QgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGFyciA9IFtdLCAuLi5hcmdzKSB7XG4gICAgc3VwZXIoYXJyLCAuLi5hcmdzKTtcbiAgICBpZiAodHlwZW9mIGFyciA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnB1c2goLi4uYXJyKTtcbiAgfVxuXG59XG5leHRlbmQoW0xpc3RdLCB7XG4gIGVhY2goZm5Pck1ldGhvZE5hbWUsIC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGZuT3JNZXRob2ROYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoKGVsLCBpLCBhcnIpID0+IHtcbiAgICAgICAgcmV0dXJuIGZuT3JNZXRob2ROYW1lLmNhbGwoZWwsIGVsLCBpLCBhcnIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcChlbCA9PiB7XG4gICAgICAgIHJldHVybiBlbFtmbk9yTWV0aG9kTmFtZV0oLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgdGhpcyk7XG4gIH1cblxufSk7XG5jb25zdCByZXNlcnZlZCA9IFsndG9BcnJheScsICdjb25zdHJ1Y3RvcicsICdlYWNoJ107XG5cbkxpc3QuZXh0ZW5kID0gZnVuY3Rpb24gKG1ldGhvZHMpIHtcbiAgbWV0aG9kcyA9IG1ldGhvZHMucmVkdWNlKChvYmosIG5hbWUpID0+IHtcbiAgICAvLyBEb24ndCBvdmVyd3JpdGUgb3duIG1ldGhvZHNcbiAgICBpZiAocmVzZXJ2ZWQuaW5jbHVkZXMobmFtZSkpIHJldHVybiBvYmo7IC8vIERvbid0IGFkZCBwcml2YXRlIG1ldGhvZHNcblxuICAgIGlmIChuYW1lWzBdID09PSAnXycpIHJldHVybiBvYmo7IC8vIFJlbGF5IGV2ZXJ5IGNhbGwgdG8gZWFjaCgpXG5cbiAgICBvYmpbbmFtZV0gPSBmdW5jdGlvbiAoLi4uYXR0cnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSwgLi4uYXR0cnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG4gIGV4dGVuZChbTGlzdF0sIG1ldGhvZHMpO1xufTtcblxuZnVuY3Rpb24gYmFzZUZpbmQocXVlcnksIHBhcmVudCkge1xuICByZXR1cm4gbmV3IExpc3QobWFwKChwYXJlbnQgfHwgZ2xvYmFscy5kb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChxdWVyeSksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFkb3B0KG5vZGUpO1xuICB9KSk7XG59IC8vIFNjb3BlZCBmaW5kIG1ldGhvZFxuXG5mdW5jdGlvbiBmaW5kKHF1ZXJ5KSB7XG4gIHJldHVybiBiYXNlRmluZChxdWVyeSwgdGhpcy5ub2RlKTtcbn1cbmZ1bmN0aW9uIGZpbmRPbmUocXVlcnkpIHtcbiAgcmV0dXJuIGFkb3B0KHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKHF1ZXJ5KSk7XG59XG5cbmxldCBsaXN0ZW5lcklkID0gMDtcbmNvbnN0IHdpbmRvd0V2ZW50cyA9IHt9O1xuZnVuY3Rpb24gZ2V0RXZlbnRzKGluc3RhbmNlKSB7XG4gIGxldCBuID0gaW5zdGFuY2UuZ2V0RXZlbnRIb2xkZXIoKTsgLy8gV2UgZG9udCB3YW50IHRvIHNhdmUgZXZlbnRzIGluIGdsb2JhbCBzcGFjZVxuXG4gIGlmIChuID09PSBnbG9iYWxzLndpbmRvdykgbiA9IHdpbmRvd0V2ZW50cztcbiAgaWYgKCFuLmV2ZW50cykgbi5ldmVudHMgPSB7fTtcbiAgcmV0dXJuIG4uZXZlbnRzO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIGluc3RhbmNlLmdldEV2ZW50VGFyZ2V0KCk7XG59XG5mdW5jdGlvbiBjbGVhckV2ZW50cyhpbnN0YW5jZSkge1xuICBsZXQgbiA9IGluc3RhbmNlLmdldEV2ZW50SG9sZGVyKCk7XG4gIGlmIChuID09PSBnbG9iYWxzLndpbmRvdykgbiA9IHdpbmRvd0V2ZW50cztcbiAgaWYgKG4uZXZlbnRzKSBuLmV2ZW50cyA9IHt9O1xufSAvLyBBZGQgZXZlbnQgYmluZGVyIGluIHRoZSBTVkcgbmFtZXNwYWNlXG5cbmZ1bmN0aW9uIG9uKG5vZGUsIGV2ZW50cywgbGlzdGVuZXIsIGJpbmRpbmcsIG9wdGlvbnMpIHtcbiAgY29uc3QgbCA9IGxpc3RlbmVyLmJpbmQoYmluZGluZyB8fCBub2RlKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBtYWtlSW5zdGFuY2Uobm9kZSk7XG4gIGNvbnN0IGJhZyA9IGdldEV2ZW50cyhpbnN0YW5jZSk7XG4gIGNvbnN0IG4gPSBnZXRFdmVudFRhcmdldChpbnN0YW5jZSk7IC8vIGV2ZW50cyBjYW4gYmUgYW4gYXJyYXkgb2YgZXZlbnRzIG9yIGEgc3RyaW5nIG9mIGV2ZW50c1xuXG4gIGV2ZW50cyA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdChkZWxpbWl0ZXIpOyAvLyBhZGQgaWQgdG8gbGlzdGVuZXJcblxuICBpZiAoIWxpc3RlbmVyLl9zdmdqc0xpc3RlbmVySWQpIHtcbiAgICBsaXN0ZW5lci5fc3ZnanNMaXN0ZW5lcklkID0gKytsaXN0ZW5lcklkO1xuICB9XG5cbiAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgZXYgPSBldmVudC5zcGxpdCgnLicpWzBdO1xuICAgIGNvbnN0IG5zID0gZXZlbnQuc3BsaXQoJy4nKVsxXSB8fCAnKic7IC8vIGVuc3VyZSB2YWxpZCBvYmplY3RcblxuICAgIGJhZ1tldl0gPSBiYWdbZXZdIHx8IHt9O1xuICAgIGJhZ1tldl1bbnNdID0gYmFnW2V2XVtuc10gfHwge307IC8vIHJlZmVyZW5jZSBsaXN0ZW5lclxuXG4gICAgYmFnW2V2XVtuc11bbGlzdGVuZXIuX3N2Z2pzTGlzdGVuZXJJZF0gPSBsOyAvLyBhZGQgbGlzdGVuZXJcblxuICAgIG4uYWRkRXZlbnRMaXN0ZW5lcihldiwgbCwgb3B0aW9ucyB8fCBmYWxzZSk7XG4gIH0pO1xufSAvLyBBZGQgZXZlbnQgdW5iaW5kZXIgaW4gdGhlIFNWRyBuYW1lc3BhY2VcblxuZnVuY3Rpb24gb2ZmKG5vZGUsIGV2ZW50cywgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBtYWtlSW5zdGFuY2Uobm9kZSk7XG4gIGNvbnN0IGJhZyA9IGdldEV2ZW50cyhpbnN0YW5jZSk7XG4gIGNvbnN0IG4gPSBnZXRFdmVudFRhcmdldChpbnN0YW5jZSk7IC8vIGxpc3RlbmVyIGNhbiBiZSBhIGZ1bmN0aW9uIG9yIGEgbnVtYmVyXG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxpc3RlbmVyID0gbGlzdGVuZXIuX3N2Z2pzTGlzdGVuZXJJZDtcbiAgICBpZiAoIWxpc3RlbmVyKSByZXR1cm47XG4gIH0gLy8gZXZlbnRzIGNhbiBiZSBhbiBhcnJheSBvZiBldmVudHMgb3IgYSBzdHJpbmcgb3IgdW5kZWZpbmVkXG5cblxuICBldmVudHMgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiAoZXZlbnRzIHx8ICcnKS5zcGxpdChkZWxpbWl0ZXIpO1xuICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBldiA9IGV2ZW50ICYmIGV2ZW50LnNwbGl0KCcuJylbMF07XG4gICAgY29uc3QgbnMgPSBldmVudCAmJiBldmVudC5zcGxpdCgnLicpWzFdO1xuICAgIGxldCBuYW1lc3BhY2UsIGw7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lciByZWZlcmVuY2VcbiAgICAgIGlmIChiYWdbZXZdICYmIGJhZ1tldl1bbnMgfHwgJyonXSkge1xuICAgICAgICAvLyByZW1vdmVMaXN0ZW5lclxuICAgICAgICBuLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGJhZ1tldl1bbnMgfHwgJyonXVtsaXN0ZW5lcl0sIG9wdGlvbnMgfHwgZmFsc2UpO1xuICAgICAgICBkZWxldGUgYmFnW2V2XVtucyB8fCAnKiddW2xpc3RlbmVyXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV2ICYmIG5zKSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgYSBuYW1lc3BhY2VkIGV2ZW50XG4gICAgICBpZiAoYmFnW2V2XSAmJiBiYWdbZXZdW25zXSkge1xuICAgICAgICBmb3IgKGwgaW4gYmFnW2V2XVtuc10pIHtcbiAgICAgICAgICBvZmYobiwgW2V2LCBuc10uam9pbignLicpLCBsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBiYWdbZXZdW25zXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5zKSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgYSBzcGVjaWZpYyBuYW1lc3BhY2VcbiAgICAgIGZvciAoZXZlbnQgaW4gYmFnKSB7XG4gICAgICAgIGZvciAobmFtZXNwYWNlIGluIGJhZ1tldmVudF0pIHtcbiAgICAgICAgICBpZiAobnMgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgb2ZmKG4sIFtldmVudCwgbnNdLmpvaW4oJy4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChldikge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBldmVudFxuICAgICAgaWYgKGJhZ1tldl0pIHtcbiAgICAgICAgZm9yIChuYW1lc3BhY2UgaW4gYmFnW2V2XSkge1xuICAgICAgICAgIG9mZihuLCBbZXYsIG5hbWVzcGFjZV0uam9pbignLicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBiYWdbZXZdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBvbiBhIGdpdmVuIG5vZGVcbiAgICAgIGZvciAoZXZlbnQgaW4gYmFnKSB7XG4gICAgICAgIG9mZihuLCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyRXZlbnRzKGluc3RhbmNlKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZXZlbnQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgbiA9IGdldEV2ZW50VGFyZ2V0KG5vZGUpOyAvLyBEaXNwYXRjaCBldmVudFxuXG4gIGlmIChldmVudCBpbnN0YW5jZW9mIGdsb2JhbHMud2luZG93LkV2ZW50KSB7XG4gICAgbi5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IG5ldyBnbG9iYWxzLndpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgZGV0YWlsOiBkYXRhLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9KTtcbiAgICBuLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG5jbGFzcyBFdmVudFRhcmdldCBleHRlbmRzIEJhc2Uge1xuICBhZGRFdmVudExpc3RlbmVyKCkge31cblxuICBkaXNwYXRjaChldmVudCwgZGF0YSwgb3B0aW9ucykge1xuICAgIHJldHVybiBkaXNwYXRjaCh0aGlzLCBldmVudCwgZGF0YSwgb3B0aW9ucyk7XG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgY29uc3QgYmFnID0gdGhpcy5nZXRFdmVudEhvbGRlcigpLmV2ZW50cztcbiAgICBpZiAoIWJhZykgcmV0dXJuIHRydWU7XG4gICAgY29uc3QgZXZlbnRzID0gYmFnW2V2ZW50LnR5cGVdO1xuXG4gICAgZm9yIChjb25zdCBpIGluIGV2ZW50cykge1xuICAgICAgZm9yIChjb25zdCBqIGluIGV2ZW50c1tpXSkge1xuICAgICAgICBldmVudHNbaV1bal0oZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgfSAvLyBGaXJlIGdpdmVuIGV2ZW50XG5cblxuICBmaXJlKGV2ZW50LCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5kaXNwYXRjaChldmVudCwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXRFdmVudEhvbGRlcigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldEV2ZW50VGFyZ2V0KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFVuYmluZCBldmVudCBmcm9tIGxpc3RlbmVyXG5cblxuICBvZmYoZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgb2ZmKHRoaXMsIGV2ZW50LCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gQmluZCBnaXZlbiBldmVudCB0byBsaXN0ZW5lclxuXG5cbiAgb24oZXZlbnQsIGxpc3RlbmVyLCBiaW5kaW5nLCBvcHRpb25zKSB7XG4gICAgb24odGhpcywgZXZlbnQsIGxpc3RlbmVyLCBiaW5kaW5nLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fVxuXG59XG5yZWdpc3RlcihFdmVudFRhcmdldCwgJ0V2ZW50VGFyZ2V0Jyk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fSAvLyBEZWZhdWx0IGFuaW1hdGlvbiB2YWx1ZXNcblxuY29uc3QgdGltZWxpbmUgPSB7XG4gIGR1cmF0aW9uOiA0MDAsXG4gIGVhc2U6ICc+JyxcbiAgZGVsYXk6IDBcbn07IC8vIERlZmF1bHQgYXR0cmlidXRlIHZhbHVlc1xuXG5jb25zdCBhdHRycyA9IHtcbiAgLy8gZmlsbCBhbmQgc3Ryb2tlXG4gICdmaWxsLW9wYWNpdHknOiAxLFxuICAnc3Ryb2tlLW9wYWNpdHknOiAxLFxuICAnc3Ryb2tlLXdpZHRoJzogMCxcbiAgJ3N0cm9rZS1saW5lam9pbic6ICdtaXRlcicsXG4gICdzdHJva2UtbGluZWNhcCc6ICdidXR0JyxcbiAgZmlsbDogJyMwMDAwMDAnLFxuICBzdHJva2U6ICcjMDAwMDAwJyxcbiAgb3BhY2l0eTogMSxcbiAgLy8gcG9zaXRpb25cbiAgeDogMCxcbiAgeTogMCxcbiAgY3g6IDAsXG4gIGN5OiAwLFxuICAvLyBzaXplXG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDAsXG4gIC8vIHJhZGl1c1xuICByOiAwLFxuICByeDogMCxcbiAgcnk6IDAsXG4gIC8vIGdyYWRpZW50XG4gIG9mZnNldDogMCxcbiAgJ3N0b3Atb3BhY2l0eSc6IDEsXG4gICdzdG9wLWNvbG9yJzogJyMwMDAwMDAnLFxuICAvLyB0ZXh0XG4gICd0ZXh0LWFuY2hvcic6ICdzdGFydCdcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBub29wOiBub29wLFxuICB0aW1lbGluZTogdGltZWxpbmUsXG4gIGF0dHJzOiBhdHRyc1xufTtcblxuY2xhc3MgU1ZHQXJyYXkgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcbiAgICB0aGlzLmluaXQoLi4uYXJncyk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gIH1cblxuICBpbml0KGFycikge1xuICAgIC8vIFRoaXMgY2F0Y2hlcyB0aGUgY2FzZSwgdGhhdCBuYXRpdmUgbWFwIHRyaWVzIHRvIGNyZWF0ZSBhbiBhcnJheSB3aXRoIG5ldyBBcnJheSgxKVxuICAgIGlmICh0eXBlb2YgYXJyID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXM7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucHVzaCguLi50aGlzLnBhcnNlKGFycikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFBhcnNlIHdoaXRlc3BhY2Ugc2VwYXJhdGVkIHN0cmluZ1xuXG5cbiAgcGFyc2UoYXJyYXkgPSBbXSkge1xuICAgIC8vIElmIGFscmVhZHkgaXMgYW4gYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcbiAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIGFycmF5O1xuICAgIHJldHVybiBhcnJheS50cmltKCkuc3BsaXQoZGVsaW1pdGVyKS5tYXAocGFyc2VGbG9hdCk7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCB0aGlzKTtcbiAgfVxuXG4gIHRvU2V0KCkge1xuICAgIHJldHVybiBuZXcgU2V0KHRoaXMpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuam9pbignICcpO1xuICB9IC8vIEZsYXR0ZW5zIHRoZSBhcnJheSBpZiBuZWVkZWRcblxuXG4gIHZhbHVlT2YoKSB7XG4gICAgY29uc3QgcmV0ID0gW107XG4gICAgcmV0LnB1c2goLi4udGhpcyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG59XG5cbmNsYXNzIFNWR051bWJlciB7XG4gIC8vIEluaXRpYWxpemVcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHRoaXMuaW5pdCguLi5hcmdzKTtcbiAgfVxuXG4gIGNvbnZlcnQodW5pdCkge1xuICAgIHJldHVybiBuZXcgU1ZHTnVtYmVyKHRoaXMudmFsdWUsIHVuaXQpO1xuICB9IC8vIERpdmlkZSBudW1iZXJcblxuXG4gIGRpdmlkZShudW1iZXIpIHtcbiAgICBudW1iZXIgPSBuZXcgU1ZHTnVtYmVyKG51bWJlcik7XG4gICAgcmV0dXJuIG5ldyBTVkdOdW1iZXIodGhpcyAvIG51bWJlciwgdGhpcy51bml0IHx8IG51bWJlci51bml0KTtcbiAgfVxuXG4gIGluaXQodmFsdWUsIHVuaXQpIHtcbiAgICB1bml0ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVsxXSA6IHVuaXQ7XG4gICAgdmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlWzBdIDogdmFsdWU7IC8vIGluaXRpYWxpemUgZGVmYXVsdHNcblxuICAgIHRoaXMudmFsdWUgPSAwO1xuICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgJyc7IC8vIHBhcnNlIHZhbHVlXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gZW5zdXJlIGEgdmFsaWQgbnVtZXJpYyB2YWx1ZVxuICAgICAgdGhpcy52YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiAhaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgPCAwID8gLTMuNGUrMzggOiArMy40ZSszOCA6IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdW5pdCA9IHZhbHVlLm1hdGNoKG51bWJlckFuZFVuaXQpO1xuXG4gICAgICBpZiAodW5pdCkge1xuICAgICAgICAvLyBtYWtlIHZhbHVlIG51bWVyaWNcbiAgICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlRmxvYXQodW5pdFsxXSk7IC8vIG5vcm1hbGl6ZVxuXG4gICAgICAgIGlmICh1bml0WzVdID09PSAnJScpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlIC89IDEwMDtcbiAgICAgICAgfSBlbHNlIGlmICh1bml0WzVdID09PSAncycpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlICo9IDEwMDA7XG4gICAgICAgIH0gLy8gc3RvcmUgdW5pdFxuXG5cbiAgICAgICAgdGhpcy51bml0ID0gdW5pdFs1XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU1ZHTnVtYmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICAgIHRoaXMudW5pdCA9IHZhbHVlLnVuaXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gU3VidHJhY3QgbnVtYmVyXG5cblxuICBtaW51cyhudW1iZXIpIHtcbiAgICBudW1iZXIgPSBuZXcgU1ZHTnVtYmVyKG51bWJlcik7XG4gICAgcmV0dXJuIG5ldyBTVkdOdW1iZXIodGhpcyAtIG51bWJlciwgdGhpcy51bml0IHx8IG51bWJlci51bml0KTtcbiAgfSAvLyBBZGQgbnVtYmVyXG5cblxuICBwbHVzKG51bWJlcikge1xuICAgIG51bWJlciA9IG5ldyBTVkdOdW1iZXIobnVtYmVyKTtcbiAgICByZXR1cm4gbmV3IFNWR051bWJlcih0aGlzICsgbnVtYmVyLCB0aGlzLnVuaXQgfHwgbnVtYmVyLnVuaXQpO1xuICB9IC8vIE11bHRpcGx5IG51bWJlclxuXG5cbiAgdGltZXMobnVtYmVyKSB7XG4gICAgbnVtYmVyID0gbmV3IFNWR051bWJlcihudW1iZXIpO1xuICAgIHJldHVybiBuZXcgU1ZHTnVtYmVyKHRoaXMgKiBudW1iZXIsIHRoaXMudW5pdCB8fCBudW1iZXIudW5pdCk7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiBbdGhpcy52YWx1ZSwgdGhpcy51bml0XTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICh0aGlzLnVuaXQgPT09ICclJyA/IH5+KHRoaXMudmFsdWUgKiAxZTgpIC8gMWU2IDogdGhpcy51bml0ID09PSAncycgPyB0aGlzLnZhbHVlIC8gMWUzIDogdGhpcy52YWx1ZSkgKyB0aGlzLnVuaXQ7XG4gIH1cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbn1cblxuY29uc3QgaG9va3MgPSBbXTtcbmZ1bmN0aW9uIHJlZ2lzdGVyQXR0ckhvb2soZm4pIHtcbiAgaG9va3MucHVzaChmbik7XG59IC8vIFNldCBzdmcgZWxlbWVudCBhdHRyaWJ1dGVcblxuZnVuY3Rpb24gYXR0cihhdHRyLCB2YWwsIG5zKSB7XG4gIC8vIGFjdCBhcyBmdWxsIGdldHRlclxuICBpZiAoYXR0ciA9PSBudWxsKSB7XG4gICAgLy8gZ2V0IGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzXG4gICAgYXR0ciA9IHt9O1xuICAgIHZhbCA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHZhbCkge1xuICAgICAgYXR0cltub2RlLm5vZGVOYW1lXSA9IGlzTnVtYmVyLnRlc3Qobm9kZS5ub2RlVmFsdWUpID8gcGFyc2VGbG9hdChub2RlLm5vZGVWYWx1ZSkgOiBub2RlLm5vZGVWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXR0cjtcbiAgfSBlbHNlIGlmIChhdHRyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAvLyBsb29wIHRocm91Z2ggYXJyYXkgYW5kIGdldCBhbGwgdmFsdWVzXG4gICAgcmV0dXJuIGF0dHIucmVkdWNlKChsYXN0LCBjdXJyKSA9PiB7XG4gICAgICBsYXN0W2N1cnJdID0gdGhpcy5hdHRyKGN1cnIpO1xuICAgICAgcmV0dXJuIGxhc3Q7XG4gICAgfSwge30pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhdHRyID09PSAnb2JqZWN0JyAmJiBhdHRyLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAvLyBhcHBseSBldmVyeSBhdHRyaWJ1dGUgaW5kaXZpZHVhbGx5IGlmIGFuIG9iamVjdCBpcyBwYXNzZWRcbiAgICBmb3IgKHZhbCBpbiBhdHRyKSB0aGlzLmF0dHIodmFsLCBhdHRyW3ZhbF0pO1xuICB9IGVsc2UgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgIC8vIHJlbW92ZSB2YWx1ZVxuICAgIHRoaXMubm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH0gZWxzZSBpZiAodmFsID09IG51bGwpIHtcbiAgICAvLyBhY3QgYXMgYSBnZXR0ZXIgaWYgdGhlIGZpcnN0IGFuZCBvbmx5IGFyZ3VtZW50IGlzIG5vdCBhbiBvYmplY3RcbiAgICB2YWwgPSB0aGlzLm5vZGUuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgIHJldHVybiB2YWwgPT0gbnVsbCA/IGF0dHJzW2F0dHJdIDogaXNOdW1iZXIudGVzdCh2YWwpID8gcGFyc2VGbG9hdCh2YWwpIDogdmFsO1xuICB9IGVsc2Uge1xuICAgIC8vIExvb3AgdGhyb3VnaCBob29rcyBhbmQgZXhlY3V0ZSB0aGVtIHRvIGNvbnZlcnQgdmFsdWVcbiAgICB2YWwgPSBob29rcy5yZWR1Y2UoKF92YWwsIGhvb2spID0+IHtcbiAgICAgIHJldHVybiBob29rKGF0dHIsIF92YWwsIHRoaXMpO1xuICAgIH0sIHZhbCk7IC8vIGVuc3VyZSBjb3JyZWN0IG51bWVyaWMgdmFsdWVzIChhbHNvIGFjY2VwdHMgTmFOIGFuZCBJbmZpbml0eSlcblxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsID0gbmV3IFNWR051bWJlcih2YWwpO1xuICAgIH0gZWxzZSBpZiAoQ29sb3IuaXNDb2xvcih2YWwpKSB7XG4gICAgICAvLyBlbnN1cmUgZnVsbCBoZXggY29sb3JcbiAgICAgIHZhbCA9IG5ldyBDb2xvcih2YWwpO1xuICAgIH0gZWxzZSBpZiAodmFsLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgLy8gQ2hlY2sgZm9yIHBsYWluIGFycmF5cyBhbmQgcGFyc2UgYXJyYXkgdmFsdWVzXG4gICAgICB2YWwgPSBuZXcgU1ZHQXJyYXkodmFsKTtcbiAgICB9IC8vIGlmIHRoZSBwYXNzZWQgYXR0cmlidXRlIGlzIGxlYWRpbmcuLi5cblxuXG4gICAgaWYgKGF0dHIgPT09ICdsZWFkaW5nJykge1xuICAgICAgLy8gLi4uIGNhbGwgdGhlIGxlYWRpbmcgbWV0aG9kIGluc3RlYWRcbiAgICAgIGlmICh0aGlzLmxlYWRpbmcpIHtcbiAgICAgICAgdGhpcy5sZWFkaW5nKHZhbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNldCBnaXZlbiBhdHRyaWJ1dGUgb24gbm9kZVxuICAgICAgdHlwZW9mIG5zID09PSAnc3RyaW5nJyA/IHRoaXMubm9kZS5zZXRBdHRyaWJ1dGVOUyhucywgYXR0ciwgdmFsLnRvU3RyaW5nKCkpIDogdGhpcy5ub2RlLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgfSAvLyByZWJ1aWxkIGlmIHJlcXVpcmVkXG5cblxuICAgIGlmICh0aGlzLnJlYnVpbGQgJiYgKGF0dHIgPT09ICdmb250LXNpemUnIHx8IGF0dHIgPT09ICd4JykpIHtcbiAgICAgIHRoaXMucmVidWlsZCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5jbGFzcyBEb20gZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMudHlwZSA9IG5vZGUubm9kZU5hbWU7XG5cbiAgICBpZiAoYXR0cnMgJiYgbm9kZSAhPT0gYXR0cnMpIHtcbiAgICAgIHRoaXMuYXR0cihhdHRycyk7XG4gICAgfVxuICB9IC8vIEFkZCBnaXZlbiBlbGVtZW50IGF0IGEgcG9zaXRpb25cblxuXG4gIGFkZChlbGVtZW50LCBpKSB7XG4gICAgZWxlbWVudCA9IG1ha2VJbnN0YW5jZShlbGVtZW50KTsgLy8gSWYgbm9uLXJvb3Qgc3ZnIG5vZGVzIGFyZSBhZGRlZCB3ZSBoYXZlIHRvIHJlbW92ZSB0aGVpciBuYW1lc3BhY2VzXG5cbiAgICBpZiAoZWxlbWVudC5yZW1vdmVOYW1lc3BhY2UgJiYgdGhpcy5ub2RlIGluc3RhbmNlb2YgZ2xvYmFscy53aW5kb3cuU1ZHRWxlbWVudCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVOYW1lc3BhY2UoKTtcbiAgICB9XG5cbiAgICBpZiAoaSA9PSBudWxsKSB7XG4gICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudC5ub2RlKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQubm9kZSAhPT0gdGhpcy5ub2RlLmNoaWxkTm9kZXNbaV0pIHtcbiAgICAgIHRoaXMubm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudC5ub2RlLCB0aGlzLm5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gQWRkIGVsZW1lbnQgdG8gZ2l2ZW4gY29udGFpbmVyIGFuZCByZXR1cm4gc2VsZlxuXG5cbiAgYWRkVG8ocGFyZW50LCBpKSB7XG4gICAgcmV0dXJuIG1ha2VJbnN0YW5jZShwYXJlbnQpLnB1dCh0aGlzLCBpKTtcbiAgfSAvLyBSZXR1cm5zIGFsbCBjaGlsZCBlbGVtZW50c1xuXG5cbiAgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIG5ldyBMaXN0KG1hcCh0aGlzLm5vZGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gYWRvcHQobm9kZSk7XG4gICAgfSkpO1xuICB9IC8vIFJlbW92ZSBhbGwgZWxlbWVudHMgaW4gdGhpcyBjb250YWluZXJcblxuXG4gIGNsZWFyKCkge1xuICAgIC8vIHJlbW92ZSBjaGlsZHJlblxuICAgIHdoaWxlICh0aGlzLm5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlLmxhc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gQ2xvbmUgZWxlbWVudFxuXG5cbiAgY2xvbmUoZGVlcCA9IHRydWUpIHtcbiAgICAvLyB3cml0ZSBkb20gZGF0YSB0byB0aGUgZG9tIHNvIHRoZSBjbG9uZSBjYW4gcGlja3VwIHRoZSBkYXRhXG4gICAgdGhpcy53cml0ZURhdGFUb0RvbSgpOyAvLyBjbG9uZSBlbGVtZW50IGFuZCBhc3NpZ24gbmV3IGlkXG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYXNzaWduTmV3SWQodGhpcy5ub2RlLmNsb25lTm9kZShkZWVwKSkpO1xuICB9IC8vIEl0ZXJhdGVzIG92ZXIgYWxsIGNoaWxkcmVuIGFuZCBpbnZva2VzIGEgZ2l2ZW4gYmxvY2tcblxuXG4gIGVhY2goYmxvY2ssIGRlZXApIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4oKTtcbiAgICBsZXQgaSwgaWw7XG5cbiAgICBmb3IgKGkgPSAwLCBpbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGJsb2NrLmFwcGx5KGNoaWxkcmVuW2ldLCBbaSwgY2hpbGRyZW5dKTtcblxuICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgY2hpbGRyZW5baV0uZWFjaChibG9jaywgZGVlcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBlbGVtZW50KG5vZGVOYW1lLCBhdHRycykge1xuICAgIHJldHVybiB0aGlzLnB1dChuZXcgRG9tKGNyZWF0ZShub2RlTmFtZSksIGF0dHJzKSk7XG4gIH0gLy8gR2V0IGZpcnN0IGNoaWxkXG5cblxuICBmaXJzdCgpIHtcbiAgICByZXR1cm4gYWRvcHQodGhpcy5ub2RlLmZpcnN0Q2hpbGQpO1xuICB9IC8vIEdldCBhIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4XG5cblxuICBnZXQoaSkge1xuICAgIHJldHVybiBhZG9wdCh0aGlzLm5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gIH1cblxuICBnZXRFdmVudEhvbGRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlO1xuICB9XG5cbiAgZ2V0RXZlbnRUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgfSAvLyBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgYSBjaGlsZFxuXG5cbiAgaGFzKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleChlbGVtZW50KSA+PSAwO1xuICB9XG5cbiAgaHRtbChodG1sT3JGbiwgb3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIHRoaXMueG1sKGh0bWxPckZuLCBvdXRlckhUTUwsIGh0bWwpO1xuICB9IC8vIEdldCAvIHNldCBpZFxuXG5cbiAgaWQoaWQpIHtcbiAgICAvLyBnZW5lcmF0ZSBuZXcgaWQgaWYgbm8gaWQgc2V0XG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMubm9kZS5pZCkge1xuICAgICAgdGhpcy5ub2RlLmlkID0gZWlkKHRoaXMudHlwZSk7XG4gICAgfSAvLyBkb24ndCBzZXQgZGlyZWN0bHkgd2l0aCB0aGlzLm5vZGUuaWQgdG8gbWFrZSBgbnVsbGAgd29yayBjb3JyZWN0bHlcblxuXG4gICAgcmV0dXJuIHRoaXMuYXR0cignaWQnLCBpZCk7XG4gIH0gLy8gR2V0cyBpbmRleCBvZiBnaXZlbiBlbGVtZW50XG5cblxuICBpbmRleChlbGVtZW50KSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodGhpcy5ub2RlLmNoaWxkTm9kZXMpLmluZGV4T2YoZWxlbWVudC5ub2RlKTtcbiAgfSAvLyBHZXQgdGhlIGxhc3QgY2hpbGRcblxuXG4gIGxhc3QoKSB7XG4gICAgcmV0dXJuIGFkb3B0KHRoaXMubm9kZS5sYXN0Q2hpbGQpO1xuICB9IC8vIG1hdGNoZXMgdGhlIGVsZW1lbnQgdnMgYSBjc3Mgc2VsZWN0b3JcblxuXG4gIG1hdGNoZXMoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMubm9kZTtcbiAgICBjb25zdCBtYXRjaGVyID0gZWwubWF0Y2hlcyB8fCBlbC5tYXRjaGVzU2VsZWN0b3IgfHwgZWwubXNNYXRjaGVzU2VsZWN0b3IgfHwgZWwubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbC5vTWF0Y2hlc1NlbGVjdG9yIHx8IG51bGw7XG4gICAgcmV0dXJuIG1hdGNoZXIgJiYgbWF0Y2hlci5jYWxsKGVsLCBzZWxlY3Rvcik7XG4gIH0gLy8gUmV0dXJucyB0aGUgcGFyZW50IGVsZW1lbnQgaW5zdGFuY2VcblxuXG4gIHBhcmVudCh0eXBlKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXM7IC8vIGNoZWNrIGZvciBwYXJlbnRcblxuICAgIGlmICghcGFyZW50Lm5vZGUucGFyZW50Tm9kZSkgcmV0dXJuIG51bGw7IC8vIGdldCBwYXJlbnQgZWxlbWVudFxuXG4gICAgcGFyZW50ID0gYWRvcHQocGFyZW50Lm5vZGUucGFyZW50Tm9kZSk7XG4gICAgaWYgKCF0eXBlKSByZXR1cm4gcGFyZW50OyAvLyBsb29wIHRyb3VnaCBhbmNlc3RvcnMgaWYgdHlwZSBpcyBnaXZlblxuXG4gICAgZG8ge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHBhcmVudC5tYXRjaGVzKHR5cGUpIDogcGFyZW50IGluc3RhbmNlb2YgdHlwZSkgcmV0dXJuIHBhcmVudDtcbiAgICB9IHdoaWxlIChwYXJlbnQgPSBhZG9wdChwYXJlbnQubm9kZS5wYXJlbnROb2RlKSk7XG5cbiAgICByZXR1cm4gcGFyZW50O1xuICB9IC8vIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIGFzIGBhZGQoKWAgYnV0IHJldHVybnMgdGhlIGFkZGVkIGVsZW1lbnQgaW5zdGVhZFxuXG5cbiAgcHV0KGVsZW1lbnQsIGkpIHtcbiAgICBlbGVtZW50ID0gbWFrZUluc3RhbmNlKGVsZW1lbnQpO1xuICAgIHRoaXMuYWRkKGVsZW1lbnQsIGkpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9IC8vIEFkZCBlbGVtZW50IHRvIGdpdmVuIGNvbnRhaW5lciBhbmQgcmV0dXJuIGNvbnRhaW5lclxuXG5cbiAgcHV0SW4ocGFyZW50LCBpKSB7XG4gICAgcmV0dXJuIG1ha2VJbnN0YW5jZShwYXJlbnQpLmFkZCh0aGlzLCBpKTtcbiAgfSAvLyBSZW1vdmUgZWxlbWVudFxuXG5cbiAgcmVtb3ZlKCkge1xuICAgIGlmICh0aGlzLnBhcmVudCgpKSB7XG4gICAgICB0aGlzLnBhcmVudCgpLnJlbW92ZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gUmVtb3ZlIGEgZ2l2ZW4gY2hpbGRcblxuXG4gIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIHRoaXMubm9kZS5yZW1vdmVDaGlsZChlbGVtZW50Lm5vZGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFJlcGxhY2UgdGhpcyB3aXRoIGVsZW1lbnRcblxuXG4gIHJlcGxhY2UoZWxlbWVudCkge1xuICAgIGVsZW1lbnQgPSBtYWtlSW5zdGFuY2UoZWxlbWVudCk7XG5cbiAgICBpZiAodGhpcy5ub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlbGVtZW50Lm5vZGUsIHRoaXMubm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByb3VuZChwcmVjaXNpb24gPSAyLCBtYXAgPSBudWxsKSB7XG4gICAgY29uc3QgZmFjdG9yID0gMTAgKiogcHJlY2lzaW9uO1xuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5hdHRyKG1hcCk7XG5cbiAgICBmb3IgKGNvbnN0IGkgaW4gYXR0cnMpIHtcbiAgICAgIGlmICh0eXBlb2YgYXR0cnNbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGF0dHJzW2ldID0gTWF0aC5yb3VuZChhdHRyc1tpXSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hdHRyKGF0dHJzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBJbXBvcnQgLyBFeHBvcnQgcmF3IHN2Z1xuXG5cbiAgc3ZnKHN2Z09yRm4sIG91dGVyU1ZHKSB7XG4gICAgcmV0dXJuIHRoaXMueG1sKHN2Z09yRm4sIG91dGVyU1ZHLCBzdmcpO1xuICB9IC8vIFJldHVybiBpZCBvbiBzdHJpbmcgY29udmVyc2lvblxuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQoKTtcbiAgfVxuXG4gIHdvcmRzKHRleHQpIHtcbiAgICAvLyBUaGlzIGlzIGZhc3RlciB0aGFuIHJlbW92aW5nIGFsbCBjaGlsZHJlbiBhbmQgYWRkaW5nIGEgbmV3IG9uZVxuICAgIHRoaXMubm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB3cmFwKG5vZGUpIHtcbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudCgpO1xuXG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZFRvKG5vZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2l0aW9uID0gcGFyZW50LmluZGV4KHRoaXMpO1xuICAgIHJldHVybiBwYXJlbnQucHV0KG5vZGUsIHBvc2l0aW9uKS5wdXQodGhpcyk7XG4gIH0gLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG5cblxuICB3cml0ZURhdGFUb0RvbSgpIHtcbiAgICAvLyBkdW1wIHZhcmlhYmxlcyByZWN1cnNpdmVseVxuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLndyaXRlRGF0YVRvRG9tKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gSW1wb3J0IC8gRXhwb3J0IHJhdyBzdmdcblxuXG4gIHhtbCh4bWxPckZuLCBvdXRlclhNTCwgbnMpIHtcbiAgICBpZiAodHlwZW9mIHhtbE9yRm4gPT09ICdib29sZWFuJykge1xuICAgICAgbnMgPSBvdXRlclhNTDtcbiAgICAgIG91dGVyWE1MID0geG1sT3JGbjtcbiAgICAgIHhtbE9yRm4gPSBudWxsO1xuICAgIH0gLy8gYWN0IGFzIGdldHRlciBpZiBubyBzdmcgc3RyaW5nIGlzIGdpdmVuXG5cblxuICAgIGlmICh4bWxPckZuID09IG51bGwgfHwgdHlwZW9mIHhtbE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvciBleHBvcnRzIGlzLCB0aGF0IHRoZSBvdXRlck5vZGUgaXMgaW5jbHVkZWRcbiAgICAgIG91dGVyWE1MID0gb3V0ZXJYTUwgPT0gbnVsbCA/IHRydWUgOiBvdXRlclhNTDsgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG5cbiAgICAgIHRoaXMud3JpdGVEYXRhVG9Eb20oKTtcbiAgICAgIGxldCBjdXJyZW50ID0gdGhpczsgLy8gQW4gZXhwb3J0IG1vZGlmaWVyIHdhcyBwYXNzZWRcblxuICAgICAgaWYgKHhtbE9yRm4gIT0gbnVsbCkge1xuICAgICAgICBjdXJyZW50ID0gYWRvcHQoY3VycmVudC5ub2RlLmNsb25lTm9kZSh0cnVlKSk7IC8vIElmIHRoZSB1c2VyIHdhbnRzIG91dGVySFRNTCB3ZSBuZWVkIHRvIHByb2Nlc3MgdGhpcyBub2RlLCB0b29cblxuICAgICAgICBpZiAob3V0ZXJYTUwpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB4bWxPckZuKGN1cnJlbnQpO1xuICAgICAgICAgIGN1cnJlbnQgPSByZXN1bHQgfHwgY3VycmVudDsgLy8gVGhlIHVzZXIgZG9lcyBub3Qgd2FudCB0aGlzIG5vZGU/IFdlbGwsIHRoZW4gaGUgZ2V0cyBub3RoaW5nXG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgcmV0dXJuICcnO1xuICAgICAgICB9IC8vIERlZXAgbG9vcCB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhbmQgYXBwbHkgbW9kaWZpZXJcblxuXG4gICAgICAgIGN1cnJlbnQuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0geG1sT3JGbih0aGlzKTtcblxuICAgICAgICAgIGNvbnN0IF90aGlzID0gcmVzdWx0IHx8IHRoaXM7IC8vIElmIG1vZGlmaWVyIHJldHVybnMgZmFsc2UsIGRpc2NhcmQgbm9kZVxuXG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTsgLy8gSWYgbW9kaWZpZXIgcmV0dXJucyBuZXcgbm9kZSwgdXNlIGl0XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdGhpcyAhPT0gX3RoaXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZShfdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH0gLy8gUmV0dXJuIG91dGVyIG9yIGlubmVyIGNvbnRlbnRcblxuXG4gICAgICByZXR1cm4gb3V0ZXJYTUwgPyBjdXJyZW50Lm5vZGUub3V0ZXJIVE1MIDogY3VycmVudC5ub2RlLmlubmVySFRNTDtcbiAgICB9IC8vIEFjdCBhcyBzZXR0ZXIgaWYgd2UgZ290IGEgc3RyaW5nXG4gICAgLy8gVGhlIGRlZmF1bHQgZm9yIGltcG9ydCBpcywgdGhhdCB0aGUgY3VycmVudCBub2RlIGlzIG5vdCByZXBsYWNlZFxuXG5cbiAgICBvdXRlclhNTCA9IG91dGVyWE1MID09IG51bGwgPyBmYWxzZSA6IG91dGVyWE1MOyAvLyBDcmVhdGUgdGVtcG9yYXJ5IGhvbGRlclxuXG4gICAgY29uc3Qgd2VsbCA9IGNyZWF0ZSgnd3JhcHBlcicsIG5zKTtcbiAgICBjb25zdCBmcmFnbWVudCA9IGdsb2JhbHMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOyAvLyBEdW1wIHJhdyBzdmdcblxuICAgIHdlbGwuaW5uZXJIVE1MID0geG1sT3JGbjsgLy8gVHJhbnNwbGFudCBub2RlcyBpbnRvIHRoZSBmcmFnbWVudFxuXG4gICAgZm9yIChsZXQgbGVuID0gd2VsbC5jaGlsZHJlbi5sZW5ndGg7IGxlbi0tOykge1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQod2VsbC5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQoKTsgLy8gQWRkIHRoZSB3aG9sZSBmcmFnbWVudCBhdCBvbmNlXG5cbiAgICByZXR1cm4gb3V0ZXJYTUwgPyB0aGlzLnJlcGxhY2UoZnJhZ21lbnQpICYmIHBhcmVudCA6IHRoaXMuYWRkKGZyYWdtZW50KTtcbiAgfVxuXG59XG5leHRlbmQoRG9tLCB7XG4gIGF0dHIsXG4gIGZpbmQsXG4gIGZpbmRPbmVcbn0pO1xucmVnaXN0ZXIoRG9tLCAnRG9tJyk7XG5cbmNsYXNzIEVsZW1lbnQgZXh0ZW5kcyBEb20ge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycykge1xuICAgIHN1cGVyKG5vZGUsIGF0dHJzKTsgLy8gaW5pdGlhbGl6ZSBkYXRhIG9iamVjdFxuXG4gICAgdGhpcy5kb20gPSB7fTsgLy8gY3JlYXRlIGNpcmN1bGFyIHJlZmVyZW5jZVxuXG4gICAgdGhpcy5ub2RlLmluc3RhbmNlID0gdGhpcztcblxuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgnc3ZnanM6ZGF0YScpKSB7XG4gICAgICAvLyBwdWxsIHN2Z2pzIGRhdGEgZnJvbSB0aGUgZG9tIChnZXRBdHRyaWJ1dGVOUyBkb2Vzbid0IHdvcmsgaW4gaHRtbDUpXG4gICAgICB0aGlzLnNldERhdGEoSlNPTi5wYXJzZShub2RlLmdldEF0dHJpYnV0ZSgnc3ZnanM6ZGF0YScpKSB8fCB7fSk7XG4gICAgfVxuICB9IC8vIE1vdmUgZWxlbWVudCBieSBpdHMgY2VudGVyXG5cblxuICBjZW50ZXIoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmN4KHgpLmN5KHkpO1xuICB9IC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeC1heGlzXG5cblxuICBjeCh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCA/IHRoaXMueCgpICsgdGhpcy53aWR0aCgpIC8gMiA6IHRoaXMueCh4IC0gdGhpcy53aWR0aCgpIC8gMik7XG4gIH0gLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB5LWF4aXNcblxuXG4gIGN5KHkpIHtcbiAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy55KCkgKyB0aGlzLmhlaWdodCgpIC8gMiA6IHRoaXMueSh5IC0gdGhpcy5oZWlnaHQoKSAvIDIpO1xuICB9IC8vIEdldCBkZWZzXG5cblxuICBkZWZzKCkge1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLnJvb3QoKTtcbiAgICByZXR1cm4gcm9vdCAmJiByb290LmRlZnMoKTtcbiAgfSAvLyBSZWxhdGl2ZSBtb3ZlIG92ZXIgeCBhbmQgeSBheGVzXG5cblxuICBkbW92ZSh4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMuZHgoeCkuZHkoeSk7XG4gIH0gLy8gUmVsYXRpdmUgbW92ZSBvdmVyIHggYXhpc1xuXG5cbiAgZHgoeCA9IDApIHtcbiAgICByZXR1cm4gdGhpcy54KG5ldyBTVkdOdW1iZXIoeCkucGx1cyh0aGlzLngoKSkpO1xuICB9IC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB5IGF4aXNcblxuXG4gIGR5KHkgPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMueShuZXcgU1ZHTnVtYmVyKHkpLnBsdXModGhpcy55KCkpKTtcbiAgfVxuXG4gIGdldEV2ZW50SG9sZGVyKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFNldCBoZWlnaHQgb2YgZWxlbWVudFxuXG5cbiAgaGVpZ2h0KGhlaWdodCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG4gIH0gLy8gTW92ZSBlbGVtZW50IHRvIGdpdmVuIHggYW5kIHkgdmFsdWVzXG5cblxuICBtb3ZlKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy54KHgpLnkoeSk7XG4gIH0gLy8gcmV0dXJuIGFycmF5IG9mIGFsbCBhbmNlc3RvcnMgb2YgZ2l2ZW4gdHlwZSB1cCB0byB0aGUgcm9vdCBzdmdcblxuXG4gIHBhcmVudHModW50aWwgPSB0aGlzLnJvb3QoKSkge1xuICAgIGNvbnN0IGlzU2VsZWN0b3IgPSB0eXBlb2YgdW50aWwgPT09ICdzdHJpbmcnO1xuXG4gICAgaWYgKCFpc1NlbGVjdG9yKSB7XG4gICAgICB1bnRpbCA9IG1ha2VJbnN0YW5jZSh1bnRpbCk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50cyA9IG5ldyBMaXN0KCk7XG4gICAgbGV0IHBhcmVudCA9IHRoaXM7XG5cbiAgICB3aGlsZSAoKHBhcmVudCA9IHBhcmVudC5wYXJlbnQoKSkgJiYgcGFyZW50Lm5vZGUgIT09IGdsb2JhbHMuZG9jdW1lbnQgJiYgcGFyZW50Lm5vZGVOYW1lICE9PSAnI2RvY3VtZW50LWZyYWdtZW50Jykge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG5cbiAgICAgIGlmICghaXNTZWxlY3RvciAmJiBwYXJlbnQubm9kZSA9PT0gdW50aWwubm9kZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU2VsZWN0b3IgJiYgcGFyZW50Lm1hdGNoZXModW50aWwpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50Lm5vZGUgPT09IHRoaXMucm9vdCgpLm5vZGUpIHtcbiAgICAgICAgLy8gV2Ugd29ya2VkIG91ciB3YXkgdG8gdGhlIHJvb3QgYW5kIGRpZG4ndCBtYXRjaCBgdW50aWxgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRzO1xuICB9IC8vIEdldCByZWZlcmVuY2VkIGVsZW1lbnQgZm9ybSBhdHRyaWJ1dGUgdmFsdWVcblxuXG4gIHJlZmVyZW5jZShhdHRyKSB7XG4gICAgYXR0ciA9IHRoaXMuYXR0cihhdHRyKTtcbiAgICBpZiAoIWF0dHIpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG0gPSAoYXR0ciArICcnKS5tYXRjaChyZWZlcmVuY2UpO1xuICAgIHJldHVybiBtID8gbWFrZUluc3RhbmNlKG1bMV0pIDogbnVsbDtcbiAgfSAvLyBHZXQgcGFyZW50IGRvY3VtZW50XG5cblxuICByb290KCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLnBhcmVudChnZXRDbGFzcyhyb290KSk7XG4gICAgcmV0dXJuIHAgJiYgcC5yb290KCk7XG4gIH0gLy8gc2V0IGdpdmVuIGRhdGEgdG8gdGhlIGVsZW1lbnRzIGRhdGEgcHJvcGVydHlcblxuXG4gIHNldERhdGEobykge1xuICAgIHRoaXMuZG9tID0gbztcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBTZXQgZWxlbWVudCBzaXplIHRvIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcblxuXG4gIHNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xuICAgIHJldHVybiB0aGlzLndpZHRoKG5ldyBTVkdOdW1iZXIocC53aWR0aCkpLmhlaWdodChuZXcgU1ZHTnVtYmVyKHAuaGVpZ2h0KSk7XG4gIH0gLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcblxuXG4gIHdpZHRoKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignd2lkdGgnLCB3aWR0aCk7XG4gIH0gLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG5cblxuICB3cml0ZURhdGFUb0RvbSgpIHtcbiAgICAvLyByZW1vdmUgcHJldmlvdXNseSBzZXQgZGF0YVxuICAgIHRoaXMubm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N2Z2pzOmRhdGEnKTtcblxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmRvbSkubGVuZ3RoKSB7XG4gICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlKCdzdmdqczpkYXRhJywgSlNPTi5zdHJpbmdpZnkodGhpcy5kb20pKTsgLy8gc2VlICM0MjhcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIud3JpdGVEYXRhVG9Eb20oKTtcbiAgfSAvLyBNb3ZlIG92ZXIgeC1heGlzXG5cblxuICB4KHgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCd4JywgeCk7XG4gIH0gLy8gTW92ZSBvdmVyIHktYXhpc1xuXG5cbiAgeSh5KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cigneScsIHkpO1xuICB9XG5cbn1cbmV4dGVuZChFbGVtZW50LCB7XG4gIGJib3gsXG4gIHJib3gsXG4gIGluc2lkZSxcbiAgcG9pbnQsXG4gIGN0bSxcbiAgc2NyZWVuQ1RNXG59KTtcbnJlZ2lzdGVyKEVsZW1lbnQsICdFbGVtZW50Jyk7XG5cbmNvbnN0IHN1Z2FyID0ge1xuICBzdHJva2U6IFsnY29sb3InLCAnd2lkdGgnLCAnb3BhY2l0eScsICdsaW5lY2FwJywgJ2xpbmVqb2luJywgJ21pdGVybGltaXQnLCAnZGFzaGFycmF5JywgJ2Rhc2hvZmZzZXQnXSxcbiAgZmlsbDogWydjb2xvcicsICdvcGFjaXR5JywgJ3J1bGUnXSxcbiAgcHJlZml4OiBmdW5jdGlvbiAodCwgYSkge1xuICAgIHJldHVybiBhID09PSAnY29sb3InID8gdCA6IHQgKyAnLScgKyBhO1xuICB9XG59IC8vIEFkZCBzdWdhciBmb3IgZmlsbCBhbmQgc3Ryb2tlXG47XG5bJ2ZpbGwnLCAnc3Ryb2tlJ10uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICBjb25zdCBleHRlbnNpb24gPSB7fTtcbiAgbGV0IGk7XG5cbiAgZXh0ZW5zaW9uW21dID0gZnVuY3Rpb24gKG8pIHtcbiAgICBpZiAodHlwZW9mIG8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKG0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbyA9PT0gJ3N0cmluZycgfHwgbyBpbnN0YW5jZW9mIENvbG9yIHx8IENvbG9yLmlzUmdiKG8pIHx8IG8gaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICB0aGlzLmF0dHIobSwgbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNldCBhbGwgYXR0cmlidXRlcyBmcm9tIHN1Z2FyLmZpbGwgYW5kIHN1Z2FyLnN0cm9rZSBsaXN0XG4gICAgICBmb3IgKGkgPSBzdWdhclttXS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAob1tzdWdhclttXVtpXV0gIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuYXR0cihzdWdhci5wcmVmaXgobSwgc3VnYXJbbV1baV0pLCBvW3N1Z2FyW21dW2ldXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZWdpc3Rlck1ldGhvZHMoWydFbGVtZW50JywgJ1J1bm5lciddLCBleHRlbnNpb24pO1xufSk7XG5yZWdpc3Rlck1ldGhvZHMoWydFbGVtZW50JywgJ1J1bm5lciddLCB7XG4gIC8vIExldCB0aGUgdXNlciBzZXQgdGhlIG1hdHJpeCBkaXJlY3RseVxuICBtYXRyaXg6IGZ1bmN0aW9uIChtYXQsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAvLyBBY3QgYXMgYSBnZXR0ZXJcbiAgICBpZiAobWF0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgTWF0cml4KHRoaXMpO1xuICAgIH0gLy8gQWN0IGFzIGEgc2V0dGVyLCB0aGUgdXNlciBjYW4gcGFzcyBhIG1hdHJpeCBvciBhIHNldCBvZiBudW1iZXJzXG5cblxuICAgIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG5ldyBNYXRyaXgobWF0LCBiLCBjLCBkLCBlLCBmKSk7XG4gIH0sXG4gIC8vIE1hcCByb3RhdGlvbiB0byB0cmFuc2Zvcm1cbiAgcm90YXRlOiBmdW5jdGlvbiAoYW5nbGUsIGN4LCBjeSkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh7XG4gICAgICByb3RhdGU6IGFuZ2xlLFxuICAgICAgb3g6IGN4LFxuICAgICAgb3k6IGN5XG4gICAgfSwgdHJ1ZSk7XG4gIH0sXG4gIC8vIE1hcCBza2V3IHRvIHRyYW5zZm9ybVxuICBza2V3OiBmdW5jdGlvbiAoeCwgeSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMyA/IHRoaXMudHJhbnNmb3JtKHtcbiAgICAgIHNrZXc6IHgsXG4gICAgICBveDogeSxcbiAgICAgIG95OiBjeFxuICAgIH0sIHRydWUpIDogdGhpcy50cmFuc2Zvcm0oe1xuICAgICAgc2tldzogW3gsIHldLFxuICAgICAgb3g6IGN4LFxuICAgICAgb3k6IGN5XG4gICAgfSwgdHJ1ZSk7XG4gIH0sXG4gIHNoZWFyOiBmdW5jdGlvbiAobGFtLCBjeCwgY3kpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oe1xuICAgICAgc2hlYXI6IGxhbSxcbiAgICAgIG94OiBjeCxcbiAgICAgIG95OiBjeVxuICAgIH0sIHRydWUpO1xuICB9LFxuICAvLyBNYXAgc2NhbGUgdG8gdHJhbnNmb3JtXG4gIHNjYWxlOiBmdW5jdGlvbiAoeCwgeSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMyA/IHRoaXMudHJhbnNmb3JtKHtcbiAgICAgIHNjYWxlOiB4LFxuICAgICAgb3g6IHksXG4gICAgICBveTogY3hcbiAgICB9LCB0cnVlKSA6IHRoaXMudHJhbnNmb3JtKHtcbiAgICAgIHNjYWxlOiBbeCwgeV0sXG4gICAgICBveDogY3gsXG4gICAgICBveTogY3lcbiAgICB9LCB0cnVlKTtcbiAgfSxcbiAgLy8gTWFwIHRyYW5zbGF0ZSB0byB0cmFuc2Zvcm1cbiAgdHJhbnNsYXRlOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh7XG4gICAgICB0cmFuc2xhdGU6IFt4LCB5XVxuICAgIH0sIHRydWUpO1xuICB9LFxuICAvLyBNYXAgcmVsYXRpdmUgdHJhbnNsYXRpb25zIHRvIHRyYW5zZm9ybVxuICByZWxhdGl2ZTogZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oe1xuICAgICAgcmVsYXRpdmU6IFt4LCB5XVxuICAgIH0sIHRydWUpO1xuICB9LFxuICAvLyBNYXAgZmxpcCB0byB0cmFuc2Zvcm1cbiAgZmxpcDogZnVuY3Rpb24gKGRpcmVjdGlvbiA9ICdib3RoJywgb3JpZ2luID0gJ2NlbnRlcicpIHtcbiAgICBpZiAoJ3h5Ym90aHRydWUnLmluZGV4T2YoZGlyZWN0aW9uKSA9PT0gLTEpIHtcbiAgICAgIG9yaWdpbiA9IGRpcmVjdGlvbjtcbiAgICAgIGRpcmVjdGlvbiA9ICdib3RoJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oe1xuICAgICAgZmxpcDogZGlyZWN0aW9uLFxuICAgICAgb3JpZ2luOiBvcmlnaW5cbiAgICB9LCB0cnVlKTtcbiAgfSxcbiAgLy8gT3BhY2l0eVxuICBvcGFjaXR5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdvcGFjaXR5JywgdmFsdWUpO1xuICB9XG59KTtcbnJlZ2lzdGVyTWV0aG9kcygncmFkaXVzJywge1xuICAvLyBBZGQgeCBhbmQgeSByYWRpdXNcbiAgcmFkaXVzOiBmdW5jdGlvbiAoeCwgeSA9IHgpIHtcbiAgICBjb25zdCB0eXBlID0gKHRoaXMuX2VsZW1lbnQgfHwgdGhpcykudHlwZTtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ3JhZGlhbEdyYWRpZW50JyA/IHRoaXMuYXR0cigncicsIG5ldyBTVkdOdW1iZXIoeCkpIDogdGhpcy5yeCh4KS5yeSh5KTtcbiAgfVxufSk7XG5yZWdpc3Rlck1ldGhvZHMoJ1BhdGgnLCB7XG4gIC8vIEdldCBwYXRoIGxlbmd0aFxuICBsZW5ndGg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlLmdldFRvdGFsTGVuZ3RoKCk7XG4gIH0sXG4gIC8vIEdldCBwb2ludCBhdCBsZW5ndGhcbiAgcG9pbnRBdDogZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy5ub2RlLmdldFBvaW50QXRMZW5ndGgobGVuZ3RoKSk7XG4gIH1cbn0pO1xucmVnaXN0ZXJNZXRob2RzKFsnRWxlbWVudCcsICdSdW5uZXInXSwge1xuICAvLyBTZXQgZm9udFxuICBmb250OiBmdW5jdGlvbiAoYSwgdikge1xuICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodiBpbiBhKSB0aGlzLmZvbnQodiwgYVt2XSk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBhID09PSAnbGVhZGluZycgPyB0aGlzLmxlYWRpbmcodikgOiBhID09PSAnYW5jaG9yJyA/IHRoaXMuYXR0cigndGV4dC1hbmNob3InLCB2KSA6IGEgPT09ICdzaXplJyB8fCBhID09PSAnZmFtaWx5JyB8fCBhID09PSAnd2VpZ2h0JyB8fCBhID09PSAnc3RyZXRjaCcgfHwgYSA9PT0gJ3ZhcmlhbnQnIHx8IGEgPT09ICdzdHlsZScgPyB0aGlzLmF0dHIoJ2ZvbnQtJyArIGEsIHYpIDogdGhpcy5hdHRyKGEsIHYpO1xuICB9XG59KTsgLy8gQWRkIGV2ZW50cyB0byBlbGVtZW50c1xuXG5jb25zdCBtZXRob2RzID0gWydjbGljaycsICdkYmxjbGljaycsICdtb3VzZWRvd24nLCAnbW91c2V1cCcsICdtb3VzZW92ZXInLCAnbW91c2VvdXQnLCAnbW91c2Vtb3ZlJywgJ21vdXNlZW50ZXInLCAnbW91c2VsZWF2ZScsICd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGxlYXZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ10ucmVkdWNlKGZ1bmN0aW9uIChsYXN0LCBldmVudCkge1xuICAvLyBhZGQgZXZlbnQgdG8gRWxlbWVudFxuICBjb25zdCBmbiA9IGZ1bmN0aW9uIChmKSB7XG4gICAgaWYgKGYgPT09IG51bGwpIHtcbiAgICAgIHRoaXMub2ZmKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbihldmVudCwgZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgbGFzdFtldmVudF0gPSBmbjtcbiAgcmV0dXJuIGxhc3Q7XG59LCB7fSk7XG5yZWdpc3Rlck1ldGhvZHMoJ0VsZW1lbnQnLCBtZXRob2RzKTtcblxuZnVuY3Rpb24gdW50cmFuc2Zvcm0oKSB7XG4gIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpO1xufSAvLyBtZXJnZSB0aGUgd2hvbGUgdHJhbnNmb3JtYXRpb24gY2hhaW4gaW50byBvbmUgbWF0cml4IGFuZCByZXR1cm5zIGl0XG5cbmZ1bmN0aW9uIG1hdHJpeGlmeSgpIHtcbiAgY29uc3QgbWF0cml4ID0gKHRoaXMuYXR0cigndHJhbnNmb3JtJykgfHwgJycgLy8gc3BsaXQgdHJhbnNmb3JtYXRpb25zXG4gICkuc3BsaXQodHJhbnNmb3Jtcykuc2xpY2UoMCwgLTEpLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgLy8gZ2VuZXJhdGUga2V5ID0+IHZhbHVlIHBhaXJzXG4gICAgY29uc3Qga3YgPSBzdHIudHJpbSgpLnNwbGl0KCcoJyk7XG4gICAgcmV0dXJuIFtrdlswXSwga3ZbMV0uc3BsaXQoZGVsaW1pdGVyKS5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgICB9KV07XG4gIH0pLnJldmVyc2UoKSAvLyBtZXJnZSBldmVyeSB0cmFuc2Zvcm1hdGlvbiBpbnRvIG9uZSBtYXRyaXhcbiAgLnJlZHVjZShmdW5jdGlvbiAobWF0cml4LCB0cmFuc2Zvcm0pIHtcbiAgICBpZiAodHJhbnNmb3JtWzBdID09PSAnbWF0cml4Jykge1xuICAgICAgcmV0dXJuIG1hdHJpeC5sbXVsdGlwbHkoTWF0cml4LmZyb21BcnJheSh0cmFuc2Zvcm1bMV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0cml4W3RyYW5zZm9ybVswXV0uYXBwbHkobWF0cml4LCB0cmFuc2Zvcm1bMV0pO1xuICB9LCBuZXcgTWF0cml4KCkpO1xuICByZXR1cm4gbWF0cml4O1xufSAvLyBhZGQgYW4gZWxlbWVudCB0byBhbm90aGVyIHBhcmVudCB3aXRob3V0IGNoYW5naW5nIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb24gdGhlIHNjcmVlblxuXG5mdW5jdGlvbiB0b1BhcmVudChwYXJlbnQsIGkpIHtcbiAgaWYgKHRoaXMgPT09IHBhcmVudCkgcmV0dXJuIHRoaXM7XG4gIGNvbnN0IGN0bSA9IHRoaXMuc2NyZWVuQ1RNKCk7XG4gIGNvbnN0IHBDdG0gPSBwYXJlbnQuc2NyZWVuQ1RNKCkuaW52ZXJzZSgpO1xuICB0aGlzLmFkZFRvKHBhcmVudCwgaSkudW50cmFuc2Zvcm0oKS50cmFuc2Zvcm0ocEN0bS5tdWx0aXBseShjdG0pKTtcbiAgcmV0dXJuIHRoaXM7XG59IC8vIHNhbWUgYXMgYWJvdmUgd2l0aCBwYXJlbnQgZXF1YWxzIHJvb3Qtc3ZnXG5cbmZ1bmN0aW9uIHRvUm9vdChpKSB7XG4gIHJldHVybiB0aGlzLnRvUGFyZW50KHRoaXMucm9vdCgpLCBpKTtcbn0gLy8gQWRkIHRyYW5zZm9ybWF0aW9uc1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0obywgcmVsYXRpdmUpIHtcbiAgLy8gQWN0IGFzIGEgZ2V0dGVyIGlmIG5vIG9iamVjdCB3YXMgcGFzc2VkXG4gIGlmIChvID09IG51bGwgfHwgdHlwZW9mIG8gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgZGVjb21wb3NlZCA9IG5ldyBNYXRyaXgodGhpcykuZGVjb21wb3NlKCk7XG4gICAgcmV0dXJuIG8gPT0gbnVsbCA/IGRlY29tcG9zZWQgOiBkZWNvbXBvc2VkW29dO1xuICB9XG5cbiAgaWYgKCFNYXRyaXguaXNNYXRyaXhMaWtlKG8pKSB7XG4gICAgLy8gU2V0IHRoZSBvcmlnaW4gYWNjb3JkaW5nIHRvIHRoZSBkZWZpbmVkIHRyYW5zZm9ybVxuICAgIG8gPSB7IC4uLm8sXG4gICAgICBvcmlnaW46IGdldE9yaWdpbihvLCB0aGlzKVxuICAgIH07XG4gIH0gLy8gVGhlIHVzZXIgY2FuIHBhc3MgYSBib29sZWFuLCBhbiBFbGVtZW50IG9yIGFuIE1hdHJpeCBvciBub3RoaW5nXG5cblxuICBjb25zdCBjbGVhblJlbGF0aXZlID0gcmVsYXRpdmUgPT09IHRydWUgPyB0aGlzIDogcmVsYXRpdmUgfHwgZmFsc2U7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoY2xlYW5SZWxhdGl2ZSkudHJhbnNmb3JtKG8pO1xuICByZXR1cm4gdGhpcy5hdHRyKCd0cmFuc2Zvcm0nLCByZXN1bHQpO1xufVxucmVnaXN0ZXJNZXRob2RzKCdFbGVtZW50Jywge1xuICB1bnRyYW5zZm9ybSxcbiAgbWF0cml4aWZ5LFxuICB0b1BhcmVudCxcbiAgdG9Sb290LFxuICB0cmFuc2Zvcm1cbn0pO1xuXG5jbGFzcyBDb250YWluZXIgZXh0ZW5kcyBFbGVtZW50IHtcbiAgZmxhdHRlbihwYXJlbnQgPSB0aGlzLCBpbmRleCkge1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCkudW5ncm91cCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdW5ncm91cChwYXJlbnQgPSB0aGlzLnBhcmVudCgpLCBpbmRleCA9IHBhcmVudC5pbmRleCh0aGlzKSkge1xuICAgIC8vIHdoZW4gcGFyZW50ICE9IHRoaXMsIHdlIHdhbnQgYXBwZW5kIGFsbCBlbGVtZW50cyB0byB0aGUgZW5kXG4gICAgaW5kZXggPSBpbmRleCA9PT0gLTEgPyBwYXJlbnQuY2hpbGRyZW4oKS5sZW5ndGggOiBpbmRleDtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGNoaWxkcmVuKSB7XG4gICAgICAvLyByZXZlcnNlIGVhY2hcbiAgICAgIHJldHVybiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSBpIC0gMV0udG9QYXJlbnQocGFyZW50LCBpbmRleCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gIH1cblxufVxucmVnaXN0ZXIoQ29udGFpbmVyLCAnQ29udGFpbmVyJyk7XG5cbmNsYXNzIERlZnMgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ2RlZnMnLCBub2RlKSwgYXR0cnMpO1xuICB9XG5cbiAgZmxhdHRlbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVuZ3JvdXAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxucmVnaXN0ZXIoRGVmcywgJ0RlZnMnKTtcblxuY2xhc3MgU2hhcGUgZXh0ZW5kcyBFbGVtZW50IHt9XG5yZWdpc3RlcihTaGFwZSwgJ1NoYXBlJyk7XG5cbmZ1bmN0aW9uIHJ4KHJ4KSB7XG4gIHJldHVybiB0aGlzLmF0dHIoJ3J4JywgcngpO1xufSAvLyBSYWRpdXMgeSB2YWx1ZVxuXG5mdW5jdGlvbiByeShyeSkge1xuICByZXR1cm4gdGhpcy5hdHRyKCdyeScsIHJ5KTtcbn0gLy8gTW92ZSBvdmVyIHgtYXhpc1xuXG5mdW5jdGlvbiB4JDMoeCkge1xuICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5jeCgpIC0gdGhpcy5yeCgpIDogdGhpcy5jeCh4ICsgdGhpcy5yeCgpKTtcbn0gLy8gTW92ZSBvdmVyIHktYXhpc1xuXG5mdW5jdGlvbiB5JDMoeSkge1xuICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5jeSgpIC0gdGhpcy5yeSgpIDogdGhpcy5jeSh5ICsgdGhpcy5yeSgpKTtcbn0gLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB4LWF4aXNcblxuZnVuY3Rpb24gY3gkMSh4KSB7XG4gIHJldHVybiB0aGlzLmF0dHIoJ2N4JywgeCk7XG59IC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXG5cbmZ1bmN0aW9uIGN5JDEoeSkge1xuICByZXR1cm4gdGhpcy5hdHRyKCdjeScsIHkpO1xufSAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxuXG5mdW5jdGlvbiB3aWR0aCQyKHdpZHRoKSB7XG4gIHJldHVybiB3aWR0aCA9PSBudWxsID8gdGhpcy5yeCgpICogMiA6IHRoaXMucngobmV3IFNWR051bWJlcih3aWR0aCkuZGl2aWRlKDIpKTtcbn0gLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XG5cbmZ1bmN0aW9uIGhlaWdodCQyKGhlaWdodCkge1xuICByZXR1cm4gaGVpZ2h0ID09IG51bGwgPyB0aGlzLnJ5KCkgKiAyIDogdGhpcy5yeShuZXcgU1ZHTnVtYmVyKGhlaWdodCkuZGl2aWRlKDIpKTtcbn1cblxudmFyIGNpcmNsZWQgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgcng6IHJ4LFxuICByeTogcnksXG4gIHg6IHgkMyxcbiAgeTogeSQzLFxuICBjeDogY3gkMSxcbiAgY3k6IGN5JDEsXG4gIHdpZHRoOiB3aWR0aCQyLFxuICBoZWlnaHQ6IGhlaWdodCQyXG59O1xuXG5jbGFzcyBFbGxpcHNlIGV4dGVuZHMgU2hhcGUge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ2VsbGlwc2UnLCBub2RlKSwgYXR0cnMpO1xuICB9XG5cbiAgc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuIHRoaXMucngobmV3IFNWR051bWJlcihwLndpZHRoKS5kaXZpZGUoMikpLnJ5KG5ldyBTVkdOdW1iZXIocC5oZWlnaHQpLmRpdmlkZSgyKSk7XG4gIH1cblxufVxuZXh0ZW5kKEVsbGlwc2UsIGNpcmNsZWQpO1xucmVnaXN0ZXJNZXRob2RzKCdDb250YWluZXInLCB7XG4gIC8vIENyZWF0ZSBhbiBlbGxpcHNlXG4gIGVsbGlwc2U6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICh3aWR0aCA9IDAsIGhlaWdodCA9IHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBFbGxpcHNlKCkpLnNpemUod2lkdGgsIGhlaWdodCkubW92ZSgwLCAwKTtcbiAgfSlcbn0pO1xucmVnaXN0ZXIoRWxsaXBzZSwgJ0VsbGlwc2UnKTtcblxuY2xhc3MgRnJhZ21lbnQgZXh0ZW5kcyBEb20ge1xuICBjb25zdHJ1Y3Rvcihub2RlID0gZ2xvYmFscy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpIHtcbiAgICBzdXBlcihub2RlKTtcbiAgfSAvLyBJbXBvcnQgLyBFeHBvcnQgcmF3IHhtbFxuXG5cbiAgeG1sKHhtbE9yRm4sIG91dGVyWE1MLCBucykge1xuICAgIGlmICh0eXBlb2YgeG1sT3JGbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBucyA9IG91dGVyWE1MO1xuICAgICAgb3V0ZXJYTUwgPSB4bWxPckZuO1xuICAgICAgeG1sT3JGbiA9IG51bGw7XG4gICAgfSAvLyBiZWNhdXNlIHRoaXMgaXMgYSBmcmFnbWVudCB3ZSBoYXZlIHRvIHB1dCBhbGwgZWxlbWVudHMgaW50byBhIHdyYXBwZXIgZmlyc3RcbiAgICAvLyBiZWZvcmUgd2UgY2FuIGdldCB0aGUgaW5uZXJYTUwgZnJvbSBpdFxuXG5cbiAgICBpZiAoeG1sT3JGbiA9PSBudWxsIHx8IHR5cGVvZiB4bWxPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gbmV3IERvbShjcmVhdGUoJ3dyYXBwZXInLCBucykpO1xuICAgICAgd3JhcHBlci5hZGQodGhpcy5ub2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICByZXR1cm4gd3JhcHBlci54bWwoZmFsc2UsIG5zKTtcbiAgICB9IC8vIEFjdCBhcyBzZXR0ZXIgaWYgd2UgZ290IGEgc3RyaW5nXG5cblxuICAgIHJldHVybiBzdXBlci54bWwoeG1sT3JGbiwgZmFsc2UsIG5zKTtcbiAgfVxuXG59XG5cbnJlZ2lzdGVyKEZyYWdtZW50LCAnRnJhZ21lbnQnKTtcblxuZnVuY3Rpb24gZnJvbSh4LCB5KSB7XG4gIHJldHVybiAodGhpcy5fZWxlbWVudCB8fCB0aGlzKS50eXBlID09PSAncmFkaWFsR3JhZGllbnQnID8gdGhpcy5hdHRyKHtcbiAgICBmeDogbmV3IFNWR051bWJlcih4KSxcbiAgICBmeTogbmV3IFNWR051bWJlcih5KVxuICB9KSA6IHRoaXMuYXR0cih7XG4gICAgeDE6IG5ldyBTVkdOdW1iZXIoeCksXG4gICAgeTE6IG5ldyBTVkdOdW1iZXIoeSlcbiAgfSk7XG59XG5mdW5jdGlvbiB0byh4LCB5KSB7XG4gIHJldHVybiAodGhpcy5fZWxlbWVudCB8fCB0aGlzKS50eXBlID09PSAncmFkaWFsR3JhZGllbnQnID8gdGhpcy5hdHRyKHtcbiAgICBjeDogbmV3IFNWR051bWJlcih4KSxcbiAgICBjeTogbmV3IFNWR051bWJlcih5KVxuICB9KSA6IHRoaXMuYXR0cih7XG4gICAgeDI6IG5ldyBTVkdOdW1iZXIoeCksXG4gICAgeTI6IG5ldyBTVkdOdW1iZXIoeSlcbiAgfSk7XG59XG5cbnZhciBncmFkaWVudGVkID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIGZyb206IGZyb20sXG4gIHRvOiB0b1xufTtcblxuY2xhc3MgR3JhZGllbnQgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBhdHRycykge1xuICAgIHN1cGVyKG5vZGVPck5ldyh0eXBlICsgJ0dyYWRpZW50JywgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gbnVsbCA6IHR5cGUpLCBhdHRycyk7XG4gIH0gLy8gY3VzdG9tIGF0dHIgdG8gaGFuZGxlIHRyYW5zZm9ybVxuXG5cbiAgYXR0cihhLCBiLCBjKSB7XG4gICAgaWYgKGEgPT09ICd0cmFuc2Zvcm0nKSBhID0gJ2dyYWRpZW50VHJhbnNmb3JtJztcbiAgICByZXR1cm4gc3VwZXIuYXR0cihhLCBiLCBjKTtcbiAgfVxuXG4gIGJib3goKSB7XG4gICAgcmV0dXJuIG5ldyBCb3goKTtcbiAgfVxuXG4gIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIGJhc2VGaW5kKCdzdmcgW2ZpbGwqPVwiJyArIHRoaXMuaWQoKSArICdcIl0nKTtcbiAgfSAvLyBBbGlhcyBzdHJpbmcgY29udmVyc2lvbiB0byBmaWxsXG5cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy51cmwoKTtcbiAgfSAvLyBVcGRhdGUgZ3JhZGllbnRcblxuXG4gIHVwZGF0ZShibG9jaykge1xuICAgIC8vIHJlbW92ZSBhbGwgc3RvcHNcbiAgICB0aGlzLmNsZWFyKCk7IC8vIGludm9rZSBwYXNzZWQgYmxvY2tcblxuICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gUmV0dXJuIHRoZSBmaWxsIGlkXG5cblxuICB1cmwoKSB7XG4gICAgcmV0dXJuICd1cmwoXCIjJyArIHRoaXMuaWQoKSArICdcIiknO1xuICB9XG5cbn1cbmV4dGVuZChHcmFkaWVudCwgZ3JhZGllbnRlZCk7XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgZ3JhZGllbnQgZWxlbWVudCBpbiBkZWZzXG4gICAgZ3JhZGllbnQoLi4uYXJncykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLmdyYWRpZW50KC4uLmFyZ3MpO1xuICAgIH1cblxuICB9LFxuICAvLyBkZWZpbmUgZ3JhZGllbnRcbiAgRGVmczoge1xuICAgIGdyYWRpZW50OiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAodHlwZSwgYmxvY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgR3JhZGllbnQodHlwZSkpLnVwZGF0ZShibG9jayk7XG4gICAgfSlcbiAgfVxufSk7XG5yZWdpc3RlcihHcmFkaWVudCwgJ0dyYWRpZW50Jyk7XG5cbmNsYXNzIFBhdHRlcm4gZXh0ZW5kcyBDb250YWluZXIge1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdwYXR0ZXJuJywgbm9kZSksIGF0dHJzKTtcbiAgfSAvLyBjdXN0b20gYXR0ciB0byBoYW5kbGUgdHJhbnNmb3JtXG5cblxuICBhdHRyKGEsIGIsIGMpIHtcbiAgICBpZiAoYSA9PT0gJ3RyYW5zZm9ybScpIGEgPSAncGF0dGVyblRyYW5zZm9ybSc7XG4gICAgcmV0dXJuIHN1cGVyLmF0dHIoYSwgYiwgYyk7XG4gIH1cblxuICBiYm94KCkge1xuICAgIHJldHVybiBuZXcgQm94KCk7XG4gIH1cblxuICB0YXJnZXRzKCkge1xuICAgIHJldHVybiBiYXNlRmluZCgnc3ZnIFtmaWxsKj1cIicgKyB0aGlzLmlkKCkgKyAnXCJdJyk7XG4gIH0gLy8gQWxpYXMgc3RyaW5nIGNvbnZlcnNpb24gdG8gZmlsbFxuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudXJsKCk7XG4gIH0gLy8gVXBkYXRlIHBhdHRlcm4gYnkgcmVidWlsZGluZ1xuXG5cbiAgdXBkYXRlKGJsb2NrKSB7XG4gICAgLy8gcmVtb3ZlIGNvbnRlbnRcbiAgICB0aGlzLmNsZWFyKCk7IC8vIGludm9rZSBwYXNzZWQgYmxvY2tcblxuICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gUmV0dXJuIHRoZSBmaWxsIGlkXG5cblxuICB1cmwoKSB7XG4gICAgcmV0dXJuICd1cmwoXCIjJyArIHRoaXMuaWQoKSArICdcIiknO1xuICB9XG5cbn1cbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIENvbnRhaW5lcjoge1xuICAgIC8vIENyZWF0ZSBwYXR0ZXJuIGVsZW1lbnQgaW4gZGVmc1xuICAgIHBhdHRlcm4oLi4uYXJncykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLnBhdHRlcm4oLi4uYXJncyk7XG4gICAgfVxuXG4gIH0sXG4gIERlZnM6IHtcbiAgICBwYXR0ZXJuOiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgYmxvY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgUGF0dGVybigpKS51cGRhdGUoYmxvY2spLmF0dHIoe1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBwYXR0ZXJuVW5pdHM6ICd1c2VyU3BhY2VPblVzZSdcbiAgICAgIH0pO1xuICAgIH0pXG4gIH1cbn0pO1xucmVnaXN0ZXIoUGF0dGVybiwgJ1BhdHRlcm4nKTtcblxuY2xhc3MgSW1hZ2UgZXh0ZW5kcyBTaGFwZSB7XG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygnaW1hZ2UnLCBub2RlKSwgYXR0cnMpO1xuICB9IC8vIChyZSlsb2FkIGltYWdlXG5cblxuICBsb2FkKHVybCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXVybCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgaW1nID0gbmV3IGdsb2JhbHMud2luZG93LkltYWdlKCk7XG4gICAgb24oaW1nLCAnbG9hZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBwID0gdGhpcy5wYXJlbnQoUGF0dGVybik7IC8vIGVuc3VyZSBpbWFnZSBzaXplXG5cbiAgICAgIGlmICh0aGlzLndpZHRoKCkgPT09IDAgJiYgdGhpcy5oZWlnaHQoKSA9PT0gMCkge1xuICAgICAgICB0aGlzLnNpemUoaW1nLndpZHRoLCBpbWcuaGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHAgaW5zdGFuY2VvZiBQYXR0ZXJuKSB7XG4gICAgICAgIC8vIGVuc3VyZSBwYXR0ZXJuIHNpemUgaWYgbm90IHNldFxuICAgICAgICBpZiAocC53aWR0aCgpID09PSAwICYmIHAuaGVpZ2h0KCkgPT09IDApIHtcbiAgICAgICAgICBwLnNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgb24oaW1nLCAnbG9hZCBlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGRvbnQgZm9yZ2V0IHRvIHVuYmluZCBtZW1vcnkgbGVha2luZyBldmVudHNcbiAgICAgIG9mZihpbWcpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCBpbWcuc3JjID0gdXJsLCB4bGluayk7XG4gIH1cblxufVxucmVnaXN0ZXJBdHRySG9vayhmdW5jdGlvbiAoYXR0ciwgdmFsLCBfdGhpcykge1xuICAvLyBjb252ZXJ0IGltYWdlIGZpbGwgYW5kIHN0cm9rZSB0byBwYXR0ZXJuc1xuICBpZiAoYXR0ciA9PT0gJ2ZpbGwnIHx8IGF0dHIgPT09ICdzdHJva2UnKSB7XG4gICAgaWYgKGlzSW1hZ2UudGVzdCh2YWwpKSB7XG4gICAgICB2YWwgPSBfdGhpcy5yb290KCkuZGVmcygpLmltYWdlKHZhbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEltYWdlKSB7XG4gICAgdmFsID0gX3RoaXMucm9vdCgpLmRlZnMoKS5wYXR0ZXJuKDAsIDAsIHBhdHRlcm4gPT4ge1xuICAgICAgcGF0dGVybi5hZGQodmFsKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59KTtcbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIENvbnRhaW5lcjoge1xuICAgIC8vIGNyZWF0ZSBpbWFnZSBlbGVtZW50LCBsb2FkIGltYWdlIGFuZCBzZXQgaXRzIHNpemVcbiAgICBpbWFnZTogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHNvdXJjZSwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgSW1hZ2UoKSkuc2l6ZSgwLCAwKS5sb2FkKHNvdXJjZSwgY2FsbGJhY2spO1xuICAgIH0pXG4gIH1cbn0pO1xucmVnaXN0ZXIoSW1hZ2UsICdJbWFnZScpO1xuXG5jbGFzcyBQb2ludEFycmF5IGV4dGVuZHMgU1ZHQXJyYXkge1xuICAvLyBHZXQgYm91bmRpbmcgYm94IG9mIHBvaW50c1xuICBiYm94KCkge1xuICAgIGxldCBtYXhYID0gLUluZmluaXR5O1xuICAgIGxldCBtYXhZID0gLUluZmluaXR5O1xuICAgIGxldCBtaW5YID0gSW5maW5pdHk7XG4gICAgbGV0IG1pblkgPSBJbmZpbml0eTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBtYXhYID0gTWF0aC5tYXgoZWxbMF0sIG1heFgpO1xuICAgICAgbWF4WSA9IE1hdGgubWF4KGVsWzFdLCBtYXhZKTtcbiAgICAgIG1pblggPSBNYXRoLm1pbihlbFswXSwgbWluWCk7XG4gICAgICBtaW5ZID0gTWF0aC5taW4oZWxbMV0sIG1pblkpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQm94KG1pblgsIG1pblksIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG4gIH0gLy8gTW92ZSBwb2ludCBzdHJpbmdcblxuXG4gIG1vdmUoeCwgeSkge1xuICAgIGNvbnN0IGJveCA9IHRoaXMuYmJveCgpOyAvLyBnZXQgcmVsYXRpdmUgb2Zmc2V0XG5cbiAgICB4IC09IGJveC54O1xuICAgIHkgLT0gYm94Lnk7IC8vIG1vdmUgZXZlcnkgcG9pbnRcblxuICAgIGlmICghaXNOYU4oeCkgJiYgIWlzTmFOKHkpKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzW2ldID0gW3RoaXNbaV1bMF0gKyB4LCB0aGlzW2ldWzFdICsgeV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gUGFyc2UgcG9pbnQgc3RyaW5nIGFuZCBmbGF0IGFycmF5XG5cblxuICBwYXJzZShhcnJheSA9IFswLCAwXSkge1xuICAgIGNvbnN0IHBvaW50cyA9IFtdOyAvLyBpZiBpdCBpcyBhbiBhcnJheSwgd2UgZmxhdHRlbiBpdCBhbmQgdGhlcmVmb3JlIGNsb25lIGl0IHRvIDEgZGVwdGhzXG5cbiAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgYXJyYXkgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnJheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEVsc2UsIGl0IGlzIGNvbnNpZGVyZWQgYXMgYSBzdHJpbmdcbiAgICAgIC8vIHBhcnNlIHBvaW50c1xuICAgICAgYXJyYXkgPSBhcnJheS50cmltKCkuc3BsaXQoZGVsaW1pdGVyKS5tYXAocGFyc2VGbG9hdCk7XG4gICAgfSAvLyB2YWxpZGF0ZSBwb2ludHMgLSBodHRwczovL3N2Z3dnLm9yZy9zdmcyLWRyYWZ0L3NoYXBlcy5odG1sI0RhdGFUeXBlUG9pbnRzXG4gICAgLy8gT2RkIG51bWJlciBvZiBjb29yZGluYXRlcyBpcyBhbiBlcnJvci4gSW4gc3VjaCBjYXNlcywgZHJvcCB0aGUgbGFzdCBvZGQgY29vcmRpbmF0ZS5cblxuXG4gICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgIT09IDApIGFycmF5LnBvcCgpOyAvLyB3cmFwIHBvaW50cyBpbiB0d28tdHVwbGVzXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpID0gaSArIDIpIHtcbiAgICAgIHBvaW50cy5wdXNoKFthcnJheVtpXSwgYXJyYXlbaSArIDFdXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50cztcbiAgfSAvLyBSZXNpemUgcG9seSBzdHJpbmdcblxuXG4gIHNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIGxldCBpO1xuICAgIGNvbnN0IGJveCA9IHRoaXMuYmJveCgpOyAvLyByZWNhbGN1bGF0ZSBwb3NpdGlvbiBvZiBhbGwgcG9pbnRzIGFjY29yZGluZyB0byBuZXcgc2l6ZVxuXG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKGJveC53aWR0aCkgdGhpc1tpXVswXSA9ICh0aGlzW2ldWzBdIC0gYm94LngpICogd2lkdGggLyBib3gud2lkdGggKyBib3gueDtcbiAgICAgIGlmIChib3guaGVpZ2h0KSB0aGlzW2ldWzFdID0gKHRoaXNbaV1bMV0gLSBib3gueSkgKiBoZWlnaHQgLyBib3guaGVpZ2h0ICsgYm94Lnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gQ29udmVydCBhcnJheSB0byBsaW5lIG9iamVjdFxuXG5cbiAgdG9MaW5lKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4MTogdGhpc1swXVswXSxcbiAgICAgIHkxOiB0aGlzWzBdWzFdLFxuICAgICAgeDI6IHRoaXNbMV1bMF0sXG4gICAgICB5MjogdGhpc1sxXVsxXVxuICAgIH07XG4gIH0gLy8gQ29udmVydCBhcnJheSB0byBzdHJpbmdcblxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IGFycmF5ID0gW107IC8vIGNvbnZlcnQgdG8gYSBwb2x5IHBvaW50IHN0cmluZ1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gdGhpcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKHRoaXNbaV0uam9pbignLCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXkuam9pbignICcpO1xuICB9XG5cbiAgdHJhbnNmb3JtKG0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnRyYW5zZm9ybU8obSk7XG4gIH0gLy8gdHJhbnNmb3JtIHBvaW50cyB3aXRoIG1hdHJpeCAoc2ltaWxhciB0byBQb2ludC50cmFuc2Zvcm0pXG5cblxuICB0cmFuc2Zvcm1PKG0pIHtcbiAgICBpZiAoIU1hdHJpeC5pc01hdHJpeExpa2UobSkpIHtcbiAgICAgIG0gPSBuZXcgTWF0cml4KG0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSB0aGlzLmxlbmd0aDsgaS0tOykge1xuICAgICAgLy8gUGVyZm9ybSB0aGUgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAgICBjb25zdCBbeCwgeV0gPSB0aGlzW2ldO1xuICAgICAgdGhpc1tpXVswXSA9IG0uYSAqIHggKyBtLmMgKiB5ICsgbS5lO1xuICAgICAgdGhpc1tpXVsxXSA9IG0uYiAqIHggKyBtLmQgKiB5ICsgbS5mO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuY29uc3QgTW9ycGhBcnJheSA9IFBvaW50QXJyYXk7IC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyIG92ZXIgeC1heGlzXG5cbmZ1bmN0aW9uIHgkMih4KSB7XG4gIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmJib3goKS54IDogdGhpcy5tb3ZlKHgsIHRoaXMuYmJveCgpLnkpO1xufSAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHktYXhpc1xuXG5mdW5jdGlvbiB5JDIoeSkge1xuICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5iYm94KCkueSA6IHRoaXMubW92ZSh0aGlzLmJib3goKS54LCB5KTtcbn0gLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcblxuZnVuY3Rpb24gd2lkdGgkMSh3aWR0aCkge1xuICBjb25zdCBiID0gdGhpcy5iYm94KCk7XG4gIHJldHVybiB3aWR0aCA9PSBudWxsID8gYi53aWR0aCA6IHRoaXMuc2l6ZSh3aWR0aCwgYi5oZWlnaHQpO1xufSAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcblxuZnVuY3Rpb24gaGVpZ2h0JDEoaGVpZ2h0KSB7XG4gIGNvbnN0IGIgPSB0aGlzLmJib3goKTtcbiAgcmV0dXJuIGhlaWdodCA9PSBudWxsID8gYi5oZWlnaHQgOiB0aGlzLnNpemUoYi53aWR0aCwgaGVpZ2h0KTtcbn1cblxudmFyIHBvaW50ZWQgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgTW9ycGhBcnJheTogTW9ycGhBcnJheSxcbiAgeDogeCQyLFxuICB5OiB5JDIsXG4gIHdpZHRoOiB3aWR0aCQxLFxuICBoZWlnaHQ6IGhlaWdodCQxXG59O1xuXG5jbGFzcyBMaW5lIGV4dGVuZHMgU2hhcGUge1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdsaW5lJywgbm9kZSksIGF0dHJzKTtcbiAgfSAvLyBHZXQgYXJyYXlcblxuXG4gIGFycmF5KCkge1xuICAgIHJldHVybiBuZXcgUG9pbnRBcnJheShbW3RoaXMuYXR0cigneDEnKSwgdGhpcy5hdHRyKCd5MScpXSwgW3RoaXMuYXR0cigneDInKSwgdGhpcy5hdHRyKCd5MicpXV0pO1xuICB9IC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXG5cblxuICBtb3ZlKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKHRoaXMuYXJyYXkoKS5tb3ZlKHgsIHkpLnRvTGluZSgpKTtcbiAgfSAvLyBPdmVyd3JpdGUgbmF0aXZlIHBsb3QoKSBtZXRob2RcblxuXG4gIHBsb3QoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICBpZiAoeDEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJyYXkoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB5MSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHgxID0ge1xuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MlxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeDEgPSBuZXcgUG9pbnRBcnJheSh4MSkudG9MaW5lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYXR0cih4MSk7XG4gIH0gLy8gU2V0IGVsZW1lbnQgc2l6ZSB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0XG5cblxuICBzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBwID0gcHJvcG9ydGlvbmFsU2l6ZSh0aGlzLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5hdHRyKHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KS50b0xpbmUoKSk7XG4gIH1cblxufVxuZXh0ZW5kKExpbmUsIHBvaW50ZWQpO1xucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgLy8gQ3JlYXRlIGEgbGluZSBlbGVtZW50XG4gICAgbGluZTogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxuICAgICAgLy8geDEgaXMgbm90IG5lY2Vzc2FyaWx5IGEgbnVtYmVyLCBpdCBjYW4gYWxzbyBiZSBhbiBhcnJheSwgYSBzdHJpbmcgYW5kIGEgUG9pbnRBcnJheVxuICAgICAgcmV0dXJuIExpbmUucHJvdG90eXBlLnBsb3QuYXBwbHkodGhpcy5wdXQobmV3IExpbmUoKSksIGFyZ3NbMF0gIT0gbnVsbCA/IGFyZ3MgOiBbMCwgMCwgMCwgMF0pO1xuICAgIH0pXG4gIH1cbn0pO1xucmVnaXN0ZXIoTGluZSwgJ0xpbmUnKTtcblxuY2xhc3MgTWFya2VyIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygnbWFya2VyJywgbm9kZSksIGF0dHJzKTtcbiAgfSAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcblxuXG4gIGhlaWdodChoZWlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdtYXJrZXJIZWlnaHQnLCBoZWlnaHQpO1xuICB9XG5cbiAgb3JpZW50KG9yaWVudCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ29yaWVudCcsIG9yaWVudCk7XG4gIH0gLy8gU2V0IG1hcmtlciByZWZYIGFuZCByZWZZXG5cblxuICByZWYoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ3JlZlgnLCB4KS5hdHRyKCdyZWZZJywgeSk7XG4gIH0gLy8gUmV0dXJuIHRoZSBmaWxsIGlkXG5cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ3VybCgjJyArIHRoaXMuaWQoKSArICcpJztcbiAgfSAvLyBVcGRhdGUgbWFya2VyXG5cblxuICB1cGRhdGUoYmxvY2spIHtcbiAgICAvLyByZW1vdmUgYWxsIGNvbnRlbnRcbiAgICB0aGlzLmNsZWFyKCk7IC8vIGludm9rZSBwYXNzZWQgYmxvY2tcblxuICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcblxuXG4gIHdpZHRoKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignbWFya2VyV2lkdGgnLCB3aWR0aCk7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgbWFya2VyKC4uLmFyZ3MpIHtcbiAgICAgIC8vIENyZWF0ZSBtYXJrZXIgZWxlbWVudCBpbiBkZWZzXG4gICAgICByZXR1cm4gdGhpcy5kZWZzKCkubWFya2VyKC4uLmFyZ3MpO1xuICAgIH1cblxuICB9LFxuICBEZWZzOiB7XG4gICAgLy8gQ3JlYXRlIG1hcmtlclxuICAgIG1hcmtlcjogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGJsb2NrKSB7XG4gICAgICAvLyBTZXQgZGVmYXVsdCB2aWV3Ym94IHRvIG1hdGNoIHRoZSB3aWR0aCBhbmQgaGVpZ2h0LCBzZXQgcmVmIHRvIGN4IGFuZCBjeSBhbmQgc2V0IG9yaWVudCB0byBhdXRvXG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IE1hcmtlcigpKS5zaXplKHdpZHRoLCBoZWlnaHQpLnJlZih3aWR0aCAvIDIsIGhlaWdodCAvIDIpLnZpZXdib3goMCwgMCwgd2lkdGgsIGhlaWdodCkuYXR0cignb3JpZW50JywgJ2F1dG8nKS51cGRhdGUoYmxvY2spO1xuICAgIH0pXG4gIH0sXG4gIG1hcmtlcjoge1xuICAgIC8vIENyZWF0ZSBhbmQgYXR0YWNoIG1hcmtlcnNcbiAgICBtYXJrZXIobWFya2VyLCB3aWR0aCwgaGVpZ2h0LCBibG9jaykge1xuICAgICAgbGV0IGF0dHIgPSBbJ21hcmtlciddOyAvLyBCdWlsZCBhdHRyaWJ1dGUgbmFtZVxuXG4gICAgICBpZiAobWFya2VyICE9PSAnYWxsJykgYXR0ci5wdXNoKG1hcmtlcik7XG4gICAgICBhdHRyID0gYXR0ci5qb2luKCctJyk7IC8vIFNldCBtYXJrZXIgYXR0cmlidXRlXG5cbiAgICAgIG1hcmtlciA9IGFyZ3VtZW50c1sxXSBpbnN0YW5jZW9mIE1hcmtlciA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuZGVmcygpLm1hcmtlcih3aWR0aCwgaGVpZ2h0LCBibG9jayk7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKGF0dHIsIG1hcmtlcik7XG4gICAgfVxuXG4gIH1cbn0pO1xucmVnaXN0ZXIoTWFya2VyLCAnTWFya2VyJyk7XG5cbi8qKipcclxuQmFzZSBDbGFzc1xyXG49PT09PT09PT09XHJcblRoZSBiYXNlIHN0ZXBwZXIgY2xhc3MgdGhhdCB3aWxsIGJlXHJcbioqKi9cblxuZnVuY3Rpb24gbWFrZVNldHRlckdldHRlcihrLCBmKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIGlmICh2ID09IG51bGwpIHJldHVybiB0aGlzW2tdO1xuICAgIHRoaXNba10gPSB2O1xuICAgIGlmIChmKSBmLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cbmNvbnN0IGVhc2luZyA9IHtcbiAgJy0nOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgcmV0dXJuIHBvcztcbiAgfSxcbiAgJzw+JzogZnVuY3Rpb24gKHBvcykge1xuICAgIHJldHVybiAtTWF0aC5jb3MocG9zICogTWF0aC5QSSkgLyAyICsgMC41O1xuICB9LFxuICAnPic6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4ocG9zICogTWF0aC5QSSAvIDIpO1xuICB9LFxuICAnPCc6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICByZXR1cm4gLU1hdGguY29zKHBvcyAqIE1hdGguUEkgLyAyKSArIDE7XG4gIH0sXG4gIGJlemllcjogZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgLy8gc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtZWFzaW5nLTEvI2N1YmljLWJlemllci1hbGdvXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICBpZiAodCA8IDApIHtcbiAgICAgICAgaWYgKHgxID4gMCkge1xuICAgICAgICAgIHJldHVybiB5MSAvIHgxICogdDtcbiAgICAgICAgfSBlbHNlIGlmICh4MiA+IDApIHtcbiAgICAgICAgICByZXR1cm4geTIgLyB4MiAqIHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodCA+IDEpIHtcbiAgICAgICAgaWYgKHgyIDwgMSkge1xuICAgICAgICAgIHJldHVybiAoMSAtIHkyKSAvICgxIC0geDIpICogdCArICh5MiAtIHgyKSAvICgxIC0geDIpO1xuICAgICAgICB9IGVsc2UgaWYgKHgxIDwgMSkge1xuICAgICAgICAgIHJldHVybiAoMSAtIHkxKSAvICgxIC0geDEpICogdCArICh5MSAtIHgxKSAvICgxIC0geDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMyAqIHQgKiAoMSAtIHQpICoqIDIgKiB5MSArIDMgKiB0ICoqIDIgKiAoMSAtIHQpICogeTIgKyB0ICoqIDM7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgLy8gc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtZWFzaW5nLTEvI3N0ZXAtdGltaW5nLWZ1bmN0aW9uLWFsZ29cbiAgc3RlcHM6IGZ1bmN0aW9uIChzdGVwcywgc3RlcFBvc2l0aW9uID0gJ2VuZCcpIHtcbiAgICAvLyBkZWFsIHdpdGggXCJqdW1wLVwiIHByZWZpeFxuICAgIHN0ZXBQb3NpdGlvbiA9IHN0ZXBQb3NpdGlvbi5zcGxpdCgnLScpLnJldmVyc2UoKVswXTtcbiAgICBsZXQganVtcHMgPSBzdGVwcztcblxuICAgIGlmIChzdGVwUG9zaXRpb24gPT09ICdub25lJykge1xuICAgICAgLS1qdW1wcztcbiAgICB9IGVsc2UgaWYgKHN0ZXBQb3NpdGlvbiA9PT0gJ2JvdGgnKSB7XG4gICAgICArK2p1bXBzO1xuICAgIH0gLy8gVGhlIGJlZm9yZUZsYWcgaXMgZXNzZW50aWFsbHkgdXNlbGVzc1xuXG5cbiAgICByZXR1cm4gKHQsIGJlZm9yZUZsYWcgPSBmYWxzZSkgPT4ge1xuICAgICAgLy8gU3RlcCBpcyBjYWxsZWQgY3VycmVudFN0ZXAgaW4gcmVmZXJlbmNlZCB1cmxcbiAgICAgIGxldCBzdGVwID0gTWF0aC5mbG9vcih0ICogc3RlcHMpO1xuICAgICAgY29uc3QganVtcGluZyA9IHQgKiBzdGVwICUgMSA9PT0gMDtcblxuICAgICAgaWYgKHN0ZXBQb3NpdGlvbiA9PT0gJ3N0YXJ0JyB8fCBzdGVwUG9zaXRpb24gPT09ICdib3RoJykge1xuICAgICAgICArK3N0ZXA7XG4gICAgICB9XG5cbiAgICAgIGlmIChiZWZvcmVGbGFnICYmIGp1bXBpbmcpIHtcbiAgICAgICAgLS1zdGVwO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA+PSAwICYmIHN0ZXAgPCAwKSB7XG4gICAgICAgIHN0ZXAgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA8PSAxICYmIHN0ZXAgPiBqdW1wcykge1xuICAgICAgICBzdGVwID0ganVtcHM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGVwIC8ganVtcHM7XG4gICAgfTtcbiAgfVxufTtcbmNsYXNzIFN0ZXBwZXIge1xuICBkb25lKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59XG4vKioqXHJcbkVhc2luZyBGdW5jdGlvbnNcclxuPT09PT09PT09PT09PT09PVxyXG4qKiovXG5cbmNsYXNzIEVhc2UgZXh0ZW5kcyBTdGVwcGVyIHtcbiAgY29uc3RydWN0b3IoZm4gPSB0aW1lbGluZS5lYXNlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVhc2UgPSBlYXNpbmdbZm5dIHx8IGZuO1xuICB9XG5cbiAgc3RlcChmcm9tLCB0bywgcG9zKSB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHBvcyA8IDEgPyBmcm9tIDogdG87XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyb20gKyAodG8gLSBmcm9tKSAqIHRoaXMuZWFzZShwb3MpO1xuICB9XG5cbn1cbi8qKipcclxuQ29udHJvbGxlciBUeXBlc1xyXG49PT09PT09PT09PT09PT09XHJcbioqKi9cblxuY2xhc3MgQ29udHJvbGxlciBleHRlbmRzIFN0ZXBwZXIge1xuICBjb25zdHJ1Y3Rvcihmbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGVwcGVyID0gZm47XG4gIH1cblxuICBkb25lKGMpIHtcbiAgICByZXR1cm4gYy5kb25lO1xuICB9XG5cbiAgc3RlcChjdXJyZW50LCB0YXJnZXQsIGR0LCBjKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RlcHBlcihjdXJyZW50LCB0YXJnZXQsIGR0LCBjKTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHJlY2FsY3VsYXRlKCkge1xuICAvLyBBcHBseSB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG4gIGNvbnN0IGR1cmF0aW9uID0gKHRoaXMuX2R1cmF0aW9uIHx8IDUwMCkgLyAxMDAwO1xuICBjb25zdCBvdmVyc2hvb3QgPSB0aGlzLl9vdmVyc2hvb3QgfHwgMDsgLy8gQ2FsY3VsYXRlIHRoZSBQSUQgbmF0dXJhbCByZXNwb25zZVxuXG4gIGNvbnN0IGVwcyA9IDFlLTEwO1xuICBjb25zdCBwaSA9IE1hdGguUEk7XG4gIGNvbnN0IG9zID0gTWF0aC5sb2cob3ZlcnNob290IC8gMTAwICsgZXBzKTtcbiAgY29uc3QgemV0YSA9IC1vcyAvIE1hdGguc3FydChwaSAqIHBpICsgb3MgKiBvcyk7XG4gIGNvbnN0IHduID0gMy45IC8gKHpldGEgKiBkdXJhdGlvbik7IC8vIENhbGN1bGF0ZSB0aGUgU3ByaW5nIHZhbHVlc1xuXG4gIHRoaXMuZCA9IDIgKiB6ZXRhICogd247XG4gIHRoaXMuayA9IHduICogd247XG59XG5cbmNsYXNzIFNwcmluZyBleHRlbmRzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihkdXJhdGlvbiA9IDUwMCwgb3ZlcnNob290ID0gMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kdXJhdGlvbihkdXJhdGlvbikub3ZlcnNob290KG92ZXJzaG9vdCk7XG4gIH1cblxuICBzdGVwKGN1cnJlbnQsIHRhcmdldCwgZHQsIGMpIHtcbiAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSByZXR1cm4gY3VycmVudDtcbiAgICBjLmRvbmUgPSBkdCA9PT0gSW5maW5pdHk7XG4gICAgaWYgKGR0ID09PSBJbmZpbml0eSkgcmV0dXJuIHRhcmdldDtcbiAgICBpZiAoZHQgPT09IDApIHJldHVybiBjdXJyZW50O1xuICAgIGlmIChkdCA+IDEwMCkgZHQgPSAxNjtcbiAgICBkdCAvPSAxMDAwOyAvLyBHZXQgdGhlIHByZXZpb3VzIHZlbG9jaXR5XG5cbiAgICBjb25zdCB2ZWxvY2l0eSA9IGMudmVsb2NpdHkgfHwgMDsgLy8gQXBwbHkgdGhlIGNvbnRyb2wgdG8gZ2V0IHRoZSBuZXcgcG9zaXRpb24gYW5kIHN0b3JlIGl0XG5cbiAgICBjb25zdCBhY2NlbGVyYXRpb24gPSAtdGhpcy5kICogdmVsb2NpdHkgLSB0aGlzLmsgKiAoY3VycmVudCAtIHRhcmdldCk7XG4gICAgY29uc3QgbmV3UG9zaXRpb24gPSBjdXJyZW50ICsgdmVsb2NpdHkgKiBkdCArIGFjY2VsZXJhdGlvbiAqIGR0ICogZHQgLyAyOyAvLyBTdG9yZSB0aGUgdmVsb2NpdHlcblxuICAgIGMudmVsb2NpdHkgPSB2ZWxvY2l0eSArIGFjY2VsZXJhdGlvbiAqIGR0OyAvLyBGaWd1cmUgb3V0IGlmIHdlIGhhdmUgY29udmVyZ2VkLCBhbmQgaWYgc28sIHBhc3MgdGhlIHZhbHVlXG5cbiAgICBjLmRvbmUgPSBNYXRoLmFicyh0YXJnZXQgLSBuZXdQb3NpdGlvbikgKyBNYXRoLmFicyh2ZWxvY2l0eSkgPCAwLjAwMjtcbiAgICByZXR1cm4gYy5kb25lID8gdGFyZ2V0IDogbmV3UG9zaXRpb247XG4gIH1cblxufVxuZXh0ZW5kKFNwcmluZywge1xuICBkdXJhdGlvbjogbWFrZVNldHRlckdldHRlcignX2R1cmF0aW9uJywgcmVjYWxjdWxhdGUpLFxuICBvdmVyc2hvb3Q6IG1ha2VTZXR0ZXJHZXR0ZXIoJ19vdmVyc2hvb3QnLCByZWNhbGN1bGF0ZSlcbn0pO1xuY2xhc3MgUElEIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKHAgPSAwLjEsIGkgPSAwLjAxLCBkID0gMCwgd2luZHVwID0gMTAwMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wKHApLmkoaSkuZChkKS53aW5kdXAod2luZHVwKTtcbiAgfVxuXG4gIHN0ZXAoY3VycmVudCwgdGFyZ2V0LCBkdCwgYykge1xuICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3N0cmluZycpIHJldHVybiBjdXJyZW50O1xuICAgIGMuZG9uZSA9IGR0ID09PSBJbmZpbml0eTtcbiAgICBpZiAoZHQgPT09IEluZmluaXR5KSByZXR1cm4gdGFyZ2V0O1xuICAgIGlmIChkdCA9PT0gMCkgcmV0dXJuIGN1cnJlbnQ7XG4gICAgY29uc3QgcCA9IHRhcmdldCAtIGN1cnJlbnQ7XG4gICAgbGV0IGkgPSAoYy5pbnRlZ3JhbCB8fCAwKSArIHAgKiBkdDtcbiAgICBjb25zdCBkID0gKHAgLSAoYy5lcnJvciB8fCAwKSkgLyBkdDtcbiAgICBjb25zdCB3aW5kdXAgPSB0aGlzLl93aW5kdXA7IC8vIGFudGl3aW5kdXBcblxuICAgIGlmICh3aW5kdXAgIT09IGZhbHNlKSB7XG4gICAgICBpID0gTWF0aC5tYXgoLXdpbmR1cCwgTWF0aC5taW4oaSwgd2luZHVwKSk7XG4gICAgfVxuXG4gICAgYy5lcnJvciA9IHA7XG4gICAgYy5pbnRlZ3JhbCA9IGk7XG4gICAgYy5kb25lID0gTWF0aC5hYnMocCkgPCAwLjAwMTtcbiAgICByZXR1cm4gYy5kb25lID8gdGFyZ2V0IDogY3VycmVudCArICh0aGlzLlAgKiBwICsgdGhpcy5JICogaSArIHRoaXMuRCAqIGQpO1xuICB9XG5cbn1cbmV4dGVuZChQSUQsIHtcbiAgd2luZHVwOiBtYWtlU2V0dGVyR2V0dGVyKCdfd2luZHVwJyksXG4gIHA6IG1ha2VTZXR0ZXJHZXR0ZXIoJ1AnKSxcbiAgaTogbWFrZVNldHRlckdldHRlcignSScpLFxuICBkOiBtYWtlU2V0dGVyR2V0dGVyKCdEJylcbn0pO1xuXG5jb25zdCBzZWdtZW50UGFyYW1ldGVycyA9IHtcbiAgTTogMixcbiAgTDogMixcbiAgSDogMSxcbiAgVjogMSxcbiAgQzogNixcbiAgUzogNCxcbiAgUTogNCxcbiAgVDogMixcbiAgQTogNyxcbiAgWjogMFxufTtcbmNvbnN0IHBhdGhIYW5kbGVycyA9IHtcbiAgTTogZnVuY3Rpb24gKGMsIHAsIHAwKSB7XG4gICAgcC54ID0gcDAueCA9IGNbMF07XG4gICAgcC55ID0gcDAueSA9IGNbMV07XG4gICAgcmV0dXJuIFsnTScsIHAueCwgcC55XTtcbiAgfSxcbiAgTDogZnVuY3Rpb24gKGMsIHApIHtcbiAgICBwLnggPSBjWzBdO1xuICAgIHAueSA9IGNbMV07XG4gICAgcmV0dXJuIFsnTCcsIGNbMF0sIGNbMV1dO1xuICB9LFxuICBIOiBmdW5jdGlvbiAoYywgcCkge1xuICAgIHAueCA9IGNbMF07XG4gICAgcmV0dXJuIFsnSCcsIGNbMF1dO1xuICB9LFxuICBWOiBmdW5jdGlvbiAoYywgcCkge1xuICAgIHAueSA9IGNbMF07XG4gICAgcmV0dXJuIFsnVicsIGNbMF1dO1xuICB9LFxuICBDOiBmdW5jdGlvbiAoYywgcCkge1xuICAgIHAueCA9IGNbNF07XG4gICAgcC55ID0gY1s1XTtcbiAgICByZXR1cm4gWydDJywgY1swXSwgY1sxXSwgY1syXSwgY1szXSwgY1s0XSwgY1s1XV07XG4gIH0sXG4gIFM6IGZ1bmN0aW9uIChjLCBwKSB7XG4gICAgcC54ID0gY1syXTtcbiAgICBwLnkgPSBjWzNdO1xuICAgIHJldHVybiBbJ1MnLCBjWzBdLCBjWzFdLCBjWzJdLCBjWzNdXTtcbiAgfSxcbiAgUTogZnVuY3Rpb24gKGMsIHApIHtcbiAgICBwLnggPSBjWzJdO1xuICAgIHAueSA9IGNbM107XG4gICAgcmV0dXJuIFsnUScsIGNbMF0sIGNbMV0sIGNbMl0sIGNbM11dO1xuICB9LFxuICBUOiBmdW5jdGlvbiAoYywgcCkge1xuICAgIHAueCA9IGNbMF07XG4gICAgcC55ID0gY1sxXTtcbiAgICByZXR1cm4gWydUJywgY1swXSwgY1sxXV07XG4gIH0sXG4gIFo6IGZ1bmN0aW9uIChjLCBwLCBwMCkge1xuICAgIHAueCA9IHAwLng7XG4gICAgcC55ID0gcDAueTtcbiAgICByZXR1cm4gWydaJ107XG4gIH0sXG4gIEE6IGZ1bmN0aW9uIChjLCBwKSB7XG4gICAgcC54ID0gY1s1XTtcbiAgICBwLnkgPSBjWzZdO1xuICAgIHJldHVybiBbJ0EnLCBjWzBdLCBjWzFdLCBjWzJdLCBjWzNdLCBjWzRdLCBjWzVdLCBjWzZdXTtcbiAgfVxufTtcbmNvbnN0IG1saHZxdGNzYXogPSAnbWxodnF0Y3Nheicuc3BsaXQoJycpO1xuXG5mb3IgKGxldCBpID0gMCwgaWwgPSBtbGh2cXRjc2F6Lmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgcGF0aEhhbmRsZXJzW21saHZxdGNzYXpbaV1dID0gZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGMsIHAsIHAwKSB7XG4gICAgICBpZiAoaSA9PT0gJ0gnKSBjWzBdID0gY1swXSArIHAueDtlbHNlIGlmIChpID09PSAnVicpIGNbMF0gPSBjWzBdICsgcC55O2Vsc2UgaWYgKGkgPT09ICdBJykge1xuICAgICAgICBjWzVdID0gY1s1XSArIHAueDtcbiAgICAgICAgY1s2XSA9IGNbNl0gKyBwLnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBqID0gMCwgamwgPSBjLmxlbmd0aDsgaiA8IGpsOyArK2opIHtcbiAgICAgICAgICBjW2pdID0gY1tqXSArIChqICUgMiA/IHAueSA6IHAueCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoSGFuZGxlcnNbaV0oYywgcCwgcDApO1xuICAgIH07XG4gIH0obWxodnF0Y3NheltpXS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuZnVuY3Rpb24gbWFrZUFic29sdXQocGFyc2VyKSB7XG4gIGNvbnN0IGNvbW1hbmQgPSBwYXJzZXIuc2VnbWVudFswXTtcbiAgcmV0dXJuIHBhdGhIYW5kbGVyc1tjb21tYW5kXShwYXJzZXIuc2VnbWVudC5zbGljZSgxKSwgcGFyc2VyLnAsIHBhcnNlci5wMCk7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRDb21wbGV0ZShwYXJzZXIpIHtcbiAgcmV0dXJuIHBhcnNlci5zZWdtZW50Lmxlbmd0aCAmJiBwYXJzZXIuc2VnbWVudC5sZW5ndGggLSAxID09PSBzZWdtZW50UGFyYW1ldGVyc1twYXJzZXIuc2VnbWVudFswXS50b1VwcGVyQ2FzZSgpXTtcbn1cblxuZnVuY3Rpb24gc3RhcnROZXdTZWdtZW50KHBhcnNlciwgdG9rZW4pIHtcbiAgcGFyc2VyLmluTnVtYmVyICYmIGZpbmFsaXplTnVtYmVyKHBhcnNlciwgZmFsc2UpO1xuICBjb25zdCBwYXRoTGV0dGVyID0gaXNQYXRoTGV0dGVyLnRlc3QodG9rZW4pO1xuXG4gIGlmIChwYXRoTGV0dGVyKSB7XG4gICAgcGFyc2VyLnNlZ21lbnQgPSBbdG9rZW5dO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxhc3RDb21tYW5kID0gcGFyc2VyLmxhc3RDb21tYW5kO1xuICAgIGNvbnN0IHNtYWxsID0gbGFzdENvbW1hbmQudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBpc1NtYWxsID0gbGFzdENvbW1hbmQgPT09IHNtYWxsO1xuICAgIHBhcnNlci5zZWdtZW50ID0gW3NtYWxsID09PSAnbScgPyBpc1NtYWxsID8gJ2wnIDogJ0wnIDogbGFzdENvbW1hbmRdO1xuICB9XG5cbiAgcGFyc2VyLmluU2VnbWVudCA9IHRydWU7XG4gIHBhcnNlci5sYXN0Q29tbWFuZCA9IHBhcnNlci5zZWdtZW50WzBdO1xuICByZXR1cm4gcGF0aExldHRlcjtcbn1cblxuZnVuY3Rpb24gZmluYWxpemVOdW1iZXIocGFyc2VyLCBpbk51bWJlcikge1xuICBpZiAoIXBhcnNlci5pbk51bWJlcikgdGhyb3cgbmV3IEVycm9yKCdQYXJzZXIgRXJyb3InKTtcbiAgcGFyc2VyLm51bWJlciAmJiBwYXJzZXIuc2VnbWVudC5wdXNoKHBhcnNlRmxvYXQocGFyc2VyLm51bWJlcikpO1xuICBwYXJzZXIuaW5OdW1iZXIgPSBpbk51bWJlcjtcbiAgcGFyc2VyLm51bWJlciA9ICcnO1xuICBwYXJzZXIucG9pbnRTZWVuID0gZmFsc2U7XG4gIHBhcnNlci5oYXNFeHBvbmVudCA9IGZhbHNlO1xuXG4gIGlmIChzZWdtZW50Q29tcGxldGUocGFyc2VyKSkge1xuICAgIGZpbmFsaXplU2VnbWVudChwYXJzZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmFsaXplU2VnbWVudChwYXJzZXIpIHtcbiAgcGFyc2VyLmluU2VnbWVudCA9IGZhbHNlO1xuXG4gIGlmIChwYXJzZXIuYWJzb2x1dGUpIHtcbiAgICBwYXJzZXIuc2VnbWVudCA9IG1ha2VBYnNvbHV0KHBhcnNlcik7XG4gIH1cblxuICBwYXJzZXIuc2VnbWVudHMucHVzaChwYXJzZXIuc2VnbWVudCk7XG59XG5cbmZ1bmN0aW9uIGlzQXJjRmxhZyhwYXJzZXIpIHtcbiAgaWYgKCFwYXJzZXIuc2VnbWVudC5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgaXNBcmMgPSBwYXJzZXIuc2VnbWVudFswXS50b1VwcGVyQ2FzZSgpID09PSAnQSc7XG4gIGNvbnN0IGxlbmd0aCA9IHBhcnNlci5zZWdtZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGlzQXJjICYmIChsZW5ndGggPT09IDQgfHwgbGVuZ3RoID09PSA1KTtcbn1cblxuZnVuY3Rpb24gaXNFeHBvbmVudGlhbChwYXJzZXIpIHtcbiAgcmV0dXJuIHBhcnNlci5sYXN0VG9rZW4udG9VcHBlckNhc2UoKSA9PT0gJ0UnO1xufVxuXG5mdW5jdGlvbiBwYXRoUGFyc2VyKGQsIHRvQWJzb2x1dGUgPSB0cnVlKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCB0b2tlbiA9ICcnO1xuICBjb25zdCBwYXJzZXIgPSB7XG4gICAgc2VnbWVudDogW10sXG4gICAgaW5OdW1iZXI6IGZhbHNlLFxuICAgIG51bWJlcjogJycsXG4gICAgbGFzdFRva2VuOiAnJyxcbiAgICBpblNlZ21lbnQ6IGZhbHNlLFxuICAgIHNlZ21lbnRzOiBbXSxcbiAgICBwb2ludFNlZW46IGZhbHNlLFxuICAgIGhhc0V4cG9uZW50OiBmYWxzZSxcbiAgICBhYnNvbHV0ZTogdG9BYnNvbHV0ZSxcbiAgICBwMDogbmV3IFBvaW50KCksXG4gICAgcDogbmV3IFBvaW50KClcbiAgfTtcblxuICB3aGlsZSAocGFyc2VyLmxhc3RUb2tlbiA9IHRva2VuLCB0b2tlbiA9IGQuY2hhckF0KGluZGV4KyspKSB7XG4gICAgaWYgKCFwYXJzZXIuaW5TZWdtZW50KSB7XG4gICAgICBpZiAoc3RhcnROZXdTZWdtZW50KHBhcnNlciwgdG9rZW4pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b2tlbiA9PT0gJy4nKSB7XG4gICAgICBpZiAocGFyc2VyLnBvaW50U2VlbiB8fCBwYXJzZXIuaGFzRXhwb25lbnQpIHtcbiAgICAgICAgZmluYWxpemVOdW1iZXIocGFyc2VyLCBmYWxzZSk7XG4gICAgICAgIC0taW5kZXg7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwYXJzZXIuaW5OdW1iZXIgPSB0cnVlO1xuICAgICAgcGFyc2VyLnBvaW50U2VlbiA9IHRydWU7XG4gICAgICBwYXJzZXIubnVtYmVyICs9IHRva2VuO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFpc05hTihwYXJzZUludCh0b2tlbikpKSB7XG4gICAgICBpZiAocGFyc2VyLm51bWJlciA9PT0gJzAnIHx8IGlzQXJjRmxhZyhwYXJzZXIpKSB7XG4gICAgICAgIHBhcnNlci5pbk51bWJlciA9IHRydWU7XG4gICAgICAgIHBhcnNlci5udW1iZXIgPSB0b2tlbjtcbiAgICAgICAgZmluYWxpemVOdW1iZXIocGFyc2VyLCB0cnVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHBhcnNlci5pbk51bWJlciA9IHRydWU7XG4gICAgICBwYXJzZXIubnVtYmVyICs9IHRva2VuO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuID09PSAnICcgfHwgdG9rZW4gPT09ICcsJykge1xuICAgICAgaWYgKHBhcnNlci5pbk51bWJlcikge1xuICAgICAgICBmaW5hbGl6ZU51bWJlcihwYXJzZXIsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuID09PSAnLScpIHtcbiAgICAgIGlmIChwYXJzZXIuaW5OdW1iZXIgJiYgIWlzRXhwb25lbnRpYWwocGFyc2VyKSkge1xuICAgICAgICBmaW5hbGl6ZU51bWJlcihwYXJzZXIsIGZhbHNlKTtcbiAgICAgICAgLS1pbmRleDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHBhcnNlci5udW1iZXIgKz0gdG9rZW47XG4gICAgICBwYXJzZXIuaW5OdW1iZXIgPSB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuLnRvVXBwZXJDYXNlKCkgPT09ICdFJykge1xuICAgICAgcGFyc2VyLm51bWJlciArPSB0b2tlbjtcbiAgICAgIHBhcnNlci5oYXNFeHBvbmVudCA9IHRydWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNQYXRoTGV0dGVyLnRlc3QodG9rZW4pKSB7XG4gICAgICBpZiAocGFyc2VyLmluTnVtYmVyKSB7XG4gICAgICAgIGZpbmFsaXplTnVtYmVyKHBhcnNlciwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmICghc2VnbWVudENvbXBsZXRlKHBhcnNlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYXJzZXIgRXJyb3InKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsaXplU2VnbWVudChwYXJzZXIpO1xuICAgICAgfVxuXG4gICAgICAtLWluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJzZXIuaW5OdW1iZXIpIHtcbiAgICBmaW5hbGl6ZU51bWJlcihwYXJzZXIsIGZhbHNlKTtcbiAgfVxuXG4gIGlmIChwYXJzZXIuaW5TZWdtZW50ICYmIHNlZ21lbnRDb21wbGV0ZShwYXJzZXIpKSB7XG4gICAgZmluYWxpemVTZWdtZW50KHBhcnNlcik7XG4gIH1cblxuICByZXR1cm4gcGFyc2VyLnNlZ21lbnRzO1xufVxuXG5mdW5jdGlvbiBhcnJheVRvU3RyaW5nKGEpIHtcbiAgbGV0IHMgPSAnJztcblxuICBmb3IgKGxldCBpID0gMCwgaWwgPSBhLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICBzICs9IGFbaV1bMF07XG5cbiAgICBpZiAoYVtpXVsxXSAhPSBudWxsKSB7XG4gICAgICBzICs9IGFbaV1bMV07XG5cbiAgICAgIGlmIChhW2ldWzJdICE9IG51bGwpIHtcbiAgICAgICAgcyArPSAnICc7XG4gICAgICAgIHMgKz0gYVtpXVsyXTtcblxuICAgICAgICBpZiAoYVtpXVszXSAhPSBudWxsKSB7XG4gICAgICAgICAgcyArPSAnICc7XG4gICAgICAgICAgcyArPSBhW2ldWzNdO1xuICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgIHMgKz0gYVtpXVs0XTtcblxuICAgICAgICAgIGlmIChhW2ldWzVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHMgKz0gJyAnO1xuICAgICAgICAgICAgcyArPSBhW2ldWzVdO1xuICAgICAgICAgICAgcyArPSAnICc7XG4gICAgICAgICAgICBzICs9IGFbaV1bNl07XG5cbiAgICAgICAgICAgIGlmIChhW2ldWzddICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcyArPSAnICc7XG4gICAgICAgICAgICAgIHMgKz0gYVtpXVs3XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcyArICcgJztcbn1cblxuY2xhc3MgUGF0aEFycmF5IGV4dGVuZHMgU1ZHQXJyYXkge1xuICAvLyBHZXQgYm91bmRpbmcgYm94IG9mIHBhdGhcbiAgYmJveCgpIHtcbiAgICBwYXJzZXIoKS5wYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIG5ldyBCb3gocGFyc2VyLm5vZGVzLnBhdGguZ2V0QkJveCgpKTtcbiAgfSAvLyBNb3ZlIHBhdGggc3RyaW5nXG5cblxuICBtb3ZlKHgsIHkpIHtcbiAgICAvLyBnZXQgYm91bmRpbmcgYm94IG9mIGN1cnJlbnQgc2l0dWF0aW9uXG4gICAgY29uc3QgYm94ID0gdGhpcy5iYm94KCk7IC8vIGdldCByZWxhdGl2ZSBvZmZzZXRcblxuICAgIHggLT0gYm94Lng7XG4gICAgeSAtPSBib3gueTtcblxuICAgIGlmICghaXNOYU4oeCkgJiYgIWlzTmFOKHkpKSB7XG4gICAgICAvLyBtb3ZlIGV2ZXJ5IHBvaW50XG4gICAgICBmb3IgKGxldCBsLCBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBsID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAobCA9PT0gJ00nIHx8IGwgPT09ICdMJyB8fCBsID09PSAnVCcpIHtcbiAgICAgICAgICB0aGlzW2ldWzFdICs9IHg7XG4gICAgICAgICAgdGhpc1tpXVsyXSArPSB5O1xuICAgICAgICB9IGVsc2UgaWYgKGwgPT09ICdIJykge1xuICAgICAgICAgIHRoaXNbaV1bMV0gKz0geDtcbiAgICAgICAgfSBlbHNlIGlmIChsID09PSAnVicpIHtcbiAgICAgICAgICB0aGlzW2ldWzFdICs9IHk7XG4gICAgICAgIH0gZWxzZSBpZiAobCA9PT0gJ0MnIHx8IGwgPT09ICdTJyB8fCBsID09PSAnUScpIHtcbiAgICAgICAgICB0aGlzW2ldWzFdICs9IHg7XG4gICAgICAgICAgdGhpc1tpXVsyXSArPSB5O1xuICAgICAgICAgIHRoaXNbaV1bM10gKz0geDtcbiAgICAgICAgICB0aGlzW2ldWzRdICs9IHk7XG5cbiAgICAgICAgICBpZiAobCA9PT0gJ0MnKSB7XG4gICAgICAgICAgICB0aGlzW2ldWzVdICs9IHg7XG4gICAgICAgICAgICB0aGlzW2ldWzZdICs9IHk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGwgPT09ICdBJykge1xuICAgICAgICAgIHRoaXNbaV1bNl0gKz0geDtcbiAgICAgICAgICB0aGlzW2ldWzddICs9IHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBBYnNvbHV0aXplIGFuZCBwYXJzZSBwYXRoIHRvIGFycmF5XG5cblxuICBwYXJzZShkID0gJ00wIDAnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZCkpIHtcbiAgICAgIGQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBkKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoUGFyc2VyKGQpO1xuICB9IC8vIFJlc2l6ZSBwYXRoIHN0cmluZ1xuXG5cbiAgc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gZ2V0IGJvdW5kaW5nIGJveCBvZiBjdXJyZW50IHNpdHVhdGlvblxuICAgIGNvbnN0IGJveCA9IHRoaXMuYmJveCgpO1xuICAgIGxldCBpLCBsOyAvLyBJZiB0aGUgYm94IHdpZHRoIG9yIGhlaWdodCBpcyAwIHRoZW4gd2UgaWdub3JlXG4gICAgLy8gdHJhbnNmb3JtYXRpb25zIG9uIHRoZSByZXNwZWN0aXZlIGF4aXNcblxuICAgIGJveC53aWR0aCA9IGJveC53aWR0aCA9PT0gMCA/IDEgOiBib3gud2lkdGg7XG4gICAgYm94LmhlaWdodCA9IGJveC5oZWlnaHQgPT09IDAgPyAxIDogYm94LmhlaWdodDsgLy8gcmVjYWxjdWxhdGUgcG9zaXRpb24gb2YgYWxsIHBvaW50cyBhY2NvcmRpbmcgdG8gbmV3IHNpemVcblxuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGwgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAobCA9PT0gJ00nIHx8IGwgPT09ICdMJyB8fCBsID09PSAnVCcpIHtcbiAgICAgICAgdGhpc1tpXVsxXSA9ICh0aGlzW2ldWzFdIC0gYm94LngpICogd2lkdGggLyBib3gud2lkdGggKyBib3gueDtcbiAgICAgICAgdGhpc1tpXVsyXSA9ICh0aGlzW2ldWzJdIC0gYm94LnkpICogaGVpZ2h0IC8gYm94LmhlaWdodCArIGJveC55O1xuICAgICAgfSBlbHNlIGlmIChsID09PSAnSCcpIHtcbiAgICAgICAgdGhpc1tpXVsxXSA9ICh0aGlzW2ldWzFdIC0gYm94LngpICogd2lkdGggLyBib3gud2lkdGggKyBib3gueDtcbiAgICAgIH0gZWxzZSBpZiAobCA9PT0gJ1YnKSB7XG4gICAgICAgIHRoaXNbaV1bMV0gPSAodGhpc1tpXVsxXSAtIGJveC55KSAqIGhlaWdodCAvIGJveC5oZWlnaHQgKyBib3gueTtcbiAgICAgIH0gZWxzZSBpZiAobCA9PT0gJ0MnIHx8IGwgPT09ICdTJyB8fCBsID09PSAnUScpIHtcbiAgICAgICAgdGhpc1tpXVsxXSA9ICh0aGlzW2ldWzFdIC0gYm94LngpICogd2lkdGggLyBib3gud2lkdGggKyBib3gueDtcbiAgICAgICAgdGhpc1tpXVsyXSA9ICh0aGlzW2ldWzJdIC0gYm94LnkpICogaGVpZ2h0IC8gYm94LmhlaWdodCArIGJveC55O1xuICAgICAgICB0aGlzW2ldWzNdID0gKHRoaXNbaV1bM10gLSBib3gueCkgKiB3aWR0aCAvIGJveC53aWR0aCArIGJveC54O1xuICAgICAgICB0aGlzW2ldWzRdID0gKHRoaXNbaV1bNF0gLSBib3gueSkgKiBoZWlnaHQgLyBib3guaGVpZ2h0ICsgYm94Lnk7XG5cbiAgICAgICAgaWYgKGwgPT09ICdDJykge1xuICAgICAgICAgIHRoaXNbaV1bNV0gPSAodGhpc1tpXVs1XSAtIGJveC54KSAqIHdpZHRoIC8gYm94LndpZHRoICsgYm94Lng7XG4gICAgICAgICAgdGhpc1tpXVs2XSA9ICh0aGlzW2ldWzZdIC0gYm94LnkpICogaGVpZ2h0IC8gYm94LmhlaWdodCArIGJveC55O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGwgPT09ICdBJykge1xuICAgICAgICAvLyByZXNpemUgcmFkaWlcbiAgICAgICAgdGhpc1tpXVsxXSA9IHRoaXNbaV1bMV0gKiB3aWR0aCAvIGJveC53aWR0aDtcbiAgICAgICAgdGhpc1tpXVsyXSA9IHRoaXNbaV1bMl0gKiBoZWlnaHQgLyBib3guaGVpZ2h0OyAvLyBtb3ZlIHBvc2l0aW9uIHZhbHVlc1xuXG4gICAgICAgIHRoaXNbaV1bNl0gPSAodGhpc1tpXVs2XSAtIGJveC54KSAqIHdpZHRoIC8gYm94LndpZHRoICsgYm94Lng7XG4gICAgICAgIHRoaXNbaV1bN10gPSAodGhpc1tpXVs3XSAtIGJveC55KSAqIGhlaWdodCAvIGJveC5oZWlnaHQgKyBib3gueTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBDb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9TdHJpbmcodGhpcyk7XG4gIH1cblxufVxuXG5jb25zdCBnZXRDbGFzc0ZvclR5cGUgPSB2YWx1ZSA9PiB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFNWR051bWJlcjtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGlmIChDb2xvci5pc0NvbG9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIENvbG9yO1xuICAgIH0gZWxzZSBpZiAoZGVsaW1pdGVyLnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gaXNQYXRoTGV0dGVyLnRlc3QodmFsdWUpID8gUGF0aEFycmF5IDogU1ZHQXJyYXk7XG4gICAgfSBlbHNlIGlmIChudW1iZXJBbmRVbml0LnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gU1ZHTnVtYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTm9uTW9ycGhhYmxlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb3JwaGFibGVUeXBlcy5pbmRleE9mKHZhbHVlLmNvbnN0cnVjdG9yKSA+IC0xKSB7XG4gICAgcmV0dXJuIHZhbHVlLmNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIFNWR0FycmF5O1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdEJhZztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTm9uTW9ycGhhYmxlO1xuICB9XG59O1xuXG5jbGFzcyBNb3JwaGFibGUge1xuICBjb25zdHJ1Y3RvcihzdGVwcGVyKSB7XG4gICAgdGhpcy5fc3RlcHBlciA9IHN0ZXBwZXIgfHwgbmV3IEVhc2UoJy0nKTtcbiAgICB0aGlzLl9mcm9tID0gbnVsbDtcbiAgICB0aGlzLl90byA9IG51bGw7XG4gICAgdGhpcy5fdHlwZSA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fbW9ycGhPYmogPSBudWxsO1xuICB9XG5cbiAgYXQocG9zKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vcnBoT2JqLm1vcnBoKHRoaXMuX2Zyb20sIHRoaXMuX3RvLCBwb3MsIHRoaXMuX3N0ZXBwZXIsIHRoaXMuX2NvbnRleHQpO1xuICB9XG5cbiAgZG9uZSgpIHtcbiAgICBjb25zdCBjb21wbGV0ZSA9IHRoaXMuX2NvbnRleHQubWFwKHRoaXMuX3N0ZXBwZXIuZG9uZSkucmVkdWNlKGZ1bmN0aW9uIChsYXN0LCBjdXJyKSB7XG4gICAgICByZXR1cm4gbGFzdCAmJiBjdXJyO1xuICAgIH0sIHRydWUpO1xuXG4gICAgcmV0dXJuIGNvbXBsZXRlO1xuICB9XG5cbiAgZnJvbSh2YWwpIHtcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mcm9tO1xuICAgIH1cblxuICAgIHRoaXMuX2Zyb20gPSB0aGlzLl9zZXQodmFsKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0ZXBwZXIoc3RlcHBlcikge1xuICAgIGlmIChzdGVwcGVyID09IG51bGwpIHJldHVybiB0aGlzLl9zdGVwcGVyO1xuICAgIHRoaXMuX3N0ZXBwZXIgPSBzdGVwcGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG8odmFsKSB7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG87XG4gICAgfVxuXG4gICAgdGhpcy5fdG8gPSB0aGlzLl9zZXQodmFsKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHR5cGUodHlwZSkge1xuICAgIC8vIGdldHRlclxuICAgIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH0gLy8gc2V0dGVyXG5cblxuICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgX3NldCh2YWx1ZSkge1xuICAgIGlmICghdGhpcy5fdHlwZSkge1xuICAgICAgdGhpcy50eXBlKGdldENsYXNzRm9yVHlwZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBuZXcgdGhpcy5fdHlwZSh2YWx1ZSk7XG5cbiAgICBpZiAodGhpcy5fdHlwZSA9PT0gQ29sb3IpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX3RvID8gcmVzdWx0W3RoaXMuX3RvWzRdXSgpIDogdGhpcy5fZnJvbSA/IHJlc3VsdFt0aGlzLl9mcm9tWzRdXSgpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90eXBlID09PSBPYmplY3RCYWcpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX3RvID8gcmVzdWx0LmFsaWduKHRoaXMuX3RvKSA6IHRoaXMuX2Zyb20gPyByZXN1bHQuYWxpZ24odGhpcy5fZnJvbSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gcmVzdWx0LnRvQ29uc3VtYWJsZSgpO1xuICAgIHRoaXMuX21vcnBoT2JqID0gdGhpcy5fbW9ycGhPYmogfHwgbmV3IHRoaXMuX3R5cGUoKTtcbiAgICB0aGlzLl9jb250ZXh0ID0gdGhpcy5fY29udGV4dCB8fCBBcnJheS5hcHBseShudWxsLCBBcnJheShyZXN1bHQubGVuZ3RoKSkubWFwKE9iamVjdCkubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICBvLmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG87XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG59XG5jbGFzcyBOb25Nb3JwaGFibGUge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdGhpcy5pbml0KC4uLmFyZ3MpO1xuICB9XG5cbiAgaW5pdCh2YWwpIHtcbiAgICB2YWwgPSBBcnJheS5pc0FycmF5KHZhbCkgPyB2YWxbMF0gOiB2YWw7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFt0aGlzLnZhbHVlXTtcbiAgfVxuXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cblxufVxuY2xhc3MgVHJhbnNmb3JtQmFnIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHRoaXMuaW5pdCguLi5hcmdzKTtcbiAgfVxuXG4gIGluaXQob2JqKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgb2JqID0ge1xuICAgICAgICBzY2FsZVg6IG9ialswXSxcbiAgICAgICAgc2NhbGVZOiBvYmpbMV0sXG4gICAgICAgIHNoZWFyOiBvYmpbMl0sXG4gICAgICAgIHJvdGF0ZTogb2JqWzNdLFxuICAgICAgICB0cmFuc2xhdGVYOiBvYmpbNF0sXG4gICAgICAgIHRyYW5zbGF0ZVk6IG9ials1XSxcbiAgICAgICAgb3JpZ2luWDogb2JqWzZdLFxuICAgICAgICBvcmlnaW5ZOiBvYmpbN11cbiAgICAgIH07XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBUcmFuc2Zvcm1CYWcuZGVmYXVsdHMsIG9iaik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIGNvbnN0IHYgPSB0aGlzO1xuICAgIHJldHVybiBbdi5zY2FsZVgsIHYuc2NhbGVZLCB2LnNoZWFyLCB2LnJvdGF0ZSwgdi50cmFuc2xhdGVYLCB2LnRyYW5zbGF0ZVksIHYub3JpZ2luWCwgdi5vcmlnaW5ZXTtcbiAgfVxuXG59XG5UcmFuc2Zvcm1CYWcuZGVmYXVsdHMgPSB7XG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxLFxuICBzaGVhcjogMCxcbiAgcm90YXRlOiAwLFxuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICBvcmlnaW5YOiAwLFxuICBvcmlnaW5ZOiAwXG59O1xuXG5jb25zdCBzb3J0QnlLZXkgPSAoYSwgYikgPT4ge1xuICByZXR1cm4gYVswXSA8IGJbMF0gPyAtMSA6IGFbMF0gPiBiWzBdID8gMSA6IDA7XG59O1xuXG5jbGFzcyBPYmplY3RCYWcge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdGhpcy5pbml0KC4uLmFyZ3MpO1xuICB9XG5cbiAgYWxpZ24ob3RoZXIpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblxuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICAvLyBJZiB0aGUgdHlwZSBpcyB0aGUgc2FtZSB3ZSBvbmx5IG5lZWQgdG8gY2hlY2sgaWYgdGhlIGNvbG9yIGlzIGluIHRoZSBjb3JyZWN0IGZvcm1hdFxuICAgICAgaWYgKHZhbHVlc1tpICsgMV0gPT09IG90aGVyW2kgKyAxXSkge1xuICAgICAgICBpZiAodmFsdWVzW2kgKyAxXSA9PT0gQ29sb3IgJiYgb3RoZXJbaSArIDddICE9PSB2YWx1ZXNbaSArIDddKSB7XG4gICAgICAgICAgY29uc3Qgc3BhY2UgPSBvdGhlcltpICsgN107XG4gICAgICAgICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IodGhpcy52YWx1ZXMuc3BsaWNlKGkgKyAzLCA1KSlbc3BhY2VdKCkudG9BcnJheSgpO1xuICAgICAgICAgIHRoaXMudmFsdWVzLnNwbGljZShpICsgMywgMCwgLi4uY29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSB2YWx1ZXNbaSArIDJdICsgMjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3RoZXJbaSArIDFdKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSAvLyBUaGUgdHlwZXMgZGlmZmVyLCBzbyB3ZSBvdmVyd3JpdGUgdGhlIG5ldyB0eXBlIHdpdGggdGhlIG9sZCBvbmVcbiAgICAgIC8vIEFuZCBpbml0aWFsaXplIGl0IHdpdGggdGhlIHR5cGVzIGRlZmF1bHQgKGUuZy4gYmxhY2sgZm9yIGNvbG9yIG9yIDAgZm9yIG51bWJlcilcblxuXG4gICAgICBjb25zdCBkZWZhdWx0T2JqZWN0ID0gbmV3IG90aGVyW2kgKyAxXSgpLnRvQXJyYXkoKTsgLy8gVGhhbiB3ZSBmaXggdGhlIHZhbHVlcyBhcnJheVxuXG4gICAgICBjb25zdCB0b0RlbGV0ZSA9IHZhbHVlc1tpICsgMl0gKyAzO1xuICAgICAgdmFsdWVzLnNwbGljZShpLCB0b0RlbGV0ZSwgb3RoZXJbaV0sIG90aGVyW2kgKyAxXSwgb3RoZXJbaSArIDJdLCAuLi5kZWZhdWx0T2JqZWN0KTtcbiAgICAgIGkgKz0gdmFsdWVzW2kgKyAyXSArIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpbml0KG9iak9yQXJyKSB7XG4gICAgdGhpcy52YWx1ZXMgPSBbXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iak9yQXJyKSkge1xuICAgICAgdGhpcy52YWx1ZXMgPSBvYmpPckFyci5zbGljZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9iak9yQXJyID0gb2JqT3JBcnIgfHwge307XG4gICAgY29uc3QgZW50cmllcyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBpIGluIG9iak9yQXJyKSB7XG4gICAgICBjb25zdCBUeXBlID0gZ2V0Q2xhc3NGb3JUeXBlKG9iak9yQXJyW2ldKTtcbiAgICAgIGNvbnN0IHZhbCA9IG5ldyBUeXBlKG9iak9yQXJyW2ldKS50b0FycmF5KCk7XG4gICAgICBlbnRyaWVzLnB1c2goW2ksIFR5cGUsIHZhbC5sZW5ndGgsIC4uLnZhbF0pO1xuICAgIH1cblxuICAgIGVudHJpZXMuc29ydChzb3J0QnlLZXkpO1xuICAgIHRoaXMudmFsdWVzID0gZW50cmllcy5yZWR1Y2UoKGxhc3QsIGN1cnIpID0+IGxhc3QuY29uY2F0KGN1cnIpLCBbXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcztcbiAgfVxuXG4gIHZhbHVlT2YoKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgY29uc3QgYXJyID0gdGhpcy52YWx1ZXM7IC8vIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHtcblxuICAgIHdoaWxlIChhcnIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBrZXkgPSBhcnIuc2hpZnQoKTtcbiAgICAgIGNvbnN0IFR5cGUgPSBhcnIuc2hpZnQoKTtcbiAgICAgIGNvbnN0IG51bSA9IGFyci5zaGlmdCgpO1xuICAgICAgY29uc3QgdmFsdWVzID0gYXJyLnNwbGljZSgwLCBudW0pO1xuICAgICAgb2JqW2tleV0gPSBuZXcgVHlwZSh2YWx1ZXMpOyAvLyAudmFsdWVPZigpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG59XG5jb25zdCBtb3JwaGFibGVUeXBlcyA9IFtOb25Nb3JwaGFibGUsIFRyYW5zZm9ybUJhZywgT2JqZWN0QmFnXTtcbmZ1bmN0aW9uIHJlZ2lzdGVyTW9ycGhhYmxlVHlwZSh0eXBlID0gW10pIHtcbiAgbW9ycGhhYmxlVHlwZXMucHVzaCguLi5bXS5jb25jYXQodHlwZSkpO1xufVxuZnVuY3Rpb24gbWFrZU1vcnBoYWJsZSgpIHtcbiAgZXh0ZW5kKG1vcnBoYWJsZVR5cGVzLCB7XG4gICAgdG8odmFsKSB7XG4gICAgICByZXR1cm4gbmV3IE1vcnBoYWJsZSgpLnR5cGUodGhpcy5jb25zdHJ1Y3RvcikuZnJvbSh0aGlzLnRvQXJyYXkoKSkgLy8gdGhpcy52YWx1ZU9mKCkpXG4gICAgICAudG8odmFsKTtcbiAgICB9LFxuXG4gICAgZnJvbUFycmF5KGFycikge1xuICAgICAgdGhpcy5pbml0KGFycik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgdG9Db25zdW1hYmxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpO1xuICAgIH0sXG5cbiAgICBtb3JwaChmcm9tLCB0bywgcG9zLCBzdGVwcGVyLCBjb250ZXh0KSB7XG4gICAgICBjb25zdCBtYXBwZXIgPSBmdW5jdGlvbiAoaSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RlcChpLCB0b1tpbmRleF0sIHBvcywgY29udGV4dFtpbmRleF0sIGNvbnRleHQpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHRoaXMuZnJvbUFycmF5KGZyb20ubWFwKG1hcHBlcikpO1xuICAgIH1cblxuICB9KTtcbn1cblxuY2xhc3MgUGF0aCBleHRlbmRzIFNoYXBlIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygncGF0aCcsIG5vZGUpLCBhdHRycyk7XG4gIH0gLy8gR2V0IGFycmF5XG5cblxuICBhcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFBhdGhBcnJheSh0aGlzLmF0dHIoJ2QnKSkpO1xuICB9IC8vIENsZWFyIGFycmF5IGNhY2hlXG5cblxuICBjbGVhcigpIHtcbiAgICBkZWxldGUgdGhpcy5fYXJyYXk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XG5cblxuICBoZWlnaHQoaGVpZ2h0KSB7XG4gICAgcmV0dXJuIGhlaWdodCA9PSBudWxsID8gdGhpcy5iYm94KCkuaGVpZ2h0IDogdGhpcy5zaXplKHRoaXMuYmJveCgpLndpZHRoLCBoZWlnaHQpO1xuICB9IC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXG5cblxuICBtb3ZlKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdkJywgdGhpcy5hcnJheSgpLm1vdmUoeCwgeSkpO1xuICB9IC8vIFBsb3QgbmV3IHBhdGhcblxuXG4gIHBsb3QoZCkge1xuICAgIHJldHVybiBkID09IG51bGwgPyB0aGlzLmFycmF5KCkgOiB0aGlzLmNsZWFyKCkuYXR0cignZCcsIHR5cGVvZiBkID09PSAnc3RyaW5nJyA/IGQgOiB0aGlzLl9hcnJheSA9IG5ldyBQYXRoQXJyYXkoZCkpO1xuICB9IC8vIFNldCBlbGVtZW50IHNpemUgdG8gZ2l2ZW4gd2lkdGggYW5kIGhlaWdodFxuXG5cbiAgc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignZCcsIHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KSk7XG4gIH0gLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcblxuXG4gIHdpZHRoKHdpZHRoKSB7XG4gICAgcmV0dXJuIHdpZHRoID09IG51bGwgPyB0aGlzLmJib3goKS53aWR0aCA6IHRoaXMuc2l6ZSh3aWR0aCwgdGhpcy5iYm94KCkuaGVpZ2h0KTtcbiAgfSAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHgtYXhpc1xuXG5cbiAgeCh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCA/IHRoaXMuYmJveCgpLnggOiB0aGlzLm1vdmUoeCwgdGhpcy5iYm94KCkueSk7XG4gIH0gLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXIgb3ZlciB5LWF4aXNcblxuXG4gIHkoeSkge1xuICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLmJib3goKS55IDogdGhpcy5tb3ZlKHRoaXMuYmJveCgpLngsIHkpO1xuICB9XG5cbn0gLy8gRGVmaW5lIG1vcnBoYWJsZSBhcnJheVxuXG5QYXRoLnByb3RvdHlwZS5Nb3JwaEFycmF5ID0gUGF0aEFycmF5OyAvLyBBZGQgcGFyZW50IG1ldGhvZFxuXG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgYSB3cmFwcGVkIHBhdGggZWxlbWVudFxuICAgIHBhdGg6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uIChkKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgcGxvdCBpcyBjYWxsZWQgYXMgYSBzZXR0ZXJcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgUGF0aCgpKS5wbG90KGQgfHwgbmV3IFBhdGhBcnJheSgpKTtcbiAgICB9KVxuICB9XG59KTtcbnJlZ2lzdGVyKFBhdGgsICdQYXRoJyk7XG5cbmZ1bmN0aW9uIGFycmF5KCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFBvaW50QXJyYXkodGhpcy5hdHRyKCdwb2ludHMnKSkpO1xufSAvLyBDbGVhciBhcnJheSBjYWNoZVxuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgZGVsZXRlIHRoaXMuX2FycmF5O1xuICByZXR1cm4gdGhpcztcbn0gLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXJcblxuZnVuY3Rpb24gbW92ZSQyKHgsIHkpIHtcbiAgcmV0dXJuIHRoaXMuYXR0cigncG9pbnRzJywgdGhpcy5hcnJheSgpLm1vdmUoeCwgeSkpO1xufSAvLyBQbG90IG5ldyBwYXRoXG5cbmZ1bmN0aW9uIHBsb3QocCkge1xuICByZXR1cm4gcCA9PSBudWxsID8gdGhpcy5hcnJheSgpIDogdGhpcy5jbGVhcigpLmF0dHIoJ3BvaW50cycsIHR5cGVvZiBwID09PSAnc3RyaW5nJyA/IHAgOiB0aGlzLl9hcnJheSA9IG5ldyBQb2ludEFycmF5KHApKTtcbn0gLy8gU2V0IGVsZW1lbnQgc2l6ZSB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0XG5cbmZ1bmN0aW9uIHNpemUkMSh3aWR0aCwgaGVpZ2h0KSB7XG4gIGNvbnN0IHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xuICByZXR1cm4gdGhpcy5hdHRyKCdwb2ludHMnLCB0aGlzLmFycmF5KCkuc2l6ZShwLndpZHRoLCBwLmhlaWdodCkpO1xufVxuXG52YXIgcG9seSA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhcnJheTogYXJyYXksXG4gIGNsZWFyOiBjbGVhcixcbiAgbW92ZTogbW92ZSQyLFxuICBwbG90OiBwbG90LFxuICBzaXplOiBzaXplJDFcbn07XG5cbmNsYXNzIFBvbHlnb24gZXh0ZW5kcyBTaGFwZSB7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ3BvbHlnb24nLCBub2RlKSwgYXR0cnMpO1xuICB9XG5cbn1cbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIENvbnRhaW5lcjoge1xuICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcG9seWdvbiBlbGVtZW50XG4gICAgcG9seWdvbjogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHApIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBQb2x5Z29uKCkpLnBsb3QocCB8fCBuZXcgUG9pbnRBcnJheSgpKTtcbiAgICB9KVxuICB9XG59KTtcbmV4dGVuZChQb2x5Z29uLCBwb2ludGVkKTtcbmV4dGVuZChQb2x5Z29uLCBwb2x5KTtcbnJlZ2lzdGVyKFBvbHlnb24sICdQb2x5Z29uJyk7XG5cbmNsYXNzIFBvbHlsaW5lIGV4dGVuZHMgU2hhcGUge1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdwb2x5bGluZScsIG5vZGUpLCBhdHRycyk7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBwb2x5Z29uIGVsZW1lbnRcbiAgICBwb2x5bGluZTogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHApIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBwbG90IGlzIGNhbGxlZCBhcyBhIHNldHRlclxuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBQb2x5bGluZSgpKS5wbG90KHAgfHwgbmV3IFBvaW50QXJyYXkoKSk7XG4gICAgfSlcbiAgfVxufSk7XG5leHRlbmQoUG9seWxpbmUsIHBvaW50ZWQpO1xuZXh0ZW5kKFBvbHlsaW5lLCBwb2x5KTtcbnJlZ2lzdGVyKFBvbHlsaW5lLCAnUG9seWxpbmUnKTtcblxuY2xhc3MgUmVjdCBleHRlbmRzIFNoYXBlIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygncmVjdCcsIG5vZGUpLCBhdHRycyk7XG4gIH1cblxufVxuZXh0ZW5kKFJlY3QsIHtcbiAgcngsXG4gIHJ5XG59KTtcbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIENvbnRhaW5lcjoge1xuICAgIC8vIENyZWF0ZSBhIHJlY3QgZWxlbWVudFxuICAgIHJlY3Q6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFJlY3QoKSkuc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KVxuICB9XG59KTtcbnJlZ2lzdGVyKFJlY3QsICdSZWN0Jyk7XG5cbmNsYXNzIFF1ZXVlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmlyc3QgPSBudWxsO1xuICAgIHRoaXMuX2xhc3QgPSBudWxsO1xuICB9IC8vIFNob3dzIHVzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0XG5cblxuICBmaXJzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlyc3QgJiYgdGhpcy5fZmlyc3QudmFsdWU7XG4gIH0gLy8gU2hvd3MgdXMgdGhlIGxhc3QgaXRlbSBpbiB0aGUgbGlzdFxuXG5cbiAgbGFzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdCAmJiB0aGlzLl9sYXN0LnZhbHVlO1xuICB9XG5cbiAgcHVzaCh2YWx1ZSkge1xuICAgIC8vIEFuIGl0ZW0gc3RvcmVzIGFuIGlkIGFuZCB0aGUgcHJvdmlkZWQgdmFsdWVcbiAgICBjb25zdCBpdGVtID0gdHlwZW9mIHZhbHVlLm5leHQgIT09ICd1bmRlZmluZWQnID8gdmFsdWUgOiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBuZXh0OiBudWxsLFxuICAgICAgcHJldjogbnVsbFxuICAgIH07IC8vIERlYWwgd2l0aCB0aGUgcXVldWUgYmVpbmcgZW1wdHkgb3IgcG9wdWxhdGVkXG5cbiAgICBpZiAodGhpcy5fbGFzdCkge1xuICAgICAgaXRlbS5wcmV2ID0gdGhpcy5fbGFzdDtcbiAgICAgIHRoaXMuX2xhc3QubmV4dCA9IGl0ZW07XG4gICAgICB0aGlzLl9sYXN0ID0gaXRlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGFzdCA9IGl0ZW07XG4gICAgICB0aGlzLl9maXJzdCA9IGl0ZW07XG4gICAgfSAvLyBSZXR1cm4gdGhlIGN1cnJlbnQgaXRlbVxuXG5cbiAgICByZXR1cm4gaXRlbTtcbiAgfSAvLyBSZW1vdmVzIHRoZSBpdGVtIHRoYXQgd2FzIHJldHVybmVkIGZyb20gdGhlIHB1c2hcblxuXG4gIHJlbW92ZShpdGVtKSB7XG4gICAgLy8gUmVsaW5rIHRoZSBwcmV2aW91cyBpdGVtXG4gICAgaWYgKGl0ZW0ucHJldikgaXRlbS5wcmV2Lm5leHQgPSBpdGVtLm5leHQ7XG4gICAgaWYgKGl0ZW0ubmV4dCkgaXRlbS5uZXh0LnByZXYgPSBpdGVtLnByZXY7XG4gICAgaWYgKGl0ZW0gPT09IHRoaXMuX2xhc3QpIHRoaXMuX2xhc3QgPSBpdGVtLnByZXY7XG4gICAgaWYgKGl0ZW0gPT09IHRoaXMuX2ZpcnN0KSB0aGlzLl9maXJzdCA9IGl0ZW0ubmV4dDsgLy8gSW52YWxpZGF0ZSBpdGVtXG5cbiAgICBpdGVtLnByZXYgPSBudWxsO1xuICAgIGl0ZW0ubmV4dCA9IG51bGw7XG4gIH1cblxuICBzaGlmdCgpIHtcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsdWVcbiAgICBjb25zdCByZW1vdmUgPSB0aGlzLl9maXJzdDtcbiAgICBpZiAoIXJlbW92ZSkgcmV0dXJuIG51bGw7IC8vIElmIHdlIGRvLCByZW1vdmUgaXQgYW5kIHJlbGluayB0aGluZ3NcblxuICAgIHRoaXMuX2ZpcnN0ID0gcmVtb3ZlLm5leHQ7XG4gICAgaWYgKHRoaXMuX2ZpcnN0KSB0aGlzLl9maXJzdC5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0ID0gdGhpcy5fZmlyc3QgPyB0aGlzLl9sYXN0IDogbnVsbDtcbiAgICByZXR1cm4gcmVtb3ZlLnZhbHVlO1xuICB9XG5cbn1cblxuY29uc3QgQW5pbWF0b3IgPSB7XG4gIG5leHREcmF3OiBudWxsLFxuICBmcmFtZXM6IG5ldyBRdWV1ZSgpLFxuICB0aW1lb3V0czogbmV3IFF1ZXVlKCksXG4gIGltbWVkaWF0ZXM6IG5ldyBRdWV1ZSgpLFxuICB0aW1lcjogKCkgPT4gZ2xvYmFscy53aW5kb3cucGVyZm9ybWFuY2UgfHwgZ2xvYmFscy53aW5kb3cuRGF0ZSxcbiAgdHJhbnNmb3JtczogW10sXG5cbiAgZnJhbWUoZm4pIHtcbiAgICAvLyBTdG9yZSB0aGUgbm9kZVxuICAgIGNvbnN0IG5vZGUgPSBBbmltYXRvci5mcmFtZXMucHVzaCh7XG4gICAgICBydW46IGZuXG4gICAgfSk7IC8vIFJlcXVlc3QgYW4gYW5pbWF0aW9uIGZyYW1lIGlmIHdlIGRvbid0IGhhdmUgb25lXG5cbiAgICBpZiAoQW5pbWF0b3IubmV4dERyYXcgPT09IG51bGwpIHtcbiAgICAgIEFuaW1hdG9yLm5leHREcmF3ID0gZ2xvYmFscy53aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKEFuaW1hdG9yLl9kcmF3KTtcbiAgICB9IC8vIFJldHVybiB0aGUgbm9kZSBzbyB3ZSBjYW4gcmVtb3ZlIGl0IGVhc2lseVxuXG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfSxcblxuICB0aW1lb3V0KGZuLCBkZWxheSkge1xuICAgIGRlbGF5ID0gZGVsYXkgfHwgMDsgLy8gV29yayBvdXQgd2hlbiB0aGUgZXZlbnQgc2hvdWxkIGZpcmVcblxuICAgIGNvbnN0IHRpbWUgPSBBbmltYXRvci50aW1lcigpLm5vdygpICsgZGVsYXk7IC8vIEFkZCB0aGUgdGltZW91dCB0byB0aGUgZW5kIG9mIHRoZSBxdWV1ZVxuXG4gICAgY29uc3Qgbm9kZSA9IEFuaW1hdG9yLnRpbWVvdXRzLnB1c2goe1xuICAgICAgcnVuOiBmbixcbiAgICAgIHRpbWU6IHRpbWVcbiAgICB9KTsgLy8gUmVxdWVzdCBhbm90aGVyIGFuaW1hdGlvbiBmcmFtZSBpZiB3ZSBuZWVkIG9uZVxuXG4gICAgaWYgKEFuaW1hdG9yLm5leHREcmF3ID09PSBudWxsKSB7XG4gICAgICBBbmltYXRvci5uZXh0RHJhdyA9IGdsb2JhbHMud2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShBbmltYXRvci5fZHJhdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH0sXG5cbiAgaW1tZWRpYXRlKGZuKSB7XG4gICAgLy8gQWRkIHRoZSBpbW1lZGlhdGUgZm4gdG8gdGhlIGVuZCBvZiB0aGUgcXVldWVcbiAgICBjb25zdCBub2RlID0gQW5pbWF0b3IuaW1tZWRpYXRlcy5wdXNoKGZuKTsgLy8gUmVxdWVzdCBhbm90aGVyIGFuaW1hdGlvbiBmcmFtZSBpZiB3ZSBuZWVkIG9uZVxuXG4gICAgaWYgKEFuaW1hdG9yLm5leHREcmF3ID09PSBudWxsKSB7XG4gICAgICBBbmltYXRvci5uZXh0RHJhdyA9IGdsb2JhbHMud2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShBbmltYXRvci5fZHJhdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH0sXG5cbiAgY2FuY2VsRnJhbWUobm9kZSkge1xuICAgIG5vZGUgIT0gbnVsbCAmJiBBbmltYXRvci5mcmFtZXMucmVtb3ZlKG5vZGUpO1xuICB9LFxuXG4gIGNsZWFyVGltZW91dChub2RlKSB7XG4gICAgbm9kZSAhPSBudWxsICYmIEFuaW1hdG9yLnRpbWVvdXRzLnJlbW92ZShub2RlKTtcbiAgfSxcblxuICBjYW5jZWxJbW1lZGlhdGUobm9kZSkge1xuICAgIG5vZGUgIT0gbnVsbCAmJiBBbmltYXRvci5pbW1lZGlhdGVzLnJlbW92ZShub2RlKTtcbiAgfSxcblxuICBfZHJhdyhub3cpIHtcbiAgICAvLyBSdW4gYWxsIHRoZSB0aW1lb3V0cyB3ZSBjYW4gcnVuLCBpZiB0aGV5IGFyZSBub3QgcmVhZHkgeWV0LCBhZGQgdGhlbVxuICAgIC8vIHRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlIGltbWVkaWF0ZWx5ISAoYmFkIHRpbWVvdXRzISEhIFtzYXJjYXNtXSlcbiAgICBsZXQgbmV4dFRpbWVvdXQgPSBudWxsO1xuICAgIGNvbnN0IGxhc3RUaW1lb3V0ID0gQW5pbWF0b3IudGltZW91dHMubGFzdCgpO1xuXG4gICAgd2hpbGUgKG5leHRUaW1lb3V0ID0gQW5pbWF0b3IudGltZW91dHMuc2hpZnQoKSkge1xuICAgICAgLy8gUnVuIHRoZSB0aW1lb3V0IGlmIGl0cyB0aW1lLCBvciBwdXNoIGl0IHRvIHRoZSBlbmRcbiAgICAgIGlmIChub3cgPj0gbmV4dFRpbWVvdXQudGltZSkge1xuICAgICAgICBuZXh0VGltZW91dC5ydW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEFuaW1hdG9yLnRpbWVvdXRzLnB1c2gobmV4dFRpbWVvdXQpO1xuICAgICAgfSAvLyBJZiB3ZSBoaXQgdGhlIGxhc3QgaXRlbSwgd2Ugc2hvdWxkIHN0b3Agc2hpZnRpbmcgb3V0IG1vcmUgaXRlbXNcblxuXG4gICAgICBpZiAobmV4dFRpbWVvdXQgPT09IGxhc3RUaW1lb3V0KSBicmVhaztcbiAgICB9IC8vIFJ1biBhbGwgb2YgdGhlIGFuaW1hdGlvbiBmcmFtZXNcblxuXG4gICAgbGV0IG5leHRGcmFtZSA9IG51bGw7XG4gICAgY29uc3QgbGFzdEZyYW1lID0gQW5pbWF0b3IuZnJhbWVzLmxhc3QoKTtcblxuICAgIHdoaWxlIChuZXh0RnJhbWUgIT09IGxhc3RGcmFtZSAmJiAobmV4dEZyYW1lID0gQW5pbWF0b3IuZnJhbWVzLnNoaWZ0KCkpKSB7XG4gICAgICBuZXh0RnJhbWUucnVuKG5vdyk7XG4gICAgfVxuXG4gICAgbGV0IG5leHRJbW1lZGlhdGUgPSBudWxsO1xuXG4gICAgd2hpbGUgKG5leHRJbW1lZGlhdGUgPSBBbmltYXRvci5pbW1lZGlhdGVzLnNoaWZ0KCkpIHtcbiAgICAgIG5leHRJbW1lZGlhdGUoKTtcbiAgICB9IC8vIElmIHdlIGhhdmUgcmVtYWluaW5nIHRpbWVvdXRzIG9yIGZyYW1lcywgZHJhdyB1bnRpbCB3ZSBkb24ndCBhbnltb3JlXG5cblxuICAgIEFuaW1hdG9yLm5leHREcmF3ID0gQW5pbWF0b3IudGltZW91dHMuZmlyc3QoKSB8fCBBbmltYXRvci5mcmFtZXMuZmlyc3QoKSA/IGdsb2JhbHMud2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShBbmltYXRvci5fZHJhdykgOiBudWxsO1xuICB9XG5cbn07XG5cbmNvbnN0IG1ha2VTY2hlZHVsZSA9IGZ1bmN0aW9uIChydW5uZXJJbmZvKSB7XG4gIGNvbnN0IHN0YXJ0ID0gcnVubmVySW5mby5zdGFydDtcbiAgY29uc3QgZHVyYXRpb24gPSBydW5uZXJJbmZvLnJ1bm5lci5kdXJhdGlvbigpO1xuICBjb25zdCBlbmQgPSBzdGFydCArIGR1cmF0aW9uO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgZW5kOiBlbmQsXG4gICAgcnVubmVyOiBydW5uZXJJbmZvLnJ1bm5lclxuICB9O1xufTtcblxuY29uc3QgZGVmYXVsdFNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdyA9IGdsb2JhbHMud2luZG93O1xuICByZXR1cm4gKHcucGVyZm9ybWFuY2UgfHwgdy5EYXRlKS5ub3coKTtcbn07XG5cbmNsYXNzIFRpbWVsaW5lIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAvLyBDb25zdHJ1Y3QgYSBuZXcgdGltZWxpbmUgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAgY29uc3RydWN0b3IodGltZVNvdXJjZSA9IGRlZmF1bHRTb3VyY2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3RpbWVTb3VyY2UgPSB0aW1lU291cmNlOyAvLyBTdG9yZSB0aGUgdGltaW5nIHZhcmlhYmxlc1xuXG4gICAgdGhpcy5fc3RhcnRUaW1lID0gMDtcbiAgICB0aGlzLl9zcGVlZCA9IDEuMDsgLy8gRGV0ZXJtaW5lcyBob3cgbG9uZyBhIHJ1bm5lciBpcyBob2xkIGluIG1lbW9yeS4gQ2FuIGJlIGEgZHQgb3IgdHJ1ZS9mYWxzZVxuXG4gICAgdGhpcy5fcGVyc2lzdCA9IDA7IC8vIEtlZXAgdHJhY2sgb2YgdGhlIHJ1bm5pbmcgYW5pbWF0aW9ucyBhbmQgdGhlaXIgc3RhcnRpbmcgcGFyYW1ldGVyc1xuXG4gICAgdGhpcy5fbmV4dEZyYW1lID0gbnVsbDtcbiAgICB0aGlzLl9wYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuX3J1bm5lcnMgPSBbXTtcbiAgICB0aGlzLl9ydW5uZXJJZHMgPSBbXTtcbiAgICB0aGlzLl9sYXN0UnVubmVySWQgPSAtMTtcbiAgICB0aGlzLl90aW1lID0gMDtcbiAgICB0aGlzLl9sYXN0U291cmNlVGltZSA9IDA7XG4gICAgdGhpcy5fbGFzdFN0ZXBUaW1lID0gMDsgLy8gTWFrZSBzdXJlIHRoYXQgc3RlcCBpcyBhbHdheXMgY2FsbGVkIGluIGNsYXNzIGNvbnRleHRcblxuICAgIHRoaXMuX3N0ZXAgPSB0aGlzLl9zdGVwRm4uYmluZCh0aGlzLCBmYWxzZSk7XG4gICAgdGhpcy5fc3RlcEltbWVkaWF0ZSA9IHRoaXMuX3N0ZXBGbi5iaW5kKHRoaXMsIHRydWUpO1xuICB9XG5cbiAgYWN0aXZlKCkge1xuICAgIHJldHVybiAhIXRoaXMuX25leHRGcmFtZTtcbiAgfVxuXG4gIGZpbmlzaCgpIHtcbiAgICAvLyBHbyB0byBlbmQgYW5kIHBhdXNlXG4gICAgdGhpcy50aW1lKHRoaXMuZ2V0RW5kVGltZU9mVGltZWxpbmUoKSArIDEpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlKCk7XG4gIH0gLy8gQ2FsY3VsYXRlcyB0aGUgZW5kIG9mIHRoZSB0aW1lbGluZVxuXG5cbiAgZ2V0RW5kVGltZSgpIHtcbiAgICBjb25zdCBsYXN0UnVubmVySW5mbyA9IHRoaXMuZ2V0TGFzdFJ1bm5lckluZm8oKTtcbiAgICBjb25zdCBsYXN0RHVyYXRpb24gPSBsYXN0UnVubmVySW5mbyA/IGxhc3RSdW5uZXJJbmZvLnJ1bm5lci5kdXJhdGlvbigpIDogMDtcbiAgICBjb25zdCBsYXN0U3RhcnRUaW1lID0gbGFzdFJ1bm5lckluZm8gPyBsYXN0UnVubmVySW5mby5zdGFydCA6IHRoaXMuX3RpbWU7XG4gICAgcmV0dXJuIGxhc3RTdGFydFRpbWUgKyBsYXN0RHVyYXRpb247XG4gIH1cblxuICBnZXRFbmRUaW1lT2ZUaW1lbGluZSgpIHtcbiAgICBjb25zdCBlbmRUaW1lcyA9IHRoaXMuX3J1bm5lcnMubWFwKGkgPT4gaS5zdGFydCArIGkucnVubmVyLmR1cmF0aW9uKCkpO1xuXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIC4uLmVuZFRpbWVzKTtcbiAgfVxuXG4gIGdldExhc3RSdW5uZXJJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLmdldFJ1bm5lckluZm9CeUlkKHRoaXMuX2xhc3RSdW5uZXJJZCk7XG4gIH1cblxuICBnZXRSdW5uZXJJbmZvQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLl9ydW5uZXJzW3RoaXMuX3J1bm5lcklkcy5pbmRleE9mKGlkKV0gfHwgbnVsbDtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRpbnVlKCk7XG4gIH1cblxuICBwZXJzaXN0KGR0T3JGb3JldmVyKSB7XG4gICAgaWYgKGR0T3JGb3JldmVyID09IG51bGwpIHJldHVybiB0aGlzLl9wZXJzaXN0O1xuICAgIHRoaXMuX3BlcnNpc3QgPSBkdE9yRm9yZXZlcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgLy8gTm93IG1ha2Ugc3VyZSB3ZSBhcmUgbm90IHBhdXNlZCBhbmQgY29udGludWUgdGhlIGFuaW1hdGlvblxuICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVRpbWUoKS5fY29udGludWUoKTtcbiAgfVxuXG4gIHJldmVyc2UoeWVzKSB7XG4gICAgY29uc3QgY3VycmVudFNwZWVkID0gdGhpcy5zcGVlZCgpO1xuICAgIGlmICh5ZXMgPT0gbnVsbCkgcmV0dXJuIHRoaXMuc3BlZWQoLWN1cnJlbnRTcGVlZCk7XG4gICAgY29uc3QgcG9zaXRpdmUgPSBNYXRoLmFicyhjdXJyZW50U3BlZWQpO1xuICAgIHJldHVybiB0aGlzLnNwZWVkKHllcyA/IC1wb3NpdGl2ZSA6IHBvc2l0aXZlKTtcbiAgfSAvLyBzY2hlZHVsZXMgYSBydW5uZXIgb24gdGhlIHRpbWVsaW5lXG5cblxuICBzY2hlZHVsZShydW5uZXIsIGRlbGF5LCB3aGVuKSB7XG4gICAgaWYgKHJ1bm5lciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVubmVycy5tYXAobWFrZVNjaGVkdWxlKTtcbiAgICB9IC8vIFRoZSBzdGFydCB0aW1lIGZvciB0aGUgbmV4dCBhbmltYXRpb24gY2FuIGVpdGhlciBiZSBnaXZlbiBleHBsaWNpdGx5LFxuICAgIC8vIGRlcml2ZWQgZnJvbSB0aGUgY3VycmVudCB0aW1lbGluZSB0aW1lIG9yIGl0IGNhbiBiZSByZWxhdGl2ZSB0byB0aGVcbiAgICAvLyBsYXN0IHN0YXJ0IHRpbWUgdG8gY2hhaW4gYW5pbWF0aW9ucyBkaXJlY3RseVxuXG5cbiAgICBsZXQgYWJzb2x1dGVTdGFydFRpbWUgPSAwO1xuICAgIGNvbnN0IGVuZFRpbWUgPSB0aGlzLmdldEVuZFRpbWUoKTtcbiAgICBkZWxheSA9IGRlbGF5IHx8IDA7IC8vIFdvcmsgb3V0IHdoZW4gdG8gc3RhcnQgdGhlIGFuaW1hdGlvblxuXG4gICAgaWYgKHdoZW4gPT0gbnVsbCB8fCB3aGVuID09PSAnbGFzdCcgfHwgd2hlbiA9PT0gJ2FmdGVyJykge1xuICAgICAgLy8gVGFrZSB0aGUgbGFzdCB0aW1lIGFuZCBpbmNyZW1lbnRcbiAgICAgIGFic29sdXRlU3RhcnRUaW1lID0gZW5kVGltZTtcbiAgICB9IGVsc2UgaWYgKHdoZW4gPT09ICdhYnNvbHV0ZScgfHwgd2hlbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgYWJzb2x1dGVTdGFydFRpbWUgPSBkZWxheTtcbiAgICAgIGRlbGF5ID0gMDtcbiAgICB9IGVsc2UgaWYgKHdoZW4gPT09ICdub3cnKSB7XG4gICAgICBhYnNvbHV0ZVN0YXJ0VGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfSBlbHNlIGlmICh3aGVuID09PSAncmVsYXRpdmUnKSB7XG4gICAgICBjb25zdCBydW5uZXJJbmZvID0gdGhpcy5nZXRSdW5uZXJJbmZvQnlJZChydW5uZXIuaWQpO1xuXG4gICAgICBpZiAocnVubmVySW5mbykge1xuICAgICAgICBhYnNvbHV0ZVN0YXJ0VGltZSA9IHJ1bm5lckluZm8uc3RhcnQgKyBkZWxheTtcbiAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAod2hlbiA9PT0gJ3dpdGgtbGFzdCcpIHtcbiAgICAgIGNvbnN0IGxhc3RSdW5uZXJJbmZvID0gdGhpcy5nZXRMYXN0UnVubmVySW5mbygpO1xuICAgICAgY29uc3QgbGFzdFN0YXJ0VGltZSA9IGxhc3RSdW5uZXJJbmZvID8gbGFzdFJ1bm5lckluZm8uc3RhcnQgOiB0aGlzLl90aW1lO1xuICAgICAgYWJzb2x1dGVTdGFydFRpbWUgPSBsYXN0U3RhcnRUaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIHRoZSBcIndoZW5cIiBwYXJhbWV0ZXInKTtcbiAgICB9IC8vIE1hbmFnZSBydW5uZXJcblxuXG4gICAgcnVubmVyLnVuc2NoZWR1bGUoKTtcbiAgICBydW5uZXIudGltZWxpbmUodGhpcyk7XG4gICAgY29uc3QgcGVyc2lzdCA9IHJ1bm5lci5wZXJzaXN0KCk7XG4gICAgY29uc3QgcnVubmVySW5mbyA9IHtcbiAgICAgIHBlcnNpc3Q6IHBlcnNpc3QgPT09IG51bGwgPyB0aGlzLl9wZXJzaXN0IDogcGVyc2lzdCxcbiAgICAgIHN0YXJ0OiBhYnNvbHV0ZVN0YXJ0VGltZSArIGRlbGF5LFxuICAgICAgcnVubmVyXG4gICAgfTtcbiAgICB0aGlzLl9sYXN0UnVubmVySWQgPSBydW5uZXIuaWQ7XG5cbiAgICB0aGlzLl9ydW5uZXJzLnB1c2gocnVubmVySW5mbyk7XG5cbiAgICB0aGlzLl9ydW5uZXJzLnNvcnQoKGEsIGIpID0+IGEuc3RhcnQgLSBiLnN0YXJ0KTtcblxuICAgIHRoaXMuX3J1bm5lcklkcyA9IHRoaXMuX3J1bm5lcnMubWFwKGluZm8gPT4gaW5mby5ydW5uZXIuaWQpO1xuXG4gICAgdGhpcy51cGRhdGVUaW1lKCkuX2NvbnRpbnVlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNlZWsoZHQpIHtcbiAgICByZXR1cm4gdGhpcy50aW1lKHRoaXMuX3RpbWUgKyBkdCk7XG4gIH1cblxuICBzb3VyY2UoZm4pIHtcbiAgICBpZiAoZm4gPT0gbnVsbCkgcmV0dXJuIHRoaXMuX3RpbWVTb3VyY2U7XG4gICAgdGhpcy5fdGltZVNvdXJjZSA9IGZuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3BlZWQoc3BlZWQpIHtcbiAgICBpZiAoc3BlZWQgPT0gbnVsbCkgcmV0dXJuIHRoaXMuX3NwZWVkO1xuICAgIHRoaXMuX3NwZWVkID0gc3BlZWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIC8vIEdvIHRvIHN0YXJ0IGFuZCBwYXVzZVxuICAgIHRoaXMudGltZSgwKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZSgpO1xuICB9XG5cbiAgdGltZSh0aW1lKSB7XG4gICAgaWYgKHRpbWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMuX3RpbWU7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRpbnVlKHRydWUpO1xuICB9IC8vIFJlbW92ZSB0aGUgcnVubmVyIGZyb20gdGhpcyB0aW1lbGluZVxuXG5cbiAgdW5zY2hlZHVsZShydW5uZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX3J1bm5lcklkcy5pbmRleE9mKHJ1bm5lci5pZCk7XG5cbiAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMuX3J1bm5lcnMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHRoaXMuX3J1bm5lcklkcy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgcnVubmVyLnRpbWVsaW5lKG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIE1ha2VzIHN1cmUsIHRoYXQgYWZ0ZXIgcGF1c2luZyB0aGUgdGltZSBkb2Vzbid0IGp1bXBcblxuXG4gIHVwZGF0ZVRpbWUoKSB7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZSgpKSB7XG4gICAgICB0aGlzLl9sYXN0U291cmNlVGltZSA9IHRoaXMuX3RpbWVTb3VyY2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBDaGVja3MgaWYgd2UgYXJlIHJ1bm5pbmcgYW5kIGNvbnRpbnVlcyB0aGUgYW5pbWF0aW9uXG5cblxuICBfY29udGludWUoaW1tZWRpYXRlU3RlcCA9IGZhbHNlKSB7XG4gICAgQW5pbWF0b3IuY2FuY2VsRnJhbWUodGhpcy5fbmV4dEZyYW1lKTtcbiAgICB0aGlzLl9uZXh0RnJhbWUgPSBudWxsO1xuICAgIGlmIChpbW1lZGlhdGVTdGVwKSByZXR1cm4gdGhpcy5fc3RlcEltbWVkaWF0ZSgpO1xuICAgIGlmICh0aGlzLl9wYXVzZWQpIHJldHVybiB0aGlzO1xuICAgIHRoaXMuX25leHRGcmFtZSA9IEFuaW1hdG9yLmZyYW1lKHRoaXMuX3N0ZXApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgX3N0ZXBGbihpbW1lZGlhdGVTdGVwID0gZmFsc2UpIHtcbiAgICAvLyBHZXQgdGhlIHRpbWUgZGVsdGEgZnJvbSB0aGUgbGFzdCB0aW1lIGFuZCB1cGRhdGUgdGhlIHRpbWVcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fdGltZVNvdXJjZSgpO1xuXG4gICAgbGV0IGR0U291cmNlID0gdGltZSAtIHRoaXMuX2xhc3RTb3VyY2VUaW1lO1xuICAgIGlmIChpbW1lZGlhdGVTdGVwKSBkdFNvdXJjZSA9IDA7XG4gICAgY29uc3QgZHRUaW1lID0gdGhpcy5fc3BlZWQgKiBkdFNvdXJjZSArICh0aGlzLl90aW1lIC0gdGhpcy5fbGFzdFN0ZXBUaW1lKTtcbiAgICB0aGlzLl9sYXN0U291cmNlVGltZSA9IHRpbWU7IC8vIE9ubHkgdXBkYXRlIHRoZSB0aW1lIGlmIHdlIHVzZSB0aGUgdGltZVNvdXJjZS5cbiAgICAvLyBPdGhlcndpc2UgdXNlIHRoZSBjdXJyZW50IHRpbWVcblxuICAgIGlmICghaW1tZWRpYXRlU3RlcCkge1xuICAgICAgLy8gVXBkYXRlIHRoZSB0aW1lXG4gICAgICB0aGlzLl90aW1lICs9IGR0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aGlzLl90aW1lIDwgMCA/IDAgOiB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3RTdGVwVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgdGhpcy5maXJlKCd0aW1lJywgdGhpcy5fdGltZSk7IC8vIFRoaXMgaXMgZm9yIHRoZSBjYXNlIHRoYXQgdGhlIHRpbWVsaW5lIHdhcyBzZWVrZWQgc28gdGhhdCB0aGUgdGltZVxuICAgIC8vIGlzIG5vdyBiZWZvcmUgdGhlIHN0YXJ0VGltZSBvZiB0aGUgcnVubmVyLiBUaGF0cyB3aHkgd2UgbmVlZCB0byBzZXRcbiAgICAvLyB0aGUgcnVubmVyIHRvIHBvc2l0aW9uIDBcbiAgICAvLyBGSVhNRTpcbiAgICAvLyBIb3dldmVyLCByZXNldGluZyBpbiBpbnNlcnRpb24gb3JkZXIgbGVhZHMgdG8gYnVncy4gQ29uc2lkZXJpbmcgdGhlIGNhc2UsXG4gICAgLy8gd2hlcmUgMiBydW5uZXJzIGNoYW5nZSB0aGUgc2FtZSBhdHRyaWJ1dGUgYnV0IGluIGRpZmZlcmVudCB0aW1lcyxcbiAgICAvLyByZXNldGluZyBib3RoIG9mIHRoZW0gd2lsbCBsZWFkIHRvIHRoZSBjYXNlIHdoZXJlIHRoZSBsYXRlciBkZWZpbmVkXG4gICAgLy8gcnVubmVyIGFsd2F5cyB3aW5zIHRoZSByZXNldCBldmVuIGlmIHRoZSBvdGhlciBydW5uZXIgc3RhcnRlZCBlYXJsaWVyXG4gICAgLy8gYW5kIHRoZXJlZm9yZSBzaG91bGQgd2luIHRoZSBhdHRyaWJ1dGUgYmF0dGxlXG4gICAgLy8gdGhpcyBjYW4gYmUgc29sdmVkIGJ5IHJlc2V0aW5nIHRoZW0gYmFja3dhcmRzXG5cbiAgICBmb3IgKGxldCBrID0gdGhpcy5fcnVubmVycy5sZW5ndGg7IGstLTspIHtcbiAgICAgIC8vIEdldCBhbmQgcnVuIHRoZSBjdXJyZW50IHJ1bm5lciBhbmQgaWdub3JlIGl0IGlmIGl0cyBpbmFjdGl2ZVxuICAgICAgY29uc3QgcnVubmVySW5mbyA9IHRoaXMuX3J1bm5lcnNba107XG4gICAgICBjb25zdCBydW5uZXIgPSBydW5uZXJJbmZvLnJ1bm5lcjsgLy8gTWFrZSBzdXJlIHRoYXQgd2UgZ2l2ZSB0aGUgYWN0dWFsIGRpZmZlcmVuY2VcbiAgICAgIC8vIGJldHdlZW4gcnVubmVyIHN0YXJ0IHRpbWUgYW5kIG5vd1xuXG4gICAgICBjb25zdCBkdFRvU3RhcnQgPSB0aGlzLl90aW1lIC0gcnVubmVySW5mby5zdGFydDsgLy8gRG9udCBydW4gcnVubmVyIGlmIG5vdCBzdGFydGVkIHlldFxuICAgICAgLy8gYW5kIHRyeSB0byByZXNldCBpdFxuXG4gICAgICBpZiAoZHRUb1N0YXJ0IDw9IDApIHtcbiAgICAgICAgcnVubmVyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfSAvLyBSdW4gYWxsIG9mIHRoZSBydW5uZXJzIGRpcmVjdGx5XG5cblxuICAgIGxldCBydW5uZXJzTGVmdCA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX3J1bm5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vIEdldCBhbmQgcnVuIHRoZSBjdXJyZW50IHJ1bm5lciBhbmQgaWdub3JlIGl0IGlmIGl0cyBpbmFjdGl2ZVxuICAgICAgY29uc3QgcnVubmVySW5mbyA9IHRoaXMuX3J1bm5lcnNbaV07XG4gICAgICBjb25zdCBydW5uZXIgPSBydW5uZXJJbmZvLnJ1bm5lcjtcbiAgICAgIGxldCBkdCA9IGR0VGltZTsgLy8gTWFrZSBzdXJlIHRoYXQgd2UgZ2l2ZSB0aGUgYWN0dWFsIGRpZmZlcmVuY2VcbiAgICAgIC8vIGJldHdlZW4gcnVubmVyIHN0YXJ0IHRpbWUgYW5kIG5vd1xuXG4gICAgICBjb25zdCBkdFRvU3RhcnQgPSB0aGlzLl90aW1lIC0gcnVubmVySW5mby5zdGFydDsgLy8gRG9udCBydW4gcnVubmVyIGlmIG5vdCBzdGFydGVkIHlldFxuXG4gICAgICBpZiAoZHRUb1N0YXJ0IDw9IDApIHtcbiAgICAgICAgcnVubmVyc0xlZnQgPSB0cnVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoZHRUb1N0YXJ0IDwgZHQpIHtcbiAgICAgICAgLy8gQWRqdXN0IGR0IHRvIG1ha2Ugc3VyZSB0aGF0IGFuaW1hdGlvbiBpcyBvbiBwb2ludFxuICAgICAgICBkdCA9IGR0VG9TdGFydDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFydW5uZXIuYWN0aXZlKCkpIGNvbnRpbnVlOyAvLyBJZiB0aGlzIHJ1bm5lciBpcyBzdGlsbCBnb2luZywgc2lnbmFsIHRoYXQgd2UgbmVlZCBhbm90aGVyIGFuaW1hdGlvblxuICAgICAgLy8gZnJhbWUsIG90aGVyd2lzZSwgcmVtb3ZlIHRoZSBjb21wbGV0ZWQgcnVubmVyXG5cbiAgICAgIGNvbnN0IGZpbmlzaGVkID0gcnVubmVyLnN0ZXAoZHQpLmRvbmU7XG5cbiAgICAgIGlmICghZmluaXNoZWQpIHtcbiAgICAgICAgcnVubmVyc0xlZnQgPSB0cnVlOyAvLyBjb250aW51ZVxuICAgICAgfSBlbHNlIGlmIChydW5uZXJJbmZvLnBlcnNpc3QgIT09IHRydWUpIHtcbiAgICAgICAgLy8gcnVubmVyIGlzIGZpbmlzaGVkLiBBbmQgcnVubmVyIG1pZ2h0IGdldCByZW1vdmVkXG4gICAgICAgIGNvbnN0IGVuZFRpbWUgPSBydW5uZXIuZHVyYXRpb24oKSAtIHJ1bm5lci50aW1lKCkgKyB0aGlzLl90aW1lO1xuXG4gICAgICAgIGlmIChlbmRUaW1lICsgcnVubmVySW5mby5wZXJzaXN0IDwgdGhpcy5fdGltZSkge1xuICAgICAgICAgIC8vIERlbGV0ZSBydW5uZXIgYW5kIGNvcnJlY3QgaW5kZXhcbiAgICAgICAgICBydW5uZXIudW5zY2hlZHVsZSgpO1xuICAgICAgICAgIC0taTtcbiAgICAgICAgICAtLWxlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gQmFzaWNhbGx5OiB3ZSBjb250aW51ZSB3aGVuIHRoZXJlIGFyZSBydW5uZXJzIHJpZ2h0IGZyb20gdXMgaW4gdGltZVxuICAgIC8vIHdoZW4gLS0+LCBhbmQgd2hlbiBydW5uZXJzIGFyZSBsZWZ0IGZyb20gdXMgd2hlbiA8LS1cblxuXG4gICAgaWYgKHJ1bm5lcnNMZWZ0ICYmICEodGhpcy5fc3BlZWQgPCAwICYmIHRoaXMuX3RpbWUgPT09IDApIHx8IHRoaXMuX3J1bm5lcklkcy5sZW5ndGggJiYgdGhpcy5fc3BlZWQgPCAwICYmIHRoaXMuX3RpbWUgPiAwKSB7XG4gICAgICB0aGlzLl9jb250aW51ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLmZpcmUoJ2ZpbmlzaGVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgRWxlbWVudDoge1xuICAgIHRpbWVsaW5lOiBmdW5jdGlvbiAodGltZWxpbmUpIHtcbiAgICAgIGlmICh0aW1lbGluZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RpbWVsaW5lID0gdGhpcy5fdGltZWxpbmUgfHwgbmV3IFRpbWVsaW5lKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lbGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3RpbWVsaW5lID0gdGltZWxpbmU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbmNsYXNzIFJ1bm5lciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7IC8vIFN0b3JlIGEgdW5pcXVlIGlkIG9uIHRoZSBydW5uZXIsIHNvIHRoYXQgd2UgY2FuIGlkZW50aWZ5IGl0IGxhdGVyXG5cbiAgICB0aGlzLmlkID0gUnVubmVyLmlkKys7IC8vIEVuc3VyZSBhIGRlZmF1bHQgdmFsdWVcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zID09IG51bGwgPyB0aW1lbGluZS5kdXJhdGlvbiA6IG9wdGlvbnM7IC8vIEVuc3VyZSB0aGF0IHdlIGdldCBhIGNvbnRyb2xsZXJcblxuICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBDb250cm9sbGVyKG9wdGlvbnMpIDogb3B0aW9uczsgLy8gRGVjbGFyZSBhbGwgb2YgdGhlIHZhcmlhYmxlc1xuXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5fdGltZWxpbmUgPSBudWxsO1xuICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX3F1ZXVlID0gW107IC8vIFdvcmsgb3V0IHRoZSBzdGVwcGVyIGFuZCB0aGUgZHVyYXRpb25cblxuICAgIHRoaXMuX2R1cmF0aW9uID0gdHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInICYmIG9wdGlvbnM7XG4gICAgdGhpcy5faXNEZWNsYXJhdGl2ZSA9IG9wdGlvbnMgaW5zdGFuY2VvZiBDb250cm9sbGVyO1xuICAgIHRoaXMuX3N0ZXBwZXIgPSB0aGlzLl9pc0RlY2xhcmF0aXZlID8gb3B0aW9ucyA6IG5ldyBFYXNlKCk7IC8vIFdlIGNvcHkgdGhlIGN1cnJlbnQgdmFsdWVzIGZyb20gdGhlIHRpbWVsaW5lIGJlY2F1c2UgdGhleSBjYW4gY2hhbmdlXG5cbiAgICB0aGlzLl9oaXN0b3J5ID0ge307IC8vIFN0b3JlIHRoZSBzdGF0ZSBvZiB0aGUgcnVubmVyXG5cbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuX3RpbWUgPSAwO1xuICAgIHRoaXMuX2xhc3RUaW1lID0gMDsgLy8gQXQgY3JlYXRpb24sIHRoZSBydW5uZXIgaXMgaW4gcmVzZXRlZCBzdGF0ZVxuXG4gICAgdGhpcy5fcmVzZXRlZCA9IHRydWU7IC8vIFNhdmUgdHJhbnNmb3JtcyBhcHBsaWVkIHRvIHRoaXMgcnVubmVyXG5cbiAgICB0aGlzLnRyYW5zZm9ybXMgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy50cmFuc2Zvcm1JZCA9IDE7IC8vIExvb3BpbmcgdmFyaWFibGVzXG5cbiAgICB0aGlzLl9oYXZlUmV2ZXJzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZXZlcnNlID0gZmFsc2U7XG4gICAgdGhpcy5fbG9vcHNEb25lID0gMDtcbiAgICB0aGlzLl9zd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dhaXQgPSAwO1xuICAgIHRoaXMuX3RpbWVzID0gMTtcbiAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDsgLy8gU3RvcmVzIGhvdyBsb25nIGEgcnVubmVyIGlzIHN0b3JlZCBhZnRlciBiZWVpbmcgZG9uZVxuXG4gICAgdGhpcy5fcGVyc2lzdCA9IHRoaXMuX2lzRGVjbGFyYXRpdmUgPyB0cnVlIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBzYW5pdGlzZShkdXJhdGlvbiwgZGVsYXksIHdoZW4pIHtcbiAgICAvLyBJbml0aWFsaXNlIHRoZSBkZWZhdWx0IHBhcmFtZXRlcnNcbiAgICBsZXQgdGltZXMgPSAxO1xuICAgIGxldCBzd2luZyA9IGZhbHNlO1xuICAgIGxldCB3YWl0ID0gMDtcbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IHRpbWVsaW5lLmR1cmF0aW9uO1xuICAgIGRlbGF5ID0gZGVsYXkgfHwgdGltZWxpbmUuZGVsYXk7XG4gICAgd2hlbiA9IHdoZW4gfHwgJ2xhc3QnOyAvLyBJZiB3ZSBoYXZlIGFuIG9iamVjdCwgdW5wYWNrIHRoZSB2YWx1ZXNcblxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICEoZHVyYXRpb24gaW5zdGFuY2VvZiBTdGVwcGVyKSkge1xuICAgICAgZGVsYXkgPSBkdXJhdGlvbi5kZWxheSB8fCBkZWxheTtcbiAgICAgIHdoZW4gPSBkdXJhdGlvbi53aGVuIHx8IHdoZW47XG4gICAgICBzd2luZyA9IGR1cmF0aW9uLnN3aW5nIHx8IHN3aW5nO1xuICAgICAgdGltZXMgPSBkdXJhdGlvbi50aW1lcyB8fCB0aW1lcztcbiAgICAgIHdhaXQgPSBkdXJhdGlvbi53YWl0IHx8IHdhaXQ7XG4gICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uLmR1cmF0aW9uIHx8IHRpbWVsaW5lLmR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBzd2luZzogc3dpbmcsXG4gICAgICB0aW1lczogdGltZXMsXG4gICAgICB3YWl0OiB3YWl0LFxuICAgICAgd2hlbjogd2hlblxuICAgIH07XG4gIH1cblxuICBhY3RpdmUoZW5hYmxlZCkge1xuICAgIGlmIChlbmFibGVkID09IG51bGwpIHJldHVybiB0aGlzLmVuYWJsZWQ7XG4gICAgdGhpcy5lbmFibGVkID0gZW5hYmxlZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKlxyXG4gIFByaXZhdGUgTWV0aG9kc1xyXG4gID09PT09PT09PT09PT09PVxyXG4gIE1ldGhvZHMgdGhhdCBzaG91bGRuJ3QgYmUgdXNlZCBleHRlcm5hbGx5XHJcbiAgKi9cblxuXG4gIGFkZFRyYW5zZm9ybSh0cmFuc2Zvcm0sIGluZGV4KSB7XG4gICAgdGhpcy50cmFuc2Zvcm1zLmxtdWx0aXBseU8odHJhbnNmb3JtKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFmdGVyKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMub24oJ2ZpbmlzaGVkJywgZm4pO1xuICB9XG5cbiAgYW5pbWF0ZShkdXJhdGlvbiwgZGVsYXksIHdoZW4pIHtcbiAgICBjb25zdCBvID0gUnVubmVyLnNhbml0aXNlKGR1cmF0aW9uLCBkZWxheSwgd2hlbik7XG4gICAgY29uc3QgcnVubmVyID0gbmV3IFJ1bm5lcihvLmR1cmF0aW9uKTtcbiAgICBpZiAodGhpcy5fdGltZWxpbmUpIHJ1bm5lci50aW1lbGluZSh0aGlzLl90aW1lbGluZSk7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQpIHJ1bm5lci5lbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgIHJldHVybiBydW5uZXIubG9vcChvKS5zY2hlZHVsZShvLmRlbGF5LCBvLndoZW4pO1xuICB9XG5cbiAgY2xlYXJUcmFuc2Zvcm0oKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1zID0gbmV3IE1hdHJpeCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFRPRE86IEtlZXAgdHJhY2sgb2YgYWxsIHRyYW5zZm9ybWF0aW9ucyBzbyB0aGF0IGRlbGV0aW9uIGlzIGZhc3RlclxuXG5cbiAgY2xlYXJUcmFuc2Zvcm1zRnJvbVF1ZXVlKCkge1xuICAgIGlmICghdGhpcy5kb25lIHx8ICF0aGlzLl90aW1lbGluZSB8fCAhdGhpcy5fdGltZWxpbmUuX3J1bm5lcklkcy5pbmNsdWRlcyh0aGlzLmlkKSkge1xuICAgICAgdGhpcy5fcXVldWUgPSB0aGlzLl9xdWV1ZS5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiAhaXRlbS5pc1RyYW5zZm9ybTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRlbGF5KGRlbGF5KSB7XG4gICAgcmV0dXJuIHRoaXMuYW5pbWF0ZSgwLCBkZWxheSk7XG4gIH1cblxuICBkdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZXMgKiAodGhpcy5fd2FpdCArIHRoaXMuX2R1cmF0aW9uKSAtIHRoaXMuX3dhaXQ7XG4gIH1cblxuICBkdXJpbmcoZm4pIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZShudWxsLCBmbik7XG4gIH1cblxuICBlYXNlKGZuKSB7XG4gICAgdGhpcy5fc3RlcHBlciA9IG5ldyBFYXNlKGZuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKlxyXG4gIFJ1bm5lciBEZWZpbml0aW9uc1xyXG4gID09PT09PT09PT09PT09PT09PVxyXG4gIFRoZXNlIG1ldGhvZHMgaGVscCB1cyBkZWZpbmUgdGhlIHJ1bnRpbWUgYmVoYXZpb3VyIG9mIHRoZSBSdW5uZXIgb3IgdGhleVxyXG4gIGhlbHAgdXMgbWFrZSBuZXcgcnVubmVycyBmcm9tIHRoZSBjdXJyZW50IHJ1bm5lclxyXG4gICovXG5cblxuICBlbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcblxuICAgIGVsZW1lbnQuX3ByZXBhcmVSdW5uZXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmluaXNoKCkge1xuICAgIHJldHVybiB0aGlzLnN0ZXAoSW5maW5pdHkpO1xuICB9XG5cbiAgbG9vcCh0aW1lcywgc3dpbmcsIHdhaXQpIHtcbiAgICAvLyBEZWFsIHdpdGggdGhlIHVzZXIgcGFzc2luZyBpbiBhbiBvYmplY3RcbiAgICBpZiAodHlwZW9mIHRpbWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgc3dpbmcgPSB0aW1lcy5zd2luZztcbiAgICAgIHdhaXQgPSB0aW1lcy53YWl0O1xuICAgICAgdGltZXMgPSB0aW1lcy50aW1lcztcbiAgICB9IC8vIFNhbml0aXNlIHRoZSB2YWx1ZXMgYW5kIHN0b3JlIHRoZW1cblxuXG4gICAgdGhpcy5fdGltZXMgPSB0aW1lcyB8fCBJbmZpbml0eTtcbiAgICB0aGlzLl9zd2luZyA9IHN3aW5nIHx8IGZhbHNlO1xuICAgIHRoaXMuX3dhaXQgPSB3YWl0IHx8IDA7IC8vIEFsbG93IHRydWUgdG8gYmUgcGFzc2VkXG5cbiAgICBpZiAodGhpcy5fdGltZXMgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuX3RpbWVzID0gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsb29wcyhwKSB7XG4gICAgY29uc3QgbG9vcER1cmF0aW9uID0gdGhpcy5fZHVyYXRpb24gKyB0aGlzLl93YWl0O1xuXG4gICAgaWYgKHAgPT0gbnVsbCkge1xuICAgICAgY29uc3QgbG9vcHNEb25lID0gTWF0aC5mbG9vcih0aGlzLl90aW1lIC8gbG9vcER1cmF0aW9uKTtcbiAgICAgIGNvbnN0IHJlbGF0aXZlVGltZSA9IHRoaXMuX3RpbWUgLSBsb29wc0RvbmUgKiBsb29wRHVyYXRpb247XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHJlbGF0aXZlVGltZSAvIHRoaXMuX2R1cmF0aW9uO1xuICAgICAgcmV0dXJuIE1hdGgubWluKGxvb3BzRG9uZSArIHBvc2l0aW9uLCB0aGlzLl90aW1lcyk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2hvbGUgPSBNYXRoLmZsb29yKHApO1xuICAgIGNvbnN0IHBhcnRpYWwgPSBwICUgMTtcbiAgICBjb25zdCB0aW1lID0gbG9vcER1cmF0aW9uICogd2hvbGUgKyB0aGlzLl9kdXJhdGlvbiAqIHBhcnRpYWw7XG4gICAgcmV0dXJuIHRoaXMudGltZSh0aW1lKTtcbiAgfVxuXG4gIHBlcnNpc3QoZHRPckZvcmV2ZXIpIHtcbiAgICBpZiAoZHRPckZvcmV2ZXIgPT0gbnVsbCkgcmV0dXJuIHRoaXMuX3BlcnNpc3Q7XG4gICAgdGhpcy5fcGVyc2lzdCA9IGR0T3JGb3JldmVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcG9zaXRpb24ocCkge1xuICAgIC8vIEdldCBhbGwgb2YgdGhlIHZhcmlhYmxlcyB3ZSBuZWVkXG4gICAgY29uc3QgeCA9IHRoaXMuX3RpbWU7XG4gICAgY29uc3QgZCA9IHRoaXMuX2R1cmF0aW9uO1xuICAgIGNvbnN0IHcgPSB0aGlzLl93YWl0O1xuICAgIGNvbnN0IHQgPSB0aGlzLl90aW1lcztcbiAgICBjb25zdCBzID0gdGhpcy5fc3dpbmc7XG4gICAgY29uc3QgciA9IHRoaXMuX3JldmVyc2U7XG4gICAgbGV0IHBvc2l0aW9uO1xuXG4gICAgaWYgKHAgPT0gbnVsbCkge1xuICAgICAgLypcclxuICAgICAgVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBhIHRpbWUgdG8gYSBwb3NpdGlvbiBpbiB0aGUgcmFuZ2UgWzAsIDFdXHJcbiAgICAgIFRoZSBmdWxsIGV4cGxhbmF0aW9uIGNhbiBiZSBmb3VuZCBpbiB0aGlzIGRlc21vcyBkZW1vbnN0cmF0aW9uXHJcbiAgICAgICAgaHR0cHM6Ly93d3cuZGVzbW9zLmNvbS9jYWxjdWxhdG9yL3U0ZmJhdmdjaGVcclxuICAgICAgVGhlIGxvZ2ljIGlzIHNsaWdodGx5IHNpbXBsaWZpZWQgaGVyZSBiZWNhdXNlIHdlIGNhbiB1c2UgYm9vbGVhbnNcclxuICAgICAgKi9cbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHZhbHVlIHdpdGhvdXQgdGhpbmtpbmcgYWJvdXQgdGhlIHN0YXJ0IG9yIGVuZCB0aW1lXG4gICAgICBjb25zdCBmID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgY29uc3Qgc3dpbmdpbmcgPSBzICogTWF0aC5mbG9vcih4ICUgKDIgKiAodyArIGQpKSAvICh3ICsgZCkpO1xuICAgICAgICBjb25zdCBiYWNrd2FyZHMgPSBzd2luZ2luZyAmJiAhciB8fCAhc3dpbmdpbmcgJiYgcjtcbiAgICAgICAgY29uc3QgdW5jbGlwZWQgPSBNYXRoLnBvdygtMSwgYmFja3dhcmRzKSAqICh4ICUgKHcgKyBkKSkgLyBkICsgYmFja3dhcmRzO1xuICAgICAgICBjb25zdCBjbGlwcGVkID0gTWF0aC5tYXgoTWF0aC5taW4odW5jbGlwZWQsIDEpLCAwKTtcbiAgICAgICAgcmV0dXJuIGNsaXBwZWQ7XG4gICAgICB9OyAvLyBGaWd1cmUgb3V0IHRoZSB2YWx1ZSBieSBpbmNvcnBvcmF0aW5nIHRoZSBzdGFydCB0aW1lXG5cblxuICAgICAgY29uc3QgZW5kVGltZSA9IHQgKiAodyArIGQpIC0gdztcbiAgICAgIHBvc2l0aW9uID0geCA8PSAwID8gTWF0aC5yb3VuZChmKDFlLTUpKSA6IHggPCBlbmRUaW1lID8gZih4KSA6IE1hdGgucm91bmQoZihlbmRUaW1lIC0gMWUtNSkpO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH0gLy8gV29yayBvdXQgdGhlIGxvb3BzIGRvbmUgYW5kIGFkZCB0aGUgcG9zaXRpb24gdG8gdGhlIGxvb3BzIGRvbmVcblxuXG4gICAgY29uc3QgbG9vcHNEb25lID0gTWF0aC5mbG9vcih0aGlzLmxvb3BzKCkpO1xuICAgIGNvbnN0IHN3aW5nRm9yd2FyZCA9IHMgJiYgbG9vcHNEb25lICUgMiA9PT0gMDtcbiAgICBjb25zdCBmb3J3YXJkcyA9IHN3aW5nRm9yd2FyZCAmJiAhciB8fCByICYmIHN3aW5nRm9yd2FyZDtcbiAgICBwb3NpdGlvbiA9IGxvb3BzRG9uZSArIChmb3J3YXJkcyA/IHAgOiAxIC0gcCk7XG4gICAgcmV0dXJuIHRoaXMubG9vcHMocG9zaXRpb24pO1xuICB9XG5cbiAgcHJvZ3Jlc3MocCkge1xuICAgIGlmIChwID09IG51bGwpIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5kdXJhdGlvbigpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50aW1lKHAgKiB0aGlzLmR1cmF0aW9uKCkpO1xuICB9XG4gIC8qXHJcbiAgQmFzaWMgRnVuY3Rpb25hbGl0eVxyXG4gID09PT09PT09PT09PT09PT09PT1cclxuICBUaGVzZSBtZXRob2RzIGFsbG93IHVzIHRvIGF0dGFjaCBiYXNpYyBmdW5jdGlvbnMgdG8gdGhlIHJ1bm5lciBkaXJlY3RseVxyXG4gICovXG5cblxuICBxdWV1ZShpbml0Rm4sIHJ1bkZuLCByZXRhcmdldEZuLCBpc1RyYW5zZm9ybSkge1xuICAgIHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgaW5pdGlhbGlzZXI6IGluaXRGbiB8fCBub29wLFxuICAgICAgcnVubmVyOiBydW5GbiB8fCBub29wLFxuICAgICAgcmV0YXJnZXQ6IHJldGFyZ2V0Rm4sXG4gICAgICBpc1RyYW5zZm9ybTogaXNUcmFuc2Zvcm0sXG4gICAgICBpbml0aWFsaXNlZDogZmFsc2UsXG4gICAgICBmaW5pc2hlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIGNvbnN0IHRpbWVsaW5lID0gdGhpcy50aW1lbGluZSgpO1xuICAgIHRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUoKS5fY29udGludWUoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIGlmICh0aGlzLl9yZXNldGVkKSByZXR1cm4gdGhpcztcbiAgICB0aGlzLnRpbWUoMCk7XG4gICAgdGhpcy5fcmVzZXRlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXZlcnNlKHJldmVyc2UpIHtcbiAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZSA9PSBudWxsID8gIXRoaXMuX3JldmVyc2UgOiByZXZlcnNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2NoZWR1bGUodGltZWxpbmUsIGRlbGF5LCB3aGVuKSB7XG4gICAgLy8gVGhlIHVzZXIgZG9lc24ndCBuZWVkIHRvIHBhc3MgYSB0aW1lbGluZSBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gICAgaWYgKCEodGltZWxpbmUgaW5zdGFuY2VvZiBUaW1lbGluZSkpIHtcbiAgICAgIHdoZW4gPSBkZWxheTtcbiAgICAgIGRlbGF5ID0gdGltZWxpbmU7XG4gICAgICB0aW1lbGluZSA9IHRoaXMudGltZWxpbmUoKTtcbiAgICB9IC8vIElmIHRoZXJlIGlzIG5vIHRpbWVsaW5lLCB5ZWxsIGF0IHRoZSB1c2VyLi4uXG5cblxuICAgIGlmICghdGltZWxpbmUpIHtcbiAgICAgIHRocm93IEVycm9yKCdSdW5uZXIgY2Fubm90IGJlIHNjaGVkdWxlZCB3aXRob3V0IHRpbWVsaW5lJyk7XG4gICAgfSAvLyBTY2hlZHVsZSB0aGUgcnVubmVyIG9uIHRoZSB0aW1lbGluZSBwcm92aWRlZFxuXG5cbiAgICB0aW1lbGluZS5zY2hlZHVsZSh0aGlzLCBkZWxheSwgd2hlbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGVwKGR0KSB7XG4gICAgLy8gSWYgd2UgYXJlIGluYWN0aXZlLCB0aGlzIHN0ZXBwZXIganVzdCBnZXRzIHNraXBwZWRcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuIHRoaXM7IC8vIFVwZGF0ZSB0aGUgdGltZSBhbmQgZ2V0IHRoZSBuZXcgcG9zaXRpb25cblxuICAgIGR0ID0gZHQgPT0gbnVsbCA/IDE2IDogZHQ7XG4gICAgdGhpcy5fdGltZSArPSBkdDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24oKTsgLy8gRmlndXJlIG91dCBpZiB3ZSBuZWVkIHRvIHJ1biB0aGUgc3RlcHBlciBpbiB0aGlzIGZyYW1lXG5cbiAgICBjb25zdCBydW5uaW5nID0gdGhpcy5fbGFzdFBvc2l0aW9uICE9PSBwb3NpdGlvbiAmJiB0aGlzLl90aW1lID49IDA7XG4gICAgdGhpcy5fbGFzdFBvc2l0aW9uID0gcG9zaXRpb247IC8vIEZpZ3VyZSBvdXQgaWYgd2UganVzdCBzdGFydGVkXG5cbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKTtcbiAgICBjb25zdCBqdXN0U3RhcnRlZCA9IHRoaXMuX2xhc3RUaW1lIDw9IDAgJiYgdGhpcy5fdGltZSA+IDA7XG4gICAgY29uc3QganVzdEZpbmlzaGVkID0gdGhpcy5fbGFzdFRpbWUgPCBkdXJhdGlvbiAmJiB0aGlzLl90aW1lID49IGR1cmF0aW9uO1xuICAgIHRoaXMuX2xhc3RUaW1lID0gdGhpcy5fdGltZTtcblxuICAgIGlmIChqdXN0U3RhcnRlZCkge1xuICAgICAgdGhpcy5maXJlKCdzdGFydCcsIHRoaXMpO1xuICAgIH0gLy8gV29yayBvdXQgaWYgdGhlIHJ1bm5lciBpcyBmaW5pc2hlZCBzZXQgdGhlIGRvbmUgZmxhZyBoZXJlIHNvIGFuaW1hdGlvbnNcbiAgICAvLyBrbm93LCB0aGF0IHRoZXkgYXJlIHJ1bm5pbmcgaW4gdGhlIGxhc3Qgc3RlcCAodGhpcyBpcyBnb29kIGZvclxuICAgIC8vIHRyYW5zZm9ybWF0aW9ucyB3aGljaCBjYW4gYmUgbWVyZ2VkKVxuXG5cbiAgICBjb25zdCBkZWNsYXJhdGl2ZSA9IHRoaXMuX2lzRGVjbGFyYXRpdmU7XG4gICAgdGhpcy5kb25lID0gIWRlY2xhcmF0aXZlICYmICFqdXN0RmluaXNoZWQgJiYgdGhpcy5fdGltZSA+PSBkdXJhdGlvbjsgLy8gUnVubmVyIGlzIHJ1bm5pbmcuIFNvIGl0cyBub3QgaW4gcmVzZXRlZCBzdGF0ZSBhbnltb3JlXG5cbiAgICB0aGlzLl9yZXNldGVkID0gZmFsc2U7XG4gICAgbGV0IGNvbnZlcmdlZCA9IGZhbHNlOyAvLyBDYWxsIGluaXRpYWxpc2UgYW5kIHRoZSBydW4gZnVuY3Rpb25cblxuICAgIGlmIChydW5uaW5nIHx8IGRlY2xhcmF0aXZlKSB7XG4gICAgICB0aGlzLl9pbml0aWFsaXNlKHJ1bm5pbmcpOyAvLyBjbGVhciB0aGUgdHJhbnNmb3JtcyBvbiB0aGlzIHJ1bm5lciBzbyB0aGV5IGRvbnQgZ2V0IGFkZGVkIGFnYWluIGFuZCBhZ2FpblxuXG5cbiAgICAgIHRoaXMudHJhbnNmb3JtcyA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIGNvbnZlcmdlZCA9IHRoaXMuX3J1bihkZWNsYXJhdGl2ZSA/IGR0IDogcG9zaXRpb24pO1xuICAgICAgdGhpcy5maXJlKCdzdGVwJywgdGhpcyk7XG4gICAgfSAvLyBjb3JyZWN0IHRoZSBkb25lIGZsYWcgaGVyZVxuICAgIC8vIGRlY2xhcml0aXZlIGFuaW1hdGlvbnMgaXRzZWxmIGtub3cgd2hlbiB0aGV5IGNvbnZlcmdlZFxuXG5cbiAgICB0aGlzLmRvbmUgPSB0aGlzLmRvbmUgfHwgY29udmVyZ2VkICYmIGRlY2xhcmF0aXZlO1xuXG4gICAgaWYgKGp1c3RGaW5pc2hlZCkge1xuICAgICAgdGhpcy5maXJlKCdmaW5pc2hlZCcsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qXHJcbiAgUnVubmVyIGFuaW1hdGlvbiBtZXRob2RzXHJcbiAgPT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgQ29udHJvbCBob3cgdGhlIGFuaW1hdGlvbiBwbGF5c1xyXG4gICovXG5cblxuICB0aW1lKHRpbWUpIHtcbiAgICBpZiAodGltZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBkdCA9IHRpbWUgLSB0aGlzLl90aW1lO1xuICAgIHRoaXMuc3RlcChkdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0aW1lbGluZSh0aW1lbGluZSkge1xuICAgIC8vIGNoZWNrIGV4cGxpY2l0bHkgZm9yIHVuZGVmaW5lZCBzbyB3ZSBjYW4gc2V0IHRoZSB0aW1lbGluZSB0byBudWxsXG4gICAgaWYgKHR5cGVvZiB0aW1lbGluZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzLl90aW1lbGluZTtcbiAgICB0aGlzLl90aW1lbGluZSA9IHRpbWVsaW5lO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdW5zY2hlZHVsZSgpIHtcbiAgICBjb25zdCB0aW1lbGluZSA9IHRoaXMudGltZWxpbmUoKTtcbiAgICB0aW1lbGluZSAmJiB0aW1lbGluZS51bnNjaGVkdWxlKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFJ1biBlYWNoIGluaXRpYWxpc2UgZnVuY3Rpb24gaW4gdGhlIHJ1bm5lciBpZiByZXF1aXJlZFxuXG5cbiAgX2luaXRpYWxpc2UocnVubmluZykge1xuICAgIC8vIElmIHdlIGFyZW4ndCBydW5uaW5nLCB3ZSBzaG91bGRuJ3QgaW5pdGlhbGlzZSB3aGVuIG5vdCBkZWNsYXJhdGl2ZVxuICAgIGlmICghcnVubmluZyAmJiAhdGhpcy5faXNEZWNsYXJhdGl2ZSkgcmV0dXJuOyAvLyBMb29wIHRocm91Z2ggYWxsIG9mIHRoZSBpbml0aWFsaXNlcnNcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9xdWV1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGluaXRpYWxpc2VyXG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5fcXVldWVbaV07IC8vIERldGVybWluZSB3aGV0aGVyIHdlIG5lZWQgdG8gaW5pdGlhbGlzZVxuXG4gICAgICBjb25zdCBuZWVkc0l0ID0gdGhpcy5faXNEZWNsYXJhdGl2ZSB8fCAhY3VycmVudC5pbml0aWFsaXNlZCAmJiBydW5uaW5nO1xuICAgICAgcnVubmluZyA9ICFjdXJyZW50LmZpbmlzaGVkOyAvLyBDYWxsIHRoZSBpbml0aWFsaXNlciBpZiB3ZSBuZWVkIHRvXG5cbiAgICAgIGlmIChuZWVkc0l0ICYmIHJ1bm5pbmcpIHtcbiAgICAgICAgY3VycmVudC5pbml0aWFsaXNlci5jYWxsKHRoaXMpO1xuICAgICAgICBjdXJyZW50LmluaXRpYWxpc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gU2F2ZSBhIG1vcnBoZXIgdG8gdGhlIG1vcnBoZXIgbGlzdCBzbyB0aGF0IHdlIGNhbiByZXRhcmdldCBpdCBsYXRlclxuXG5cbiAgX3JlbWVtYmVyTW9ycGhlcihtZXRob2QsIG1vcnBoZXIpIHtcbiAgICB0aGlzLl9oaXN0b3J5W21ldGhvZF0gPSB7XG4gICAgICBtb3JwaGVyOiBtb3JwaGVyLFxuICAgICAgY2FsbGVyOiB0aGlzLl9xdWV1ZVt0aGlzLl9xdWV1ZS5sZW5ndGggLSAxXVxuICAgIH07IC8vIFdlIGhhdmUgdG8gcmVzdW1lIHRoZSB0aW1lbGluZSBpbiBjYXNlIGEgY29udHJvbGxlclxuICAgIC8vIGlzIGFscmVhZHkgZG9uZSB3aXRob3V0IGJlaW5nIGV2ZXIgcnVuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gZS5nLiB0aGlzIGlzIGRvbmU6XG4gICAgLy8gICAgYW5pbSA9IGVsLmFuaW1hdGUobmV3IFNWRy5TcHJpbmcpXG4gICAgLy8gYW5kIGxhdGVyXG4gICAgLy8gICAgYW5pbS5tb3ZlKC4uLilcblxuICAgIGlmICh0aGlzLl9pc0RlY2xhcmF0aXZlKSB7XG4gICAgICBjb25zdCB0aW1lbGluZSA9IHRoaXMudGltZWxpbmUoKTtcbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnBsYXkoKTtcbiAgICB9XG4gIH0gLy8gVHJ5IHRvIHNldCB0aGUgdGFyZ2V0IGZvciBhIG1vcnBoZXIgaWYgdGhlIG1vcnBoZXIgZXhpc3RzLCBvdGhlcndpc2VcbiAgLy8gUnVuIGVhY2ggcnVuIGZ1bmN0aW9uIGZvciB0aGUgcG9zaXRpb24gb3IgZHQgZ2l2ZW5cblxuXG4gIF9ydW4ocG9zaXRpb25PckR0KSB7XG4gICAgLy8gUnVuIGFsbCBvZiB0aGUgX3F1ZXVlIGRpcmVjdGx5XG4gICAgbGV0IGFsbGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9xdWV1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGZ1bmN0aW9uIHRvIHJ1blxuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX3F1ZXVlW2ldOyAvLyBSdW4gdGhlIGZ1bmN0aW9uIGlmIGl0cyBub3QgZmluaXNoZWQsIHdlIGtlZXAgdHJhY2sgb2YgdGhlIGZpbmlzaGVkXG4gICAgICAvLyBmbGFnIGZvciB0aGUgc2FrZSBvZiBkZWNsYXJhdGl2ZSBfcXVldWVcblxuICAgICAgY29uc3QgY29udmVyZ2VkID0gY3VycmVudC5ydW5uZXIuY2FsbCh0aGlzLCBwb3NpdGlvbk9yRHQpO1xuICAgICAgY3VycmVudC5maW5pc2hlZCA9IGN1cnJlbnQuZmluaXNoZWQgfHwgY29udmVyZ2VkID09PSB0cnVlO1xuICAgICAgYWxsZmluaXNoZWQgPSBhbGxmaW5pc2hlZCAmJiBjdXJyZW50LmZpbmlzaGVkO1xuICAgIH0gLy8gV2UgcmVwb3J0IHdoZW4gYWxsIG9mIHRoZSBjb25zdHJ1Y3RvcnMgYXJlIGZpbmlzaGVkXG5cblxuICAgIHJldHVybiBhbGxmaW5pc2hlZDtcbiAgfSAvLyBkbyBub3RoaW5nIGFuZCByZXR1cm4gZmFsc2VcblxuXG4gIF90cnlSZXRhcmdldChtZXRob2QsIHRhcmdldCwgZXh0cmEpIHtcbiAgICBpZiAodGhpcy5faGlzdG9yeVttZXRob2RdKSB7XG4gICAgICAvLyBpZiB0aGUgbGFzdCBtZXRob2Qgd2FzbnQgZXZlbiBpbml0aWFsaXNlZCwgdGhyb3cgaXQgYXdheVxuICAgICAgaWYgKCF0aGlzLl9oaXN0b3J5W21ldGhvZF0uY2FsbGVyLmluaXRpYWxpc2VkKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fcXVldWUuaW5kZXhPZih0aGlzLl9oaXN0b3J5W21ldGhvZF0uY2FsbGVyKTtcblxuICAgICAgICB0aGlzLl9xdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gZm9yIHRoZSBjYXNlIG9mIHRyYW5zZm9ybWF0aW9ucywgd2UgdXNlIHRoZSBzcGVjaWFsIHJldGFyZ2V0IGZ1bmN0aW9uXG4gICAgICAvLyB3aGljaCBoYXMgYWNjZXNzIHRvIHRoZSBvdXRlciBzY29wZVxuXG5cbiAgICAgIGlmICh0aGlzLl9oaXN0b3J5W21ldGhvZF0uY2FsbGVyLnJldGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2hpc3RvcnlbbWV0aG9kXS5jYWxsZXIucmV0YXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIGV4dHJhKTsgLy8gZm9yIGV2ZXJ5dGhpbmcgZWxzZSBhIHNpbXBsZSBtb3JwaGVyIGNoYW5nZSBpcyBzdWZmaWNpZW50XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpc3RvcnlbbWV0aG9kXS5tb3JwaGVyLnRvKHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hpc3RvcnlbbWV0aG9kXS5jYWxsZXIuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHRpbWVsaW5lID0gdGhpcy50aW1lbGluZSgpO1xuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucGxheSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblJ1bm5lci5pZCA9IDA7XG5jbGFzcyBGYWtlUnVubmVyIHtcbiAgY29uc3RydWN0b3IodHJhbnNmb3JtcyA9IG5ldyBNYXRyaXgoKSwgaWQgPSAtMSwgZG9uZSA9IHRydWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmRvbmUgPSBkb25lO1xuICB9XG5cbiAgY2xlYXJUcmFuc2Zvcm1zRnJvbVF1ZXVlKCkge31cblxufVxuZXh0ZW5kKFtSdW5uZXIsIEZha2VSdW5uZXJdLCB7XG4gIG1lcmdlV2l0aChydW5uZXIpIHtcbiAgICByZXR1cm4gbmV3IEZha2VSdW5uZXIocnVubmVyLnRyYW5zZm9ybXMubG11bHRpcGx5KHRoaXMudHJhbnNmb3JtcyksIHJ1bm5lci5pZCk7XG4gIH1cblxufSk7IC8vIEZha2VSdW5uZXIuZW1wdHlSdW5uZXIgPSBuZXcgRmFrZVJ1bm5lcigpXG5cbmNvbnN0IGxtdWx0aXBseSA9IChsYXN0LCBjdXJyKSA9PiBsYXN0LmxtdWx0aXBseU8oY3Vycik7XG5cbmNvbnN0IGdldFJ1bm5lclRyYW5zZm9ybSA9IHJ1bm5lciA9PiBydW5uZXIudHJhbnNmb3JtcztcblxuZnVuY3Rpb24gbWVyZ2VUcmFuc2Zvcm1zKCkge1xuICAvLyBGaW5kIHRoZSBtYXRyaXggdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQgYW5kIGFwcGx5IGl0XG4gIGNvbnN0IHJ1bm5lcnMgPSB0aGlzLl90cmFuc2Zvcm1hdGlvblJ1bm5lcnMucnVubmVycztcbiAgY29uc3QgbmV0VHJhbnNmb3JtID0gcnVubmVycy5tYXAoZ2V0UnVubmVyVHJhbnNmb3JtKS5yZWR1Y2UobG11bHRpcGx5LCBuZXcgTWF0cml4KCkpO1xuICB0aGlzLnRyYW5zZm9ybShuZXRUcmFuc2Zvcm0pO1xuXG4gIHRoaXMuX3RyYW5zZm9ybWF0aW9uUnVubmVycy5tZXJnZSgpO1xuXG4gIGlmICh0aGlzLl90cmFuc2Zvcm1hdGlvblJ1bm5lcnMubGVuZ3RoKCkgPT09IDEpIHtcbiAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDtcbiAgfVxufVxuXG5jbGFzcyBSdW5uZXJBcnJheSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucnVubmVycyA9IFtdO1xuICAgIHRoaXMuaWRzID0gW107XG4gIH1cblxuICBhZGQocnVubmVyKSB7XG4gICAgaWYgKHRoaXMucnVubmVycy5pbmNsdWRlcyhydW5uZXIpKSByZXR1cm47XG4gICAgY29uc3QgaWQgPSBydW5uZXIuaWQgKyAxO1xuICAgIHRoaXMucnVubmVycy5wdXNoKHJ1bm5lcik7XG4gICAgdGhpcy5pZHMucHVzaChpZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjbGVhckJlZm9yZShpZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNudCA9IHRoaXMuaWRzLmluZGV4T2YoaWQgKyAxKSB8fCAxO1xuICAgIHRoaXMuaWRzLnNwbGljZSgwLCBkZWxldGVDbnQsIDApO1xuICAgIHRoaXMucnVubmVycy5zcGxpY2UoMCwgZGVsZXRlQ250LCBuZXcgRmFrZVJ1bm5lcigpKS5mb3JFYWNoKHIgPT4gci5jbGVhclRyYW5zZm9ybXNGcm9tUXVldWUoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBlZGl0KGlkLCBuZXdSdW5uZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaWRzLmluZGV4T2YoaWQgKyAxKTtcbiAgICB0aGlzLmlkcy5zcGxpY2UoaW5kZXgsIDEsIGlkICsgMSk7XG4gICAgdGhpcy5ydW5uZXJzLnNwbGljZShpbmRleCwgMSwgbmV3UnVubmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldEJ5SUQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5ydW5uZXJzW3RoaXMuaWRzLmluZGV4T2YoaWQgKyAxKV07XG4gIH1cblxuICBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWRzLmxlbmd0aDtcbiAgfVxuXG4gIG1lcmdlKCkge1xuICAgIGxldCBsYXN0UnVubmVyID0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydW5uZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBydW5uZXIgPSB0aGlzLnJ1bm5lcnNbaV07XG4gICAgICBjb25zdCBjb25kaXRpb24gPSBsYXN0UnVubmVyICYmIHJ1bm5lci5kb25lICYmIGxhc3RSdW5uZXIuZG9uZSAvLyBkb24ndCBtZXJnZSBydW5uZXIgd2hlbiBwZXJzaXN0ZWQgb24gdGltZWxpbmVcbiAgICAgICYmICghcnVubmVyLl90aW1lbGluZSB8fCAhcnVubmVyLl90aW1lbGluZS5fcnVubmVySWRzLmluY2x1ZGVzKHJ1bm5lci5pZCkpICYmICghbGFzdFJ1bm5lci5fdGltZWxpbmUgfHwgIWxhc3RSdW5uZXIuX3RpbWVsaW5lLl9ydW5uZXJJZHMuaW5jbHVkZXMobGFzdFJ1bm5lci5pZCkpO1xuXG4gICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIC8vIHRoZSArMSBoYXBwZW5zIGluIHRoZSBmdW5jdGlvblxuICAgICAgICB0aGlzLnJlbW92ZShydW5uZXIuaWQpO1xuICAgICAgICBjb25zdCBuZXdSdW5uZXIgPSBydW5uZXIubWVyZ2VXaXRoKGxhc3RSdW5uZXIpO1xuICAgICAgICB0aGlzLmVkaXQobGFzdFJ1bm5lci5pZCwgbmV3UnVubmVyKTtcbiAgICAgICAgbGFzdFJ1bm5lciA9IG5ld1J1bm5lcjtcbiAgICAgICAgLS1pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdFJ1bm5lciA9IHJ1bm5lcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZShpZCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pZHMuaW5kZXhPZihpZCArIDEpO1xuICAgIHRoaXMuaWRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgdGhpcy5ydW5uZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgRWxlbWVudDoge1xuICAgIGFuaW1hdGUoZHVyYXRpb24sIGRlbGF5LCB3aGVuKSB7XG4gICAgICBjb25zdCBvID0gUnVubmVyLnNhbml0aXNlKGR1cmF0aW9uLCBkZWxheSwgd2hlbik7XG4gICAgICBjb25zdCB0aW1lbGluZSA9IHRoaXMudGltZWxpbmUoKTtcbiAgICAgIHJldHVybiBuZXcgUnVubmVyKG8uZHVyYXRpb24pLmxvb3AobykuZWxlbWVudCh0aGlzKS50aW1lbGluZSh0aW1lbGluZS5wbGF5KCkpLnNjaGVkdWxlKG8uZGVsYXksIG8ud2hlbik7XG4gICAgfSxcblxuICAgIGRlbGF5KGJ5LCB3aGVuKSB7XG4gICAgICByZXR1cm4gdGhpcy5hbmltYXRlKDAsIGJ5LCB3aGVuKTtcbiAgICB9LFxuXG4gICAgLy8gdGhpcyBmdW5jdGlvbiBzZWFyY2hlcyBmb3IgYWxsIHJ1bm5lcnMgb24gdGhlIGVsZW1lbnQgYW5kIGRlbGV0ZXMgdGhlIG9uZXNcbiAgICAvLyB3aGljaCBydW4gYmVmb3JlIHRoZSBjdXJyZW50IG9uZS4gVGhpcyBpcyBiZWNhdXNlIGFic29sdXRlIHRyYW5zZm9ybWF0aW9uc1xuICAgIC8vIG92ZXJ3ZnJpdGUgYW55dGhpbmcgYW55d2F5IHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gd2FzdGUgdGltZSBjb21wdXRpbmdcbiAgICAvLyBvdGhlciBydW5uZXJzXG4gICAgX2NsZWFyVHJhbnNmb3JtUnVubmVyc0JlZm9yZShjdXJyZW50UnVubmVyKSB7XG4gICAgICB0aGlzLl90cmFuc2Zvcm1hdGlvblJ1bm5lcnMuY2xlYXJCZWZvcmUoY3VycmVudFJ1bm5lci5pZCk7XG4gICAgfSxcblxuICAgIF9jdXJyZW50VHJhbnNmb3JtKGN1cnJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm1hdGlvblJ1bm5lcnMucnVubmVycyAvLyB3ZSBuZWVkIHRoZSBlcXVhbCBzaWduIGhlcmUgdG8gbWFrZSBzdXJlLCB0aGF0IGFsc28gdHJhbnNmb3JtYXRpb25zXG4gICAgICAvLyBvbiB0aGUgc2FtZSBydW5uZXIgd2hpY2ggZXhlY3V0ZSBiZWZvcmUgdGhlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gYXJlXG4gICAgICAvLyB0YWtlbiBpbnRvIGFjY291bnRcbiAgICAgIC5maWx0ZXIocnVubmVyID0+IHJ1bm5lci5pZCA8PSBjdXJyZW50LmlkKS5tYXAoZ2V0UnVubmVyVHJhbnNmb3JtKS5yZWR1Y2UobG11bHRpcGx5LCBuZXcgTWF0cml4KCkpO1xuICAgIH0sXG5cbiAgICBfYWRkUnVubmVyKHJ1bm5lcikge1xuICAgICAgdGhpcy5fdHJhbnNmb3JtYXRpb25SdW5uZXJzLmFkZChydW5uZXIpOyAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgcnVubmVyIG1lcmdlIGlzIGV4ZWN1dGVkIGF0IHRoZSB2ZXJ5IGVuZCBvZlxuICAgICAgLy8gYWxsIEFuaW1hdG9yIGZ1bmN0aW9ucy4gVGhhdHMgd2h5IHdlIHVzZSBpbW1lZGlhdGUgaGVyZSB0byBleGVjdXRlXG4gICAgICAvLyB0aGUgbWVyZ2UgcmlnaHQgYWZ0ZXIgYWxsIGZyYW1lcyBhcmUgcnVuXG5cblxuICAgICAgQW5pbWF0b3IuY2FuY2VsSW1tZWRpYXRlKHRoaXMuX2ZyYW1lSWQpO1xuICAgICAgdGhpcy5fZnJhbWVJZCA9IEFuaW1hdG9yLmltbWVkaWF0ZShtZXJnZVRyYW5zZm9ybXMuYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIF9wcmVwYXJlUnVubmVyKCkge1xuICAgICAgaWYgKHRoaXMuX2ZyYW1lSWQgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl90cmFuc2Zvcm1hdGlvblJ1bm5lcnMgPSBuZXcgUnVubmVyQXJyYXkoKS5hZGQobmV3IEZha2VSdW5uZXIobmV3IE1hdHJpeCh0aGlzKSkpO1xuICAgICAgfVxuICAgIH1cblxuICB9XG59KTsgLy8gV2lsbCBvdXRwdXQgdGhlIGVsZW1lbnRzIGZyb20gYXJyYXkgQSB0aGF0IGFyZSBub3QgaW4gdGhlIGFycmF5IEJcblxuY29uc3QgZGlmZmVyZW5jZSA9IChhLCBiKSA9PiBhLmZpbHRlcih4ID0+ICFiLmluY2x1ZGVzKHgpKTtcblxuZXh0ZW5kKFJ1bm5lciwge1xuICBhdHRyKGEsIHYpIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZUF0dHIoJ2F0dHInLCBhLCB2KTtcbiAgfSxcblxuICAvLyBBZGQgYW5pbWF0YWJsZSBzdHlsZXNcbiAgY3NzKHMsIHYpIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZUF0dHIoJ2NzcycsIHMsIHYpO1xuICB9LFxuXG4gIHN0eWxlQXR0cih0eXBlLCBuYW1lT3JBdHRycywgdmFsKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lT3JBdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0eWxlQXR0cih0eXBlLCB7XG4gICAgICAgIFtuYW1lT3JBdHRyc106IHZhbFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IGF0dHJzID0gbmFtZU9yQXR0cnM7XG4gICAgaWYgKHRoaXMuX3RyeVJldGFyZ2V0KHR5cGUsIGF0dHJzKSkgcmV0dXJuIHRoaXM7XG4gICAgbGV0IG1vcnBoZXIgPSBuZXcgTW9ycGhhYmxlKHRoaXMuX3N0ZXBwZXIpLnRvKGF0dHJzKTtcbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICB0aGlzLnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vcnBoZXIgPSBtb3JwaGVyLmZyb20odGhpcy5lbGVtZW50KClbdHlwZV0oa2V5cykpO1xuICAgIH0sIGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudCgpW3R5cGVdKG1vcnBoZXIuYXQocG9zKS52YWx1ZU9mKCkpO1xuICAgICAgcmV0dXJuIG1vcnBoZXIuZG9uZSgpO1xuICAgIH0sIGZ1bmN0aW9uIChuZXdUb0F0dHJzKSB7XG4gICAgICAvLyBDaGVjayBpZiBhbnkgbmV3IGtleXMgd2VyZSBhZGRlZFxuICAgICAgY29uc3QgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld1RvQXR0cnMpO1xuICAgICAgY29uc3QgZGlmZmVyZW5jZXMgPSBkaWZmZXJlbmNlKG5ld0tleXMsIGtleXMpOyAvLyBJZiB0aGVpciBhcmUgbmV3IGtleXMsIGluaXRpYWxpemUgdGhlbSBhbmQgYWRkIHRoZW0gdG8gbW9ycGhlclxuXG4gICAgICBpZiAoZGlmZmVyZW5jZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgdmFsdWVzXG4gICAgICAgIGNvbnN0IGFkZGVkRnJvbUF0dHJzID0gdGhpcy5lbGVtZW50KClbdHlwZV0oZGlmZmVyZW5jZXMpOyAvLyBHZXQgdGhlIGFscmVhZHkgaW5pdGlhbGl6ZWQgdmFsdWVzXG5cbiAgICAgICAgY29uc3Qgb2xkRnJvbUF0dHJzID0gbmV3IE9iamVjdEJhZyhtb3JwaGVyLmZyb20oKSkudmFsdWVPZigpOyAvLyBNZXJnZSBvbGQgYW5kIG5ld1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24ob2xkRnJvbUF0dHJzLCBhZGRlZEZyb21BdHRycyk7XG4gICAgICAgIG1vcnBoZXIuZnJvbShvbGRGcm9tQXR0cnMpO1xuICAgICAgfSAvLyBHZXQgdGhlIG9iamVjdCBmcm9tIHRoZSBtb3JwaGVyXG5cblxuICAgICAgY29uc3Qgb2xkVG9BdHRycyA9IG5ldyBPYmplY3RCYWcobW9ycGhlci50bygpKS52YWx1ZU9mKCk7IC8vIE1lcmdlIGluIG5ldyBhdHRyaWJ1dGVzXG5cbiAgICAgIE9iamVjdC5hc3NpZ24ob2xkVG9BdHRycywgbmV3VG9BdHRycyk7IC8vIENoYW5nZSBtb3JwaGVyIHRhcmdldFxuXG4gICAgICBtb3JwaGVyLnRvKG9sZFRvQXR0cnMpOyAvLyBNYWtlIHN1cmUgdGhhdCB3ZSBzYXZlIHRoZSB3b3JrIHdlIGRpZCBzbyB3ZSBkb24ndCBuZWVkIGl0IHRvIGRvIGFnYWluXG5cbiAgICAgIGtleXMgPSBuZXdLZXlzO1xuICAgICAgYXR0cnMgPSBuZXdUb0F0dHJzO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVtZW1iZXJNb3JwaGVyKHR5cGUsIG1vcnBoZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgem9vbShsZXZlbCwgcG9pbnQpIHtcbiAgICBpZiAodGhpcy5fdHJ5UmV0YXJnZXQoJ3pvb20nLCBsZXZlbCwgcG9pbnQpKSByZXR1cm4gdGhpcztcbiAgICBsZXQgbW9ycGhlciA9IG5ldyBNb3JwaGFibGUodGhpcy5fc3RlcHBlcikudG8obmV3IFNWR051bWJlcihsZXZlbCkpO1xuICAgIHRoaXMucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgbW9ycGhlciA9IG1vcnBoZXIuZnJvbSh0aGlzLmVsZW1lbnQoKS56b29tKCkpO1xuICAgIH0sIGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudCgpLnpvb20obW9ycGhlci5hdChwb3MpLCBwb2ludCk7XG4gICAgICByZXR1cm4gbW9ycGhlci5kb25lKCk7XG4gICAgfSwgZnVuY3Rpb24gKG5ld0xldmVsLCBuZXdQb2ludCkge1xuICAgICAgcG9pbnQgPSBuZXdQb2ludDtcbiAgICAgIG1vcnBoZXIudG8obmV3TGV2ZWwpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVtZW1iZXJNb3JwaGVyKCd6b29tJywgbW9ycGhlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcclxuICAgKiogYWJzb2x1dGUgdHJhbnNmb3JtYXRpb25zXHJcbiAgICoqL1xuICAvL1xuICAvLyBNIHYgLS0tLS18LS0tLS0oRCBNIHYgPSBGIHYpLS0tLS0tfC0tLS0tPiAgVCB2XG4gIC8vXG4gIC8vIDEuIGRlZmluZSB0aGUgZmluYWwgc3RhdGUgKFQpIGFuZCBkZWNvbXBvc2UgaXQgKG9uY2UpXG4gIC8vICAgIHQgPSBbdHgsIHR5LCB0aGUsIGxhbSwgc3ksIHN4XVxuICAvLyAyLiBvbiBldmVyeSBmcmFtZTogcHVsbCB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbGwgcHJldmlvdXMgdHJhbnNmb3Jtc1xuICAvLyAgICAoTSAtIG0gY2FuIGNoYW5nZSlcbiAgLy8gICBhbmQgdGhlbiB3cml0ZSB0aGlzIGFzIG0gPSBbdHgwLCB0eTAsIHRoZTAsIGxhbTAsIHN5MCwgc3gwXVxuICAvLyAzLiBGaW5kIHRoZSBpbnRlcnBvbGF0ZWQgbWF0cml4IEYocG9zKSA9IG0gKyBwb3MgKiAodCAtIG0pXG4gIC8vICAgLSBOb3RlIEYoMCkgPSBNXG4gIC8vICAgLSBOb3RlIEYoMSkgPSBUXG4gIC8vIDQuIE5vdyB5b3UgZ2V0IHRoZSBkZWx0YSBtYXRyaXggYXMgYSByZXN1bHQ6IEQgPSBGICogaW52KE0pXG4gIHRyYW5zZm9ybSh0cmFuc2Zvcm1zLCByZWxhdGl2ZSwgYWZmaW5lKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIGRlY2xhcmF0aXZlIGZ1bmN0aW9uLCB3ZSBzaG91bGQgcmV0YXJnZXQgaXQgaWYgcG9zc2libGVcbiAgICByZWxhdGl2ZSA9IHRyYW5zZm9ybXMucmVsYXRpdmUgfHwgcmVsYXRpdmU7XG5cbiAgICBpZiAodGhpcy5faXNEZWNsYXJhdGl2ZSAmJiAhcmVsYXRpdmUgJiYgdGhpcy5fdHJ5UmV0YXJnZXQoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybXMpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IC8vIFBhcnNlIHRoZSBwYXJhbWV0ZXJzXG5cblxuICAgIGNvbnN0IGlzTWF0cml4ID0gTWF0cml4LmlzTWF0cml4TGlrZSh0cmFuc2Zvcm1zKTtcbiAgICBhZmZpbmUgPSB0cmFuc2Zvcm1zLmFmZmluZSAhPSBudWxsID8gdHJhbnNmb3Jtcy5hZmZpbmUgOiBhZmZpbmUgIT0gbnVsbCA/IGFmZmluZSA6ICFpc01hdHJpeDsgLy8gQ3JlYXRlIGEgbW9yZXBoZXIgYW5kIHNldCBpdHMgdHlwZVxuXG4gICAgY29uc3QgbW9ycGhlciA9IG5ldyBNb3JwaGFibGUodGhpcy5fc3RlcHBlcikudHlwZShhZmZpbmUgPyBUcmFuc2Zvcm1CYWcgOiBNYXRyaXgpO1xuICAgIGxldCBvcmlnaW47XG4gICAgbGV0IGVsZW1lbnQ7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IGN1cnJlbnRBbmdsZTtcbiAgICBsZXQgc3RhcnRUcmFuc2Zvcm07XG5cbiAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBlbGVtZW50IGFuZCBvcmlnaW4gaXMgZGVmaW5lZFxuICAgICAgZWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5lbGVtZW50KCk7XG4gICAgICBvcmlnaW4gPSBvcmlnaW4gfHwgZ2V0T3JpZ2luKHRyYW5zZm9ybXMsIGVsZW1lbnQpO1xuICAgICAgc3RhcnRUcmFuc2Zvcm0gPSBuZXcgTWF0cml4KHJlbGF0aXZlID8gdW5kZWZpbmVkIDogZWxlbWVudCk7IC8vIGFkZCB0aGUgcnVubmVyIHRvIHRoZSBlbGVtZW50IHNvIGl0IGNhbiBtZXJnZSB0cmFuc2Zvcm1hdGlvbnNcblxuICAgICAgZWxlbWVudC5fYWRkUnVubmVyKHRoaXMpOyAvLyBEZWFjdGl2YXRlIGFsbCB0cmFuc2Zvcm1zIHRoYXQgaGF2ZSBydW4gc28gZmFyIGlmIHdlIGFyZSBhYnNvbHV0ZVxuXG5cbiAgICAgIGlmICghcmVsYXRpdmUpIHtcbiAgICAgICAgZWxlbWVudC5fY2xlYXJUcmFuc2Zvcm1SdW5uZXJzQmVmb3JlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bihwb3MpIHtcbiAgICAgIC8vIGNsZWFyIGFsbCBvdGhlciB0cmFuc2Zvcm1zIGJlZm9yZSB0aGlzIGluIGNhc2Ugc29tZXRoaW5nIGlzIHNhdmVkXG4gICAgICAvLyBvbiB0aGlzIHJ1bm5lci4gV2UgYXJlIGFic29sdXRlLiBXZSBkb250IG5lZWQgdGhlc2UhXG4gICAgICBpZiAoIXJlbGF0aXZlKSB0aGlzLmNsZWFyVHJhbnNmb3JtKCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSBuZXcgUG9pbnQob3JpZ2luKS50cmFuc2Zvcm0oZWxlbWVudC5fY3VycmVudFRyYW5zZm9ybSh0aGlzKSk7XG4gICAgICBsZXQgdGFyZ2V0ID0gbmV3IE1hdHJpeCh7IC4uLnRyYW5zZm9ybXMsXG4gICAgICAgIG9yaWdpbjogW3gsIHldXG4gICAgICB9KTtcbiAgICAgIGxldCBzdGFydCA9IHRoaXMuX2lzRGVjbGFyYXRpdmUgJiYgY3VycmVudCA/IGN1cnJlbnQgOiBzdGFydFRyYW5zZm9ybTtcblxuICAgICAgaWYgKGFmZmluZSkge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQuZGVjb21wb3NlKHgsIHkpO1xuICAgICAgICBzdGFydCA9IHN0YXJ0LmRlY29tcG9zZSh4LCB5KTsgLy8gR2V0IHRoZSBjdXJyZW50IGFuZCB0YXJnZXQgYW5nbGUgYXMgaXQgd2FzIHNldFxuXG4gICAgICAgIGNvbnN0IHJUYXJnZXQgPSB0YXJnZXQucm90YXRlO1xuICAgICAgICBjb25zdCByQ3VycmVudCA9IHN0YXJ0LnJvdGF0ZTsgLy8gRmlndXJlIG91dCB0aGUgc2hvcnRlc3QgcGF0aCB0byByb3RhdGUgZGlyZWN0bHlcblxuICAgICAgICBjb25zdCBwb3NzaWJpbGl0aWVzID0gW3JUYXJnZXQgLSAzNjAsIHJUYXJnZXQsIHJUYXJnZXQgKyAzNjBdO1xuICAgICAgICBjb25zdCBkaXN0YW5jZXMgPSBwb3NzaWJpbGl0aWVzLm1hcChhID0+IE1hdGguYWJzKGEgLSByQ3VycmVudCkpO1xuICAgICAgICBjb25zdCBzaG9ydGVzdCA9IE1hdGgubWluKC4uLmRpc3RhbmNlcyk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZGlzdGFuY2VzLmluZGV4T2Yoc2hvcnRlc3QpO1xuICAgICAgICB0YXJnZXQucm90YXRlID0gcG9zc2liaWxpdGllc1tpbmRleF07XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWxhdGl2ZSkge1xuICAgICAgICAvLyB3ZSBoYXZlIHRvIGJlIGNhcmVmdWwgaGVyZSBub3QgdG8gb3ZlcndyaXRlIHRoZSByb3RhdGlvblxuICAgICAgICAvLyB3aXRoIHRoZSByb3RhdGUgbWV0aG9kIG9mIE1hdHJpeFxuICAgICAgICBpZiAoIWlzTWF0cml4KSB7XG4gICAgICAgICAgdGFyZ2V0LnJvdGF0ZSA9IHRyYW5zZm9ybXMucm90YXRlIHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNEZWNsYXJhdGl2ZSAmJiBjdXJyZW50QW5nbGUpIHtcbiAgICAgICAgICBzdGFydC5yb3RhdGUgPSBjdXJyZW50QW5nbGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbW9ycGhlci5mcm9tKHN0YXJ0KTtcbiAgICAgIG1vcnBoZXIudG8odGFyZ2V0KTtcbiAgICAgIGNvbnN0IGFmZmluZVBhcmFtZXRlcnMgPSBtb3JwaGVyLmF0KHBvcyk7XG4gICAgICBjdXJyZW50QW5nbGUgPSBhZmZpbmVQYXJhbWV0ZXJzLnJvdGF0ZTtcbiAgICAgIGN1cnJlbnQgPSBuZXcgTWF0cml4KGFmZmluZVBhcmFtZXRlcnMpO1xuICAgICAgdGhpcy5hZGRUcmFuc2Zvcm0oY3VycmVudCk7XG5cbiAgICAgIGVsZW1lbnQuX2FkZFJ1bm5lcih0aGlzKTtcblxuICAgICAgcmV0dXJuIG1vcnBoZXIuZG9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJldGFyZ2V0KG5ld1RyYW5zZm9ybXMpIHtcbiAgICAgIC8vIG9ubHkgZ2V0IGEgbmV3IG9yaWdpbiBpZiBpdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGNhbGxcbiAgICAgIGlmICgobmV3VHJhbnNmb3Jtcy5vcmlnaW4gfHwgJ2NlbnRlcicpLnRvU3RyaW5nKCkgIT09ICh0cmFuc2Zvcm1zLm9yaWdpbiB8fCAnY2VudGVyJykudG9TdHJpbmcoKSkge1xuICAgICAgICBvcmlnaW4gPSBnZXRPcmlnaW4obmV3VHJhbnNmb3JtcywgZWxlbWVudCk7XG4gICAgICB9IC8vIG92ZXJ3cml0ZSB0aGUgb2xkIHRyYW5zZm9ybWF0aW9ucyB3aXRoIHRoZSBuZXcgb25lc1xuXG5cbiAgICAgIHRyYW5zZm9ybXMgPSB7IC4uLm5ld1RyYW5zZm9ybXMsXG4gICAgICAgIG9yaWdpblxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLnF1ZXVlKHNldHVwLCBydW4sIHJldGFyZ2V0LCB0cnVlKTtcbiAgICB0aGlzLl9pc0RlY2xhcmF0aXZlICYmIHRoaXMuX3JlbWVtYmVyTW9ycGhlcigndHJhbnNmb3JtJywgbW9ycGhlcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gQW5pbWF0YWJsZSB4LWF4aXNcbiAgeCh4LCByZWxhdGl2ZSkge1xuICAgIHJldHVybiB0aGlzLl9xdWV1ZU51bWJlcigneCcsIHgpO1xuICB9LFxuXG4gIC8vIEFuaW1hdGFibGUgeS1heGlzXG4gIHkoeSkge1xuICAgIHJldHVybiB0aGlzLl9xdWV1ZU51bWJlcigneScsIHkpO1xuICB9LFxuXG4gIGR4KHggPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXVlTnVtYmVyRGVsdGEoJ3gnLCB4KTtcbiAgfSxcblxuICBkeSh5ID0gMCkge1xuICAgIHJldHVybiB0aGlzLl9xdWV1ZU51bWJlckRlbHRhKCd5JywgeSk7XG4gIH0sXG5cbiAgZG1vdmUoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmR4KHgpLmR5KHkpO1xuICB9LFxuXG4gIF9xdWV1ZU51bWJlckRlbHRhKG1ldGhvZCwgdG8pIHtcbiAgICB0byA9IG5ldyBTVkdOdW1iZXIodG8pOyAvLyBUcnkgdG8gY2hhbmdlIHRoZSB0YXJnZXQgaWYgd2UgaGF2ZSB0aGlzIG1ldGhvZCBhbHJlYWR5IHJlZ2lzdGVyZFxuXG4gICAgaWYgKHRoaXMuX3RyeVJldGFyZ2V0KG1ldGhvZCwgdG8pKSByZXR1cm4gdGhpczsgLy8gTWFrZSBhIG1vcnBoZXIgYW5kIHF1ZXVlIHRoZSBhbmltYXRpb25cblxuICAgIGNvbnN0IG1vcnBoZXIgPSBuZXcgTW9ycGhhYmxlKHRoaXMuX3N0ZXBwZXIpLnRvKHRvKTtcbiAgICBsZXQgZnJvbSA9IG51bGw7XG4gICAgdGhpcy5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcm9tID0gdGhpcy5lbGVtZW50KClbbWV0aG9kXSgpO1xuICAgICAgbW9ycGhlci5mcm9tKGZyb20pO1xuICAgICAgbW9ycGhlci50byhmcm9tICsgdG8pO1xuICAgIH0sIGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudCgpW21ldGhvZF0obW9ycGhlci5hdChwb3MpKTtcbiAgICAgIHJldHVybiBtb3JwaGVyLmRvbmUoKTtcbiAgICB9LCBmdW5jdGlvbiAobmV3VG8pIHtcbiAgICAgIG1vcnBoZXIudG8oZnJvbSArIG5ldyBTVkdOdW1iZXIobmV3VG8pKTtcbiAgICB9KTsgLy8gUmVnaXN0ZXIgdGhlIG1vcnBoZXIgc28gdGhhdCBpZiBpdCBpcyBjaGFuZ2VkIGFnYWluLCB3ZSBjYW4gcmV0YXJnZXQgaXRcblxuICAgIHRoaXMuX3JlbWVtYmVyTW9ycGhlcihtZXRob2QsIG1vcnBoZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgX3F1ZXVlT2JqZWN0KG1ldGhvZCwgdG8pIHtcbiAgICAvLyBUcnkgdG8gY2hhbmdlIHRoZSB0YXJnZXQgaWYgd2UgaGF2ZSB0aGlzIG1ldGhvZCBhbHJlYWR5IHJlZ2lzdGVyZFxuICAgIGlmICh0aGlzLl90cnlSZXRhcmdldChtZXRob2QsIHRvKSkgcmV0dXJuIHRoaXM7IC8vIE1ha2UgYSBtb3JwaGVyIGFuZCBxdWV1ZSB0aGUgYW5pbWF0aW9uXG5cbiAgICBjb25zdCBtb3JwaGVyID0gbmV3IE1vcnBoYWJsZSh0aGlzLl9zdGVwcGVyKS50byh0byk7XG4gICAgdGhpcy5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICBtb3JwaGVyLmZyb20odGhpcy5lbGVtZW50KClbbWV0aG9kXSgpKTtcbiAgICB9LCBmdW5jdGlvbiAocG9zKSB7XG4gICAgICB0aGlzLmVsZW1lbnQoKVttZXRob2RdKG1vcnBoZXIuYXQocG9zKSk7XG4gICAgICByZXR1cm4gbW9ycGhlci5kb25lKCk7XG4gICAgfSk7IC8vIFJlZ2lzdGVyIHRoZSBtb3JwaGVyIHNvIHRoYXQgaWYgaXQgaXMgY2hhbmdlZCBhZ2Fpbiwgd2UgY2FuIHJldGFyZ2V0IGl0XG5cbiAgICB0aGlzLl9yZW1lbWJlck1vcnBoZXIobWV0aG9kLCBtb3JwaGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIF9xdWV1ZU51bWJlcihtZXRob2QsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXVlT2JqZWN0KG1ldGhvZCwgbmV3IFNWR051bWJlcih2YWx1ZSkpO1xuICB9LFxuXG4gIC8vIEFuaW1hdGFibGUgY2VudGVyIHgtYXhpc1xuICBjeCh4KSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXVlTnVtYmVyKCdjeCcsIHgpO1xuICB9LFxuXG4gIC8vIEFuaW1hdGFibGUgY2VudGVyIHktYXhpc1xuICBjeSh5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXVlTnVtYmVyKCdjeScsIHkpO1xuICB9LFxuXG4gIC8vIEFkZCBhbmltYXRhYmxlIG1vdmVcbiAgbW92ZSh4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMueCh4KS55KHkpO1xuICB9LFxuXG4gIC8vIEFkZCBhbmltYXRhYmxlIGNlbnRlclxuICBjZW50ZXIoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmN4KHgpLmN5KHkpO1xuICB9LFxuXG4gIC8vIEFkZCBhbmltYXRhYmxlIHNpemVcbiAgc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gYW5pbWF0ZSBiYm94IGJhc2VkIHNpemUgZm9yIGFsbCBvdGhlciBlbGVtZW50c1xuICAgIGxldCBib3g7XG5cbiAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpIHtcbiAgICAgIGJveCA9IHRoaXMuX2VsZW1lbnQuYmJveCgpO1xuICAgIH1cblxuICAgIGlmICghd2lkdGgpIHtcbiAgICAgIHdpZHRoID0gYm94LndpZHRoIC8gYm94LmhlaWdodCAqIGhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgaGVpZ2h0ID0gYm94LmhlaWdodCAvIGJveC53aWR0aCAqIHdpZHRoO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndpZHRoKHdpZHRoKS5oZWlnaHQoaGVpZ2h0KTtcbiAgfSxcblxuICAvLyBBZGQgYW5pbWF0YWJsZSB3aWR0aFxuICB3aWR0aCh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLl9xdWV1ZU51bWJlcignd2lkdGgnLCB3aWR0aCk7XG4gIH0sXG5cbiAgLy8gQWRkIGFuaW1hdGFibGUgaGVpZ2h0XG4gIGhlaWdodChoZWlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWVOdW1iZXIoJ2hlaWdodCcsIGhlaWdodCk7XG4gIH0sXG5cbiAgLy8gQWRkIGFuaW1hdGFibGUgcGxvdFxuICBwbG90KGEsIGIsIGMsIGQpIHtcbiAgICAvLyBMaW5lcyBjYW4gYmUgcGxvdHRlZCB3aXRoIDQgYXJndW1lbnRzXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsb3QoW2EsIGIsIGMsIGRdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdHJ5UmV0YXJnZXQoJ3Bsb3QnLCBhKSkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbW9ycGhlciA9IG5ldyBNb3JwaGFibGUodGhpcy5fc3RlcHBlcikudHlwZSh0aGlzLl9lbGVtZW50Lk1vcnBoQXJyYXkpLnRvKGEpO1xuICAgIHRoaXMucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgbW9ycGhlci5mcm9tKHRoaXMuX2VsZW1lbnQuYXJyYXkoKSk7XG4gICAgfSwgZnVuY3Rpb24gKHBvcykge1xuICAgICAgdGhpcy5fZWxlbWVudC5wbG90KG1vcnBoZXIuYXQocG9zKSk7XG5cbiAgICAgIHJldHVybiBtb3JwaGVyLmRvbmUoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlbWVtYmVyTW9ycGhlcigncGxvdCcsIG1vcnBoZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gQWRkIGxlYWRpbmcgbWV0aG9kXG4gIGxlYWRpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWVOdW1iZXIoJ2xlYWRpbmcnLCB2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gQWRkIGFuaW1hdGFibGUgdmlld2JveFxuICB2aWV3Ym94KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVldWVPYmplY3QoJ3ZpZXdib3gnLCBuZXcgQm94KHgsIHksIHdpZHRoLCBoZWlnaHQpKTtcbiAgfSxcblxuICB1cGRhdGUobykge1xuICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZSh7XG4gICAgICAgIG9mZnNldDogYXJndW1lbnRzWzBdLFxuICAgICAgICBjb2xvcjogYXJndW1lbnRzWzFdLFxuICAgICAgICBvcGFjaXR5OiBhcmd1bWVudHNbMl1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvLm9wYWNpdHkgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLW9wYWNpdHknLCBvLm9wYWNpdHkpO1xuICAgIGlmIChvLmNvbG9yICE9IG51bGwpIHRoaXMuYXR0cignc3RvcC1jb2xvcicsIG8uY29sb3IpO1xuICAgIGlmIChvLm9mZnNldCAhPSBudWxsKSB0aGlzLmF0dHIoJ29mZnNldCcsIG8ub2Zmc2V0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59KTtcbmV4dGVuZChSdW5uZXIsIHtcbiAgcngsXG4gIHJ5LFxuICBmcm9tLFxuICB0b1xufSk7XG5yZWdpc3RlcihSdW5uZXIsICdSdW5uZXInKTtcblxuY2xhc3MgU3ZnIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdzdmcnLCBub2RlKSwgYXR0cnMpO1xuICAgIHRoaXMubmFtZXNwYWNlKCk7XG4gIH0gLy8gQ3JlYXRlcyBhbmQgcmV0dXJucyBkZWZzIGVsZW1lbnRcblxuXG4gIGRlZnMoKSB7XG4gICAgaWYgKCF0aGlzLmlzUm9vdCgpKSByZXR1cm4gdGhpcy5yb290KCkuZGVmcygpO1xuICAgIHJldHVybiBhZG9wdCh0aGlzLm5vZGUucXVlcnlTZWxlY3RvcignZGVmcycpKSB8fCB0aGlzLnB1dChuZXcgRGVmcygpKTtcbiAgfVxuXG4gIGlzUm9vdCgpIHtcbiAgICByZXR1cm4gIXRoaXMubm9kZS5wYXJlbnROb2RlIHx8ICEodGhpcy5ub2RlLnBhcmVudE5vZGUgaW5zdGFuY2VvZiBnbG9iYWxzLndpbmRvdy5TVkdFbGVtZW50KSAmJiB0aGlzLm5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSAhPT0gJyNkb2N1bWVudC1mcmFnbWVudCc7XG4gIH0gLy8gQWRkIG5hbWVzcGFjZXNcblxuXG4gIG5hbWVzcGFjZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNSb290KCkpIHJldHVybiB0aGlzLnJvb3QoKS5uYW1lc3BhY2UoKTtcbiAgICByZXR1cm4gdGhpcy5hdHRyKHtcbiAgICAgIHhtbG5zOiBzdmcsXG4gICAgICB2ZXJzaW9uOiAnMS4xJ1xuICAgIH0pLmF0dHIoJ3htbG5zOnhsaW5rJywgeGxpbmssIHhtbG5zKS5hdHRyKCd4bWxuczpzdmdqcycsIHN2Z2pzLCB4bWxucyk7XG4gIH1cblxuICByZW1vdmVOYW1lc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cih7XG4gICAgICB4bWxuczogbnVsbCxcbiAgICAgIHZlcnNpb246IG51bGxcbiAgICB9KS5hdHRyKCd4bWxuczp4bGluaycsIG51bGwsIHhtbG5zKS5hdHRyKCd4bWxuczpzdmdqcycsIG51bGwsIHhtbG5zKTtcbiAgfSAvLyBDaGVjayBpZiB0aGlzIGlzIGEgcm9vdCBzdmdcbiAgLy8gSWYgbm90LCBjYWxsIHJvb3QoKSBmcm9tIHRoaXMgZWxlbWVudFxuXG5cbiAgcm9vdCgpIHtcbiAgICBpZiAodGhpcy5pc1Jvb3QoKSkgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIHN1cGVyLnJvb3QoKTtcbiAgfVxuXG59XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgbmVzdGVkIHN2ZyBkb2N1bWVudFxuICAgIG5lc3RlZDogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTdmcoKSk7XG4gICAgfSlcbiAgfVxufSk7XG5yZWdpc3RlcihTdmcsICdTdmcnLCB0cnVlKTtcblxuY2xhc3MgU3ltYm9sIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygnc3ltYm9sJywgbm9kZSksIGF0dHJzKTtcbiAgfVxuXG59XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICBzeW1ib2w6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU3ltYm9sKCkpO1xuICAgIH0pXG4gIH1cbn0pO1xucmVnaXN0ZXIoU3ltYm9sLCAnU3ltYm9sJyk7XG5cbmZ1bmN0aW9uIHBsYWluKHRleHQpIHtcbiAgLy8gY2xlYXIgaWYgYnVpbGQgbW9kZSBpcyBkaXNhYmxlZFxuICBpZiAodGhpcy5fYnVpbGQgPT09IGZhbHNlKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICB9IC8vIGNyZWF0ZSB0ZXh0IG5vZGVcblxuXG4gIHRoaXMubm9kZS5hcHBlbmRDaGlsZChnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgcmV0dXJuIHRoaXM7XG59IC8vIEdldCBsZW5ndGggb2YgdGV4dCBlbGVtZW50XG5cbmZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTtcbn0gLy8gTW92ZSBvdmVyIHgtYXhpc1xuLy8gVGV4dCBpcyBtb3ZlZCBieSBpdHMgYm91bmRpbmcgYm94XG4vLyB0ZXh0LWFuY2hvciBkb2VzIE5PVCBtYXR0ZXJcblxuZnVuY3Rpb24geCQxKHgsIGJveCA9IHRoaXMuYmJveCgpKSB7XG4gIGlmICh4ID09IG51bGwpIHtcbiAgICByZXR1cm4gYm94Lng7XG4gIH1cblxuICByZXR1cm4gdGhpcy5hdHRyKCd4JywgdGhpcy5hdHRyKCd4JykgKyB4IC0gYm94LngpO1xufSAvLyBNb3ZlIG92ZXIgeS1heGlzXG5cbmZ1bmN0aW9uIHkkMSh5LCBib3ggPSB0aGlzLmJib3goKSkge1xuICBpZiAoeSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGJveC55O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuYXR0cigneScsIHRoaXMuYXR0cigneScpICsgeSAtIGJveC55KTtcbn1cbmZ1bmN0aW9uIG1vdmUkMSh4LCB5LCBib3ggPSB0aGlzLmJib3goKSkge1xuICByZXR1cm4gdGhpcy54KHgsIGJveCkueSh5LCBib3gpO1xufSAvLyBNb3ZlIGNlbnRlciBvdmVyIHgtYXhpc1xuXG5mdW5jdGlvbiBjeCh4LCBib3ggPSB0aGlzLmJib3goKSkge1xuICBpZiAoeCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGJveC5jeDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmF0dHIoJ3gnLCB0aGlzLmF0dHIoJ3gnKSArIHggLSBib3guY3gpO1xufSAvLyBNb3ZlIGNlbnRlciBvdmVyIHktYXhpc1xuXG5mdW5jdGlvbiBjeSh5LCBib3ggPSB0aGlzLmJib3goKSkge1xuICBpZiAoeSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGJveC5jeTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmF0dHIoJ3knLCB0aGlzLmF0dHIoJ3knKSArIHkgLSBib3guY3kpO1xufVxuZnVuY3Rpb24gY2VudGVyKHgsIHksIGJveCA9IHRoaXMuYmJveCgpKSB7XG4gIHJldHVybiB0aGlzLmN4KHgsIGJveCkuY3koeSwgYm94KTtcbn1cbmZ1bmN0aW9uIGF4KHgpIHtcbiAgcmV0dXJuIHRoaXMuYXR0cigneCcsIHgpO1xufVxuZnVuY3Rpb24gYXkoeSkge1xuICByZXR1cm4gdGhpcy5hdHRyKCd5JywgeSk7XG59XG5mdW5jdGlvbiBhbW92ZSh4LCB5KSB7XG4gIHJldHVybiB0aGlzLmF4KHgpLmF5KHkpO1xufSAvLyBFbmFibGUgLyBkaXNhYmxlIGJ1aWxkIG1vZGVcblxuZnVuY3Rpb24gYnVpbGQoYnVpbGQpIHtcbiAgdGhpcy5fYnVpbGQgPSAhIWJ1aWxkO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHRleHRhYmxlID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIHBsYWluOiBwbGFpbixcbiAgbGVuZ3RoOiBsZW5ndGgsXG4gIHg6IHgkMSxcbiAgeTogeSQxLFxuICBtb3ZlOiBtb3ZlJDEsXG4gIGN4OiBjeCxcbiAgY3k6IGN5LFxuICBjZW50ZXI6IGNlbnRlcixcbiAgYXg6IGF4LFxuICBheTogYXksXG4gIGFtb3ZlOiBhbW92ZSxcbiAgYnVpbGQ6IGJ1aWxkXG59O1xuXG5jbGFzcyBUZXh0IGV4dGVuZHMgU2hhcGUge1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCd0ZXh0Jywgbm9kZSksIGF0dHJzKTtcbiAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWR051bWJlcigxLjMpOyAvLyBzdG9yZSBsZWFkaW5nIHZhbHVlIGZvciByZWJ1aWxkaW5nXG5cbiAgICB0aGlzLl9yZWJ1aWxkID0gdHJ1ZTsgLy8gZW5hYmxlIGF1dG9tYXRpYyB1cGRhdGluZyBvZiBkeSB2YWx1ZXNcblxuICAgIHRoaXMuX2J1aWxkID0gZmFsc2U7IC8vIGRpc2FibGUgYnVpbGQgbW9kZSBmb3IgYWRkaW5nIG11bHRpcGxlIGxpbmVzXG4gIH0gLy8gU2V0IC8gZ2V0IGxlYWRpbmdcblxuXG4gIGxlYWRpbmcodmFsdWUpIHtcbiAgICAvLyBhY3QgYXMgZ2V0dGVyXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvbS5sZWFkaW5nO1xuICAgIH0gLy8gYWN0IGFzIHNldHRlclxuXG5cbiAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWR051bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmVidWlsZCgpO1xuICB9IC8vIFJlYnVpbGQgYXBwZWFyYW5jZSB0eXBlXG5cblxuICByZWJ1aWxkKHJlYnVpbGQpIHtcbiAgICAvLyBzdG9yZSBuZXcgcmVidWlsZCBmbGFnIGlmIGdpdmVuXG4gICAgaWYgKHR5cGVvZiByZWJ1aWxkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuX3JlYnVpbGQgPSByZWJ1aWxkO1xuICAgIH0gLy8gZGVmaW5lIHBvc2l0aW9uIG9mIGFsbCBsaW5lc1xuXG5cbiAgICBpZiAodGhpcy5fcmVidWlsZCkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBsZXQgYmxhbmtMaW5lT2Zmc2V0ID0gMDtcbiAgICAgIGNvbnN0IGxlYWRpbmcgPSB0aGlzLmRvbS5sZWFkaW5nO1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gZ2xvYmFscy53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGUpLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpO1xuICAgICAgICBjb25zdCBkeSA9IGxlYWRpbmcgKiBuZXcgU1ZHTnVtYmVyKGZvbnRTaXplKTtcblxuICAgICAgICBpZiAodGhpcy5kb20ubmV3TGluZWQpIHtcbiAgICAgICAgICB0aGlzLmF0dHIoJ3gnLCBzZWxmLmF0dHIoJ3gnKSk7XG5cbiAgICAgICAgICBpZiAodGhpcy50ZXh0KCkgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBibGFua0xpbmVPZmZzZXQgKz0gZHk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cignZHknLCBpID8gZHkgKyBibGFua0xpbmVPZmZzZXQgOiAwKTtcbiAgICAgICAgICAgIGJsYW5rTGluZU9mZnNldCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZmlyZSgncmVidWlsZCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIG92ZXJ3cml0ZSBtZXRob2QgZnJvbSBwYXJlbnQgdG8gc2V0IGRhdGEgcHJvcGVybHlcblxuXG4gIHNldERhdGEobykge1xuICAgIHRoaXMuZG9tID0gbztcbiAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWR051bWJlcihvLmxlYWRpbmcgfHwgMS4zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBTZXQgdGhlIHRleHQgY29udGVudFxuXG5cbiAgdGV4dCh0ZXh0KSB7XG4gICAgLy8gYWN0IGFzIGdldHRlclxuICAgIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5ub2RlLmNoaWxkTm9kZXM7XG4gICAgICBsZXQgZmlyc3RMaW5lID0gMDtcbiAgICAgIHRleHQgPSAnJztcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIC8vIHNraXAgdGV4dFBhdGhzIC0gdGhleSBhcmUgbm8gbGluZXNcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLm5vZGVOYW1lID09PSAndGV4dFBhdGgnKSB7XG4gICAgICAgICAgaWYgKGkgPT09IDApIGZpcnN0TGluZSA9IDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gYWRkIG5ld2xpbmUgaWYgaXRzIG5vdCB0aGUgZmlyc3QgY2hpbGQgYW5kIG5ld0xpbmVkIGlzIHNldCB0byB0cnVlXG5cblxuICAgICAgICBpZiAoaSAhPT0gZmlyc3RMaW5lICYmIGNoaWxkcmVuW2ldLm5vZGVUeXBlICE9PSAzICYmIGFkb3B0KGNoaWxkcmVuW2ldKS5kb20ubmV3TGluZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0ZXh0ICs9ICdcXG4nO1xuICAgICAgICB9IC8vIGFkZCBjb250ZW50IG9mIHRoaXMgbm9kZVxuXG5cbiAgICAgICAgdGV4dCArPSBjaGlsZHJlbltpXS50ZXh0Q29udGVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfSAvLyByZW1vdmUgZXhpc3RpbmcgY29udGVudFxuXG5cbiAgICB0aGlzLmNsZWFyKCkuYnVpbGQodHJ1ZSk7XG5cbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGNhbGwgYmxvY2tcbiAgICAgIHRleHQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RvcmUgdGV4dCBhbmQgbWFrZSBzdXJlIHRleHQgaXMgbm90IGJsYW5rXG4gICAgICB0ZXh0ID0gKHRleHQgKyAnJykuc3BsaXQoJ1xcbicpOyAvLyBidWlsZCBuZXcgbGluZXNcblxuICAgICAgZm9yIChsZXQgaiA9IDAsIGpsID0gdGV4dC5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgIHRoaXMubmV3TGluZSh0ZXh0W2pdKTtcbiAgICAgIH1cbiAgICB9IC8vIGRpc2FibGUgYnVpbGQgbW9kZSBhbmQgcmVidWlsZCBsaW5lc1xuXG5cbiAgICByZXR1cm4gdGhpcy5idWlsZChmYWxzZSkucmVidWlsZCgpO1xuICB9XG5cbn1cbmV4dGVuZChUZXh0LCB0ZXh0YWJsZSk7XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgdGV4dCBlbGVtZW50XG4gICAgdGV4dDogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHRleHQgPSAnJykge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBUZXh0KCkpLnRleHQodGV4dCk7XG4gICAgfSksXG4gICAgLy8gQ3JlYXRlIHBsYWluIHRleHQgZWxlbWVudFxuICAgIHBsYWluOiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAodGV4dCA9ICcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFRleHQoKSkucGxhaW4odGV4dCk7XG4gICAgfSlcbiAgfVxufSk7XG5yZWdpc3RlcihUZXh0LCAnVGV4dCcpO1xuXG5jbGFzcyBUc3BhbiBleHRlbmRzIFNoYXBlIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygndHNwYW4nLCBub2RlKSwgYXR0cnMpO1xuICAgIHRoaXMuX2J1aWxkID0gZmFsc2U7IC8vIGRpc2FibGUgYnVpbGQgbW9kZSBmb3IgYWRkaW5nIG11bHRpcGxlIGxpbmVzXG4gIH0gLy8gU2hvcnRjdXQgZHhcblxuXG4gIGR4KGR4KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignZHgnLCBkeCk7XG4gIH0gLy8gU2hvcnRjdXQgZHlcblxuXG4gIGR5KGR5KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignZHknLCBkeSk7XG4gIH0gLy8gQ3JlYXRlIG5ldyBsaW5lXG5cblxuICBuZXdMaW5lKCkge1xuICAgIC8vIG1hcmsgbmV3IGxpbmVcbiAgICB0aGlzLmRvbS5uZXdMaW5lZCA9IHRydWU7IC8vIGZldGNoIHBhcmVudFxuXG4gICAgY29uc3QgdGV4dCA9IHRoaXMucGFyZW50KCk7IC8vIGVhcmx5IHJldHVybiBpbiBjYXNlIHdlIGFyZSBub3QgaW4gYSB0ZXh0IGVsZW1lbnRcblxuICAgIGlmICghKHRleHQgaW5zdGFuY2VvZiBUZXh0KSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uc3QgaSA9IHRleHQuaW5kZXgodGhpcyk7XG4gICAgY29uc3QgZm9udFNpemUgPSBnbG9iYWxzLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMubm9kZSkuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJyk7XG4gICAgY29uc3QgZHkgPSB0ZXh0LmRvbS5sZWFkaW5nICogbmV3IFNWR051bWJlcihmb250U2l6ZSk7IC8vIGFwcGx5IG5ldyBwb3NpdGlvblxuXG4gICAgcmV0dXJuIHRoaXMuZHkoaSA/IGR5IDogMCkuYXR0cigneCcsIHRleHQueCgpKTtcbiAgfSAvLyBTZXQgdGV4dCBjb250ZW50XG5cblxuICB0ZXh0KHRleHQpIHtcbiAgICBpZiAodGV4dCA9PSBudWxsKSByZXR1cm4gdGhpcy5ub2RlLnRleHRDb250ZW50ICsgKHRoaXMuZG9tLm5ld0xpbmVkID8gJ1xcbicgOiAnJyk7XG5cbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY2xlYXIoKS5idWlsZCh0cnVlKTtcbiAgICAgIHRleHQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgIHRoaXMuYnVpbGQoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYWluKHRleHQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cbmV4dGVuZChUc3BhbiwgdGV4dGFibGUpO1xucmVnaXN0ZXJNZXRob2RzKHtcbiAgVHNwYW46IHtcbiAgICB0c3Bhbjogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHRleHQgPSAnJykge1xuICAgICAgY29uc3QgdHNwYW4gPSBuZXcgVHNwYW4oKTsgLy8gY2xlYXIgaWYgYnVpbGQgbW9kZSBpcyBkaXNhYmxlZFxuXG4gICAgICBpZiAoIXRoaXMuX2J1aWxkKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIH0gLy8gYWRkIG5ldyB0c3BhblxuXG5cbiAgICAgIHJldHVybiB0aGlzLnB1dCh0c3BhbikudGV4dCh0ZXh0KTtcbiAgICB9KVxuICB9LFxuICBUZXh0OiB7XG4gICAgbmV3TGluZTogZnVuY3Rpb24gKHRleHQgPSAnJykge1xuICAgICAgcmV0dXJuIHRoaXMudHNwYW4odGV4dCkubmV3TGluZSgpO1xuICAgIH1cbiAgfVxufSk7XG5yZWdpc3RlcihUc3BhbiwgJ1RzcGFuJyk7XG5cbmNsYXNzIENpcmNsZSBleHRlbmRzIFNoYXBlIHtcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdjaXJjbGUnLCBub2RlKSwgYXR0cnMpO1xuICB9XG5cbiAgcmFkaXVzKHIpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdyJywgcik7XG4gIH0gLy8gUmFkaXVzIHggdmFsdWVcblxuXG4gIHJ4KHJ4KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cigncicsIHJ4KTtcbiAgfSAvLyBBbGlhcyByYWRpdXMgeCB2YWx1ZVxuXG5cbiAgcnkocnkpIHtcbiAgICByZXR1cm4gdGhpcy5yeChyeSk7XG4gIH1cblxuICBzaXplKHNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5yYWRpdXMobmV3IFNWR051bWJlcihzaXplKS5kaXZpZGUoMikpO1xuICB9XG5cbn1cbmV4dGVuZChDaXJjbGUsIHtcbiAgeDogeCQzLFxuICB5OiB5JDMsXG4gIGN4OiBjeCQxLFxuICBjeTogY3kkMSxcbiAgd2lkdGg6IHdpZHRoJDIsXG4gIGhlaWdodDogaGVpZ2h0JDJcbn0pO1xucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgLy8gQ3JlYXRlIGNpcmNsZSBlbGVtZW50XG4gICAgY2lyY2xlOiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAoc2l6ZSA9IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgQ2lyY2xlKCkpLnNpemUoc2l6ZSkubW92ZSgwLCAwKTtcbiAgICB9KVxuICB9XG59KTtcbnJlZ2lzdGVyKENpcmNsZSwgJ0NpcmNsZScpO1xuXG5jbGFzcyBDbGlwUGF0aCBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygnY2xpcFBhdGgnLCBub2RlKSwgYXR0cnMpO1xuICB9IC8vIFVuY2xpcCBhbGwgY2xpcHBlZCBlbGVtZW50cyBhbmQgcmVtb3ZlIGl0c2VsZlxuXG5cbiAgcmVtb3ZlKCkge1xuICAgIC8vIHVuY2xpcCBhbGwgdGFyZ2V0c1xuICAgIHRoaXMudGFyZ2V0cygpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC51bmNsaXAoKTtcbiAgICB9KTsgLy8gcmVtb3ZlIGNsaXBQYXRoIGZyb20gcGFyZW50XG5cbiAgICByZXR1cm4gc3VwZXIucmVtb3ZlKCk7XG4gIH1cblxuICB0YXJnZXRzKCkge1xuICAgIHJldHVybiBiYXNlRmluZCgnc3ZnIFtjbGlwLXBhdGgqPVwiJyArIHRoaXMuaWQoKSArICdcIl0nKTtcbiAgfVxuXG59XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgY2xpcHBpbmcgZWxlbWVudFxuICAgIGNsaXA6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZnMoKS5wdXQobmV3IENsaXBQYXRoKCkpO1xuICAgIH0pXG4gIH0sXG4gIEVsZW1lbnQ6IHtcbiAgICAvLyBEaXN0cmlidXRlIGNsaXBQYXRoIHRvIHN2ZyBlbGVtZW50XG4gICAgY2xpcHBlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZSgnY2xpcC1wYXRoJyk7XG4gICAgfSxcblxuICAgIGNsaXBXaXRoKGVsZW1lbnQpIHtcbiAgICAgIC8vIHVzZSBnaXZlbiBjbGlwIG9yIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgIGNvbnN0IGNsaXBwZXIgPSBlbGVtZW50IGluc3RhbmNlb2YgQ2xpcFBhdGggPyBlbGVtZW50IDogdGhpcy5wYXJlbnQoKS5jbGlwKCkuYWRkKGVsZW1lbnQpOyAvLyBhcHBseSBtYXNrXG5cbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2NsaXAtcGF0aCcsICd1cmwoXCIjJyArIGNsaXBwZXIuaWQoKSArICdcIiknKTtcbiAgICB9LFxuXG4gICAgLy8gVW5jbGlwIGVsZW1lbnRcbiAgICB1bmNsaXAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdjbGlwLXBhdGgnLCBudWxsKTtcbiAgICB9XG5cbiAgfVxufSk7XG5yZWdpc3RlcihDbGlwUGF0aCwgJ0NsaXBQYXRoJyk7XG5cbmNsYXNzIEZvcmVpZ25PYmplY3QgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdmb3JlaWduT2JqZWN0Jywgbm9kZSksIGF0dHJzKTtcbiAgfVxuXG59XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICBmb3JlaWduT2JqZWN0OiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBGb3JlaWduT2JqZWN0KCkpLnNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfSlcbiAgfVxufSk7XG5yZWdpc3RlcihGb3JlaWduT2JqZWN0LCAnRm9yZWlnbk9iamVjdCcpO1xuXG5mdW5jdGlvbiBkbW92ZShkeCwgZHkpIHtcbiAgdGhpcy5jaGlsZHJlbigpLmZvckVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgbGV0IGJib3g7IC8vIFdlIGhhdmUgdG8gd3JhcCB0aGlzIGZvciBlbGVtZW50cyB0aGF0IGRvbnQgaGF2ZSBhIGJib3hcbiAgICAvLyBlLmcuIHRpdGxlIGFuZCBvdGhlciBkZXNjcmlwdGl2ZSBlbGVtZW50c1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB0aGUgY2hpbGRzIGJib3hcbiAgICAgIGJib3ggPSBjaGlsZC5iYm94KCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IGNoaWxkcyBtYXRyaXhcblxuXG4gICAgY29uc3QgbSA9IG5ldyBNYXRyaXgoY2hpbGQpOyAvLyBUcmFuc2xhdGUgY2hpbGRzIG1hdHJpeCBieSBhbW91bnQgYW5kXG4gICAgLy8gdHJhbnNmb3JtIGl0IGJhY2sgaW50byBwYXJlbnRzIHNwYWNlXG5cbiAgICBjb25zdCBtYXRyaXggPSBtLnRyYW5zbGF0ZShkeCwgZHkpLnRyYW5zZm9ybShtLmludmVyc2UoKSk7IC8vIENhbGN1bGF0ZSBuZXcgeCBhbmQgeSBmcm9tIG9sZCBib3hcblxuICAgIGNvbnN0IHAgPSBuZXcgUG9pbnQoYmJveC54LCBiYm94LnkpLnRyYW5zZm9ybShtYXRyaXgpOyAvLyBNb3ZlIGVsZW1lbnRcblxuICAgIGNoaWxkLm1vdmUocC54LCBwLnkpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkeChkeCkge1xuICByZXR1cm4gdGhpcy5kbW92ZShkeCwgMCk7XG59XG5mdW5jdGlvbiBkeShkeSkge1xuICByZXR1cm4gdGhpcy5kbW92ZSgwLCBkeSk7XG59XG5mdW5jdGlvbiBoZWlnaHQoaGVpZ2h0LCBib3ggPSB0aGlzLmJib3goKSkge1xuICBpZiAoaGVpZ2h0ID09IG51bGwpIHJldHVybiBib3guaGVpZ2h0O1xuICByZXR1cm4gdGhpcy5zaXplKGJveC53aWR0aCwgaGVpZ2h0LCBib3gpO1xufVxuZnVuY3Rpb24gbW92ZSh4ID0gMCwgeSA9IDAsIGJveCA9IHRoaXMuYmJveCgpKSB7XG4gIGNvbnN0IGR4ID0geCAtIGJveC54O1xuICBjb25zdCBkeSA9IHkgLSBib3gueTtcbiAgcmV0dXJuIHRoaXMuZG1vdmUoZHgsIGR5KTtcbn1cbmZ1bmN0aW9uIHNpemUod2lkdGgsIGhlaWdodCwgYm94ID0gdGhpcy5iYm94KCkpIHtcbiAgY29uc3QgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcywgd2lkdGgsIGhlaWdodCwgYm94KTtcbiAgY29uc3Qgc2NhbGVYID0gcC53aWR0aCAvIGJveC53aWR0aDtcbiAgY29uc3Qgc2NhbGVZID0gcC5oZWlnaHQgLyBib3guaGVpZ2h0O1xuICB0aGlzLmNoaWxkcmVuKCkuZm9yRWFjaCgoY2hpbGQsIGkpID0+IHtcbiAgICBjb25zdCBvID0gbmV3IFBvaW50KGJveCkudHJhbnNmb3JtKG5ldyBNYXRyaXgoY2hpbGQpLmludmVyc2UoKSk7XG4gICAgY2hpbGQuc2NhbGUoc2NhbGVYLCBzY2FsZVksIG8ueCwgby55KTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gd2lkdGgod2lkdGgsIGJveCA9IHRoaXMuYmJveCgpKSB7XG4gIGlmICh3aWR0aCA9PSBudWxsKSByZXR1cm4gYm94LndpZHRoO1xuICByZXR1cm4gdGhpcy5zaXplKHdpZHRoLCBib3guaGVpZ2h0LCBib3gpO1xufVxuZnVuY3Rpb24geCh4LCBib3ggPSB0aGlzLmJib3goKSkge1xuICBpZiAoeCA9PSBudWxsKSByZXR1cm4gYm94Lng7XG4gIHJldHVybiB0aGlzLm1vdmUoeCwgYm94LnksIGJveCk7XG59XG5mdW5jdGlvbiB5KHksIGJveCA9IHRoaXMuYmJveCgpKSB7XG4gIGlmICh5ID09IG51bGwpIHJldHVybiBib3gueTtcbiAgcmV0dXJuIHRoaXMubW92ZShib3gueCwgeSwgYm94KTtcbn1cblxudmFyIGNvbnRhaW5lckdlb21ldHJ5ID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIGRtb3ZlOiBkbW92ZSxcbiAgZHg6IGR4LFxuICBkeTogZHksXG4gIGhlaWdodDogaGVpZ2h0LFxuICBtb3ZlOiBtb3ZlLFxuICBzaXplOiBzaXplLFxuICB3aWR0aDogd2lkdGgsXG4gIHg6IHgsXG4gIHk6IHlcbn07XG5cbmNsYXNzIEcgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ2cnLCBub2RlKSwgYXR0cnMpO1xuICB9XG5cbn1cbmV4dGVuZChHLCBjb250YWluZXJHZW9tZXRyeSk7XG5yZWdpc3Rlck1ldGhvZHMoe1xuICBDb250YWluZXI6IHtcbiAgICAvLyBDcmVhdGUgYSBncm91cCBlbGVtZW50XG4gICAgZ3JvdXA6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgRygpKTtcbiAgICB9KVxuICB9XG59KTtcbnJlZ2lzdGVyKEcsICdHJyk7XG5cbmNsYXNzIEEgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ2EnLCBub2RlKSwgYXR0cnMpO1xuICB9IC8vIExpbmsgdGFyZ2V0IGF0dHJpYnV0ZVxuXG5cbiAgdGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ3RhcmdldCcsIHRhcmdldCk7XG4gIH0gLy8gTGluayB1cmxcblxuXG4gIHRvKHVybCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCB1cmwsIHhsaW5rKTtcbiAgfVxuXG59XG5leHRlbmQoQSwgY29udGFpbmVyR2VvbWV0cnkpO1xucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgLy8gQ3JlYXRlIGEgaHlwZXJsaW5rIGVsZW1lbnRcbiAgICBsaW5rOiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IEEoKSkudG8odXJsKTtcbiAgICB9KVxuICB9LFxuICBFbGVtZW50OiB7XG4gICAgdW5saW5rKCkge1xuICAgICAgY29uc3QgbGluayA9IHRoaXMubGlua2VyKCk7XG4gICAgICBpZiAoIWxpbmspIHJldHVybiB0aGlzO1xuICAgICAgY29uc3QgcGFyZW50ID0gbGluay5wYXJlbnQoKTtcblxuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyZW50LmluZGV4KGxpbmspO1xuICAgICAgcGFyZW50LmFkZCh0aGlzLCBpbmRleCk7XG4gICAgICBsaW5rLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGxpbmtUbyh1cmwpIHtcbiAgICAgIC8vIHJldXNlIG9sZCBsaW5rIGlmIHBvc3NpYmxlXG4gICAgICBsZXQgbGluayA9IHRoaXMubGlua2VyKCk7XG5cbiAgICAgIGlmICghbGluaykge1xuICAgICAgICBsaW5rID0gbmV3IEEoKTtcbiAgICAgICAgdGhpcy53cmFwKGxpbmspO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1cmwuY2FsbChsaW5rLCBsaW5rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmsudG8odXJsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGxpbmtlcigpIHtcbiAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLnBhcmVudCgpO1xuXG4gICAgICBpZiAobGluayAmJiBsaW5rLm5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgfVxufSk7XG5yZWdpc3RlcihBLCAnQScpO1xuXG5jbGFzcyBNYXNrIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygnbWFzaycsIG5vZGUpLCBhdHRycyk7XG4gIH0gLy8gVW5tYXNrIGFsbCBtYXNrZWQgZWxlbWVudHMgYW5kIHJlbW92ZSBpdHNlbGZcblxuXG4gIHJlbW92ZSgpIHtcbiAgICAvLyB1bm1hc2sgYWxsIHRhcmdldHNcbiAgICB0aGlzLnRhcmdldHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwudW5tYXNrKCk7XG4gICAgfSk7IC8vIHJlbW92ZSBtYXNrIGZyb20gcGFyZW50XG5cbiAgICByZXR1cm4gc3VwZXIucmVtb3ZlKCk7XG4gIH1cblxuICB0YXJnZXRzKCkge1xuICAgIHJldHVybiBiYXNlRmluZCgnc3ZnIFttYXNrKj1cIicgKyB0aGlzLmlkKCkgKyAnXCJdJyk7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgbWFzazogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLnB1dChuZXcgTWFzaygpKTtcbiAgICB9KVxuICB9LFxuICBFbGVtZW50OiB7XG4gICAgLy8gRGlzdHJpYnV0ZSBtYXNrIHRvIHN2ZyBlbGVtZW50XG4gICAgbWFza2VyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlKCdtYXNrJyk7XG4gICAgfSxcblxuICAgIG1hc2tXaXRoKGVsZW1lbnQpIHtcbiAgICAgIC8vIHVzZSBnaXZlbiBtYXNrIG9yIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgIGNvbnN0IG1hc2tlciA9IGVsZW1lbnQgaW5zdGFuY2VvZiBNYXNrID8gZWxlbWVudCA6IHRoaXMucGFyZW50KCkubWFzaygpLmFkZChlbGVtZW50KTsgLy8gYXBwbHkgbWFza1xuXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdtYXNrJywgJ3VybChcIiMnICsgbWFza2VyLmlkKCkgKyAnXCIpJyk7XG4gICAgfSxcblxuICAgIC8vIFVubWFzayBlbGVtZW50XG4gICAgdW5tYXNrKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignbWFzaycsIG51bGwpO1xuICAgIH1cblxuICB9XG59KTtcbnJlZ2lzdGVyKE1hc2ssICdNYXNrJyk7XG5cbmNsYXNzIFN0b3AgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3Iobm9kZSwgYXR0cnMgPSBub2RlKSB7XG4gICAgc3VwZXIobm9kZU9yTmV3KCdzdG9wJywgbm9kZSksIGF0dHJzKTtcbiAgfSAvLyBhZGQgY29sb3Igc3RvcHNcblxuXG4gIHVwZGF0ZShvKSB7XG4gICAgaWYgKHR5cGVvZiBvID09PSAnbnVtYmVyJyB8fCBvIGluc3RhbmNlb2YgU1ZHTnVtYmVyKSB7XG4gICAgICBvID0ge1xuICAgICAgICBvZmZzZXQ6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgY29sb3I6IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgb3BhY2l0eTogYXJndW1lbnRzWzJdXG4gICAgICB9O1xuICAgIH0gLy8gc2V0IGF0dHJpYnV0ZXNcblxuXG4gICAgaWYgKG8ub3BhY2l0eSAhPSBudWxsKSB0aGlzLmF0dHIoJ3N0b3Atb3BhY2l0eScsIG8ub3BhY2l0eSk7XG4gICAgaWYgKG8uY29sb3IgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLWNvbG9yJywgby5jb2xvcik7XG4gICAgaWYgKG8ub2Zmc2V0ICE9IG51bGwpIHRoaXMuYXR0cignb2Zmc2V0JywgbmV3IFNWR051bWJlcihvLm9mZnNldCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIEdyYWRpZW50OiB7XG4gICAgLy8gQWRkIGEgY29sb3Igc3RvcFxuICAgIHN0b3A6IGZ1bmN0aW9uIChvZmZzZXQsIGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFN0b3AoKSkudXBkYXRlKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpO1xuICAgIH1cbiAgfVxufSk7XG5yZWdpc3RlcihTdG9wLCAnU3RvcCcpO1xuXG5mdW5jdGlvbiBjc3NSdWxlKHNlbGVjdG9yLCBydWxlKSB7XG4gIGlmICghc2VsZWN0b3IpIHJldHVybiAnJztcbiAgaWYgKCFydWxlKSByZXR1cm4gc2VsZWN0b3I7XG4gIGxldCByZXQgPSBzZWxlY3RvciArICd7JztcblxuICBmb3IgKGNvbnN0IGkgaW4gcnVsZSkge1xuICAgIHJldCArPSB1bkNhbWVsQ2FzZShpKSArICc6JyArIHJ1bGVbaV0gKyAnOyc7XG4gIH1cblxuICByZXQgKz0gJ30nO1xuICByZXR1cm4gcmV0O1xufVxuXG5jbGFzcyBTdHlsZSBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhdHRycyA9IG5vZGUpIHtcbiAgICBzdXBlcihub2RlT3JOZXcoJ3N0eWxlJywgbm9kZSksIGF0dHJzKTtcbiAgfVxuXG4gIGFkZFRleHQodyA9ICcnKSB7XG4gICAgdGhpcy5ub2RlLnRleHRDb250ZW50ICs9IHc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmb250KG5hbWUsIHNyYywgcGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlKCdAZm9udC1mYWNlJywge1xuICAgICAgZm9udEZhbWlseTogbmFtZSxcbiAgICAgIHNyYzogc3JjLFxuICAgICAgLi4ucGFyYW1zXG4gICAgfSk7XG4gIH1cblxuICBydWxlKHNlbGVjdG9yLCBvYmopIHtcbiAgICByZXR1cm4gdGhpcy5hZGRUZXh0KGNzc1J1bGUoc2VsZWN0b3IsIG9iaikpO1xuICB9XG5cbn1cbnJlZ2lzdGVyTWV0aG9kcygnRG9tJywge1xuICBzdHlsZShzZWxlY3Rvciwgb2JqKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTdHlsZSgpKS5ydWxlKHNlbGVjdG9yLCBvYmopO1xuICB9LFxuXG4gIGZvbnRmYWNlKG5hbWUsIHNyYywgcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTdHlsZSgpKS5mb250KG5hbWUsIHNyYywgcGFyYW1zKTtcbiAgfVxuXG59KTtcbnJlZ2lzdGVyKFN0eWxlLCAnU3R5bGUnKTtcblxuY2xhc3MgVGV4dFBhdGggZXh0ZW5kcyBUZXh0IHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygndGV4dFBhdGgnLCBub2RlKSwgYXR0cnMpO1xuICB9IC8vIHJldHVybiB0aGUgYXJyYXkgb2YgdGhlIHBhdGggdHJhY2sgZWxlbWVudFxuXG5cbiAgYXJyYXkoKSB7XG4gICAgY29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrKCk7XG4gICAgcmV0dXJuIHRyYWNrID8gdHJhY2suYXJyYXkoKSA6IG51bGw7XG4gIH0gLy8gUGxvdCBwYXRoIGlmIGFueVxuXG5cbiAgcGxvdChkKSB7XG4gICAgY29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrKCk7XG4gICAgbGV0IHBhdGhBcnJheSA9IG51bGw7XG5cbiAgICBpZiAodHJhY2spIHtcbiAgICAgIHBhdGhBcnJheSA9IHRyYWNrLnBsb3QoZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgPT0gbnVsbCA/IHBhdGhBcnJheSA6IHRoaXM7XG4gIH0gLy8gR2V0IHRoZSBwYXRoIGVsZW1lbnRcblxuXG4gIHRyYWNrKCkge1xuICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZSgnaHJlZicpO1xuICB9XG5cbn1cbnJlZ2lzdGVyTWV0aG9kcyh7XG4gIENvbnRhaW5lcjoge1xuICAgIHRleHRQYXRoOiB3cmFwV2l0aEF0dHJDaGVjayhmdW5jdGlvbiAodGV4dCwgcGF0aCkge1xuICAgICAgLy8gQ29udmVydCB0ZXh0IHRvIGluc3RhbmNlIGlmIG5lZWRlZFxuICAgICAgaWYgKCEodGV4dCBpbnN0YW5jZW9mIFRleHQpKSB7XG4gICAgICAgIHRleHQgPSB0aGlzLnRleHQodGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZXh0LnBhdGgocGF0aCk7XG4gICAgfSlcbiAgfSxcbiAgVGV4dDoge1xuICAgIC8vIENyZWF0ZSBwYXRoIGZvciB0ZXh0IHRvIHJ1biBvblxuICAgIHBhdGg6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uICh0cmFjaywgaW1wb3J0Tm9kZXMgPSB0cnVlKSB7XG4gICAgICBjb25zdCB0ZXh0UGF0aCA9IG5ldyBUZXh0UGF0aCgpOyAvLyBpZiB0cmFjayBpcyBhIHBhdGgsIHJldXNlIGl0XG5cbiAgICAgIGlmICghKHRyYWNrIGluc3RhbmNlb2YgUGF0aCkpIHtcbiAgICAgICAgLy8gY3JlYXRlIHBhdGggZWxlbWVudFxuICAgICAgICB0cmFjayA9IHRoaXMuZGVmcygpLnBhdGgodHJhY2spO1xuICAgICAgfSAvLyBsaW5rIHRleHRQYXRoIHRvIHBhdGggYW5kIGFkZCBjb250ZW50XG5cblxuICAgICAgdGV4dFBhdGguYXR0cignaHJlZicsICcjJyArIHRyYWNrLCB4bGluayk7IC8vIFRyYW5zcGxhbnQgYWxsIG5vZGVzIGZyb20gdGV4dCB0byB0ZXh0UGF0aFxuXG4gICAgICBsZXQgbm9kZTtcblxuICAgICAgaWYgKGltcG9ydE5vZGVzKSB7XG4gICAgICAgIHdoaWxlIChub2RlID0gdGhpcy5ub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICB0ZXh0UGF0aC5ub2RlLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFkZCB0ZXh0UGF0aCBlbGVtZW50IGFzIGNoaWxkIG5vZGUgYW5kIHJldHVybiB0ZXh0UGF0aFxuXG5cbiAgICAgIHJldHVybiB0aGlzLnB1dCh0ZXh0UGF0aCk7XG4gICAgfSksXG5cbiAgICAvLyBHZXQgdGhlIHRleHRQYXRoIGNoaWxkcmVuXG4gICAgdGV4dFBhdGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kT25lKCd0ZXh0UGF0aCcpO1xuICAgIH1cblxuICB9LFxuICBQYXRoOiB7XG4gICAgLy8gY3JlYXRlcyBhIHRleHRQYXRoIGZyb20gdGhpcyBwYXRoXG4gICAgdGV4dDogd3JhcFdpdGhBdHRyQ2hlY2soZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIC8vIENvbnZlcnQgdGV4dCB0byBpbnN0YW5jZSBpZiBuZWVkZWRcbiAgICAgIGlmICghKHRleHQgaW5zdGFuY2VvZiBUZXh0KSkge1xuICAgICAgICB0ZXh0ID0gbmV3IFRleHQoKS5hZGRUbyh0aGlzLnBhcmVudCgpKS50ZXh0KHRleHQpO1xuICAgICAgfSAvLyBDcmVhdGUgdGV4dFBhdGggZnJvbSB0ZXh0IGFuZCBwYXRoIGFuZCByZXR1cm5cblxuXG4gICAgICByZXR1cm4gdGV4dC5wYXRoKHRoaXMpO1xuICAgIH0pLFxuXG4gICAgdGFyZ2V0cygpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZCgnc3ZnIHRleHRQYXRoJykuZmlsdGVyKG5vZGUgPT4ge1xuICAgICAgICByZXR1cm4gKG5vZGUuYXR0cignaHJlZicpIHx8ICcnKS5pbmNsdWRlcyh0aGlzLmlkKCkpO1xuICAgICAgfSk7IC8vIERvZXMgbm90IHdvcmsgaW4gSUUxMS4gVXNlIHdoZW4gSUUgc3VwcG9ydCBpcyBkcm9wcGVkXG4gICAgICAvLyByZXR1cm4gYmFzZUZpbmQoJ3N2ZyB0ZXh0UGF0aFsqfGhyZWYqPVwiJyArIHRoaXMuaWQoKSArICdcIl0nKVxuICAgIH1cblxuICB9XG59KTtcblRleHRQYXRoLnByb3RvdHlwZS5Nb3JwaEFycmF5ID0gUGF0aEFycmF5O1xucmVnaXN0ZXIoVGV4dFBhdGgsICdUZXh0UGF0aCcpO1xuXG5jbGFzcyBVc2UgZXh0ZW5kcyBTaGFwZSB7XG4gIGNvbnN0cnVjdG9yKG5vZGUsIGF0dHJzID0gbm9kZSkge1xuICAgIHN1cGVyKG5vZGVPck5ldygndXNlJywgbm9kZSksIGF0dHJzKTtcbiAgfSAvLyBVc2UgZWxlbWVudCBhcyBhIHJlZmVyZW5jZVxuXG5cbiAgdXNlKGVsZW1lbnQsIGZpbGUpIHtcbiAgICAvLyBTZXQgbGluZWQgZWxlbWVudFxuICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCAoZmlsZSB8fCAnJykgKyAnIycgKyBlbGVtZW50LCB4bGluayk7XG4gIH1cblxufVxucmVnaXN0ZXJNZXRob2RzKHtcbiAgQ29udGFpbmVyOiB7XG4gICAgLy8gQ3JlYXRlIGEgdXNlIGVsZW1lbnRcbiAgICB1c2U6IHdyYXBXaXRoQXR0ckNoZWNrKGZ1bmN0aW9uIChlbGVtZW50LCBmaWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFVzZSgpKS51c2UoZWxlbWVudCwgZmlsZSk7XG4gICAgfSlcbiAgfVxufSk7XG5yZWdpc3RlcihVc2UsICdVc2UnKTtcblxuLyogT3B0aW9uYWwgTW9kdWxlcyAqL1xuY29uc3QgU1ZHID0gbWFrZUluc3RhbmNlO1xuZXh0ZW5kKFtTdmcsIFN5bWJvbCwgSW1hZ2UsIFBhdHRlcm4sIE1hcmtlcl0sIGdldE1ldGhvZHNGb3IoJ3ZpZXdib3gnKSk7XG5leHRlbmQoW0xpbmUsIFBvbHlsaW5lLCBQb2x5Z29uLCBQYXRoXSwgZ2V0TWV0aG9kc0ZvcignbWFya2VyJykpO1xuZXh0ZW5kKFRleHQsIGdldE1ldGhvZHNGb3IoJ1RleHQnKSk7XG5leHRlbmQoUGF0aCwgZ2V0TWV0aG9kc0ZvcignUGF0aCcpKTtcbmV4dGVuZChEZWZzLCBnZXRNZXRob2RzRm9yKCdEZWZzJykpO1xuZXh0ZW5kKFtUZXh0LCBUc3Bhbl0sIGdldE1ldGhvZHNGb3IoJ1RzcGFuJykpO1xuZXh0ZW5kKFtSZWN0LCBFbGxpcHNlLCBHcmFkaWVudCwgUnVubmVyXSwgZ2V0TWV0aG9kc0ZvcigncmFkaXVzJykpO1xuZXh0ZW5kKEV2ZW50VGFyZ2V0LCBnZXRNZXRob2RzRm9yKCdFdmVudFRhcmdldCcpKTtcbmV4dGVuZChEb20sIGdldE1ldGhvZHNGb3IoJ0RvbScpKTtcbmV4dGVuZChFbGVtZW50LCBnZXRNZXRob2RzRm9yKCdFbGVtZW50JykpO1xuZXh0ZW5kKFNoYXBlLCBnZXRNZXRob2RzRm9yKCdTaGFwZScpKTtcbmV4dGVuZChbQ29udGFpbmVyLCBGcmFnbWVudF0sIGdldE1ldGhvZHNGb3IoJ0NvbnRhaW5lcicpKTtcbmV4dGVuZChHcmFkaWVudCwgZ2V0TWV0aG9kc0ZvcignR3JhZGllbnQnKSk7XG5leHRlbmQoUnVubmVyLCBnZXRNZXRob2RzRm9yKCdSdW5uZXInKSk7XG5MaXN0LmV4dGVuZChnZXRNZXRob2ROYW1lcygpKTtcbnJlZ2lzdGVyTW9ycGhhYmxlVHlwZShbU1ZHTnVtYmVyLCBDb2xvciwgQm94LCBNYXRyaXgsIFNWR0FycmF5LCBQb2ludEFycmF5LCBQYXRoQXJyYXksIFBvaW50XSk7XG5tYWtlTW9ycGhhYmxlKCk7XG5cbmV4cG9ydCB7IEEsIEFuaW1hdG9yLCBTVkdBcnJheSBhcyBBcnJheSwgQm94LCBDaXJjbGUsIENsaXBQYXRoLCBDb2xvciwgQ29udGFpbmVyLCBDb250cm9sbGVyLCBEZWZzLCBEb20sIEVhc2UsIEVsZW1lbnQsIEVsbGlwc2UsIEV2ZW50VGFyZ2V0LCBGb3JlaWduT2JqZWN0LCBGcmFnbWVudCwgRywgR3JhZGllbnQsIEltYWdlLCBMaW5lLCBMaXN0LCBNYXJrZXIsIE1hc2ssIE1hdHJpeCwgTW9ycGhhYmxlLCBOb25Nb3JwaGFibGUsIFNWR051bWJlciBhcyBOdW1iZXIsIE9iamVjdEJhZywgUElELCBQYXRoLCBQYXRoQXJyYXksIFBhdHRlcm4sIFBvaW50LCBQb2ludEFycmF5LCBQb2x5Z29uLCBQb2x5bGluZSwgUXVldWUsIFJlY3QsIFJ1bm5lciwgU1ZHLCBTaGFwZSwgU3ByaW5nLCBTdG9wLCBTdHlsZSwgU3ZnLCBTeW1ib2wsIFRleHQsIFRleHRQYXRoLCBUaW1lbGluZSwgVHJhbnNmb3JtQmFnLCBUc3BhbiwgVXNlLCBhZG9wdCwgYXNzaWduTmV3SWQsIGNsZWFyRXZlbnRzLCBjcmVhdGUsIGRlZmF1bHRzLCBkaXNwYXRjaCwgZWFzaW5nLCBlaWQsIGV4dGVuZCwgYmFzZUZpbmQgYXMgZmluZCwgZ2V0Q2xhc3MsIGdldEV2ZW50VGFyZ2V0LCBnZXRFdmVudHMsIGdldFdpbmRvdywgbWFrZUluc3RhbmNlLCBtYWtlTW9ycGhhYmxlLCBtb2NrQWRvcHQsIG5hbWVzcGFjZXMsIG5vZGVPck5ldywgb2ZmLCBvbiwgcGFyc2VyLCByZWdleCwgcmVnaXN0ZXIsIHJlZ2lzdGVyTW9ycGhhYmxlVHlwZSwgcmVnaXN0ZXJXaW5kb3csIHJlc3RvcmVXaW5kb3csIHJvb3QsIHNhdmVXaW5kb3csIHV0aWxzLCB3aW5kb3dFdmVudHMsIHdpdGhXaW5kb3csIHdyYXBXaXRoQXR0ckNoZWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdmcuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgbG9hZEltYWdlLCBsb2NhbFN0b3JhZ2VOdW1iZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgZXhwb3J0U3ZnIH0gZnJvbSBcIi4vY29udmVydFwiO1xuXG5sZXQgY29uZmlnO1xubGV0IHByZXZpZXdUYWc7XG5sZXQgcGl4ZWxzUGVyVW5pdElucHV0LFxuICB3aWR0aElucHV0LFxuICBoZWlnaHRJbnB1dCxcbiAgcGFkZGluZ0lucHV0LFxuICBvdXRwdXRQaXhlbFNpemVJbnB1dCxcbiAgd2l0aEJhY2tncm91bmRDaGVja2JveCxcbiAgd2l0aG91dEJhY2tncm91bmRDaGVja2JveCxcbiAgd2l0aFNpemVHdWlkZUNoZWNrYm94LFxuICBzcHJpdGVOYW1lc1RleHQ7XG5sZXQgZXhwb3J0QnV0dG9uLCBleHBvcnREZXNjcmlwdGlvbjtcbmxldCBoYXNFcnJvciA9IGZhbHNlO1xuXG5sZXQgY2hlY2tib3hDb25maWdzO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFVpKGJhc2VDb25maWcpIHtcbiAgY29uZmlnID0gYmFzZUNvbmZpZztcblxuICBwcmV2aWV3VGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcmV2aWV3XCIpO1xuICBwaXhlbHNQZXJVbml0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpeGVsc1BlclVuaXRcIik7XG4gIHdpZHRoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dpZHRoXCIpO1xuICBoZWlnaHRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaGVpZ2h0XCIpO1xuICBwYWRkaW5nSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BhZGRpbmdcIik7XG4gIG91dHB1dFBpeGVsU2l6ZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNvdXRwdXRQaXhlbFNpemVcIik7XG4gIHdpdGhCYWNrZ3JvdW5kQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dpdGhCYWNrZ3JvdW5kXCIpO1xuICB3aXRob3V0QmFja2dyb3VuZENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3aXRob3V0QmFja2dyb3VuZFwiKTtcbiAgd2l0aFNpemVHdWlkZUNoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3aXRoU2l6ZUd1aWRlXCIpO1xuICBleHBvcnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2V4cG9ydEJ1dHRvblwiKTtcbiAgZXhwb3J0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2V4cG9ydERlc2NyaXB0aW9uXCIpO1xuICBzcHJpdGVOYW1lc1RleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Nwcml0ZU5hbWVzXCIpO1xuXG4gIGNoZWNrYm94Q29uZmlncyA9IFtcbiAgICB7XG4gICAgICBjaGVja2JveDogd2l0aEJhY2tncm91bmRDaGVja2JveCxcbiAgICAgIGNvbmZpZ0tleTogXCJ3aXRoQmFja2dyb3VuZFwiLFxuICAgIH0sXG4gICAge1xuICAgICAgY2hlY2tib3g6IHdpdGhvdXRCYWNrZ3JvdW5kQ2hlY2tib3gsXG4gICAgICBjb25maWdLZXk6IFwid2l0aG91dEJhY2tncm91bmRcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGNoZWNrYm94OiB3aXRoU2l6ZUd1aWRlQ2hlY2tib3gsXG4gICAgICBjb25maWdLZXk6IFwid2l0aFNpemVHdWlkZVwiLFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3QgaW1hZ2VVcGxvYWRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaW1hZ2VVcGxvYWRJbnB1dFwiKTtcbiAgaW1hZ2VVcGxvYWRJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHByb2Nlc3NJbWFnZUZpbGUpO1xuXG4gIFtcbiAgICB7XG4gICAgICBpbnB1dDogcGl4ZWxzUGVyVW5pdElucHV0LFxuICAgICAgbWluOiAxLFxuICAgICAgY29uZmlnS2V5OiBcInBpeGVsc1BlclVuaXRcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGlucHV0OiB3aWR0aElucHV0LFxuICAgICAgbWluOiAxLFxuICAgICAgY29uZmlnS2V5OiBcIndpZHRoXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbnB1dDogaGVpZ2h0SW5wdXQsXG4gICAgICBtaW46IDEsXG4gICAgICBjb25maWdLZXk6IFwiaGVpZ2h0XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBpbnB1dDogcGFkZGluZ0lucHV0LFxuICAgICAgbWluOiAwLFxuICAgICAgY29uZmlnS2V5OiBcInBhZGRpbmdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIGlucHV0OiBvdXRwdXRQaXhlbFNpemVJbnB1dCxcbiAgICAgIG1pbjogMSxcbiAgICAgIGNvbmZpZ0tleTogXCJvdXRwdXRQaXhlbFNpemVcIixcbiAgICB9LFxuICBdLmZvckVhY2goKGlucHV0Q29uZmlnKSA9PiB7XG4gICAgY29uc3Qgc3RvcmVkVmFsdWUgPSBsb2NhbFN0b3JhZ2VOdW1iZXIoaW5wdXRDb25maWcuY29uZmlnS2V5KTtcbiAgICBpZiAoc3RvcmVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgY29uZmlnLnNwcml0ZVtpbnB1dENvbmZpZy5jb25maWdLZXldID0gc3RvcmVkVmFsdWU7XG4gICAgfVxuICAgIGlucHV0Q29uZmlnLmlucHV0LnZhbHVlID0gY29uZmlnLnNwcml0ZVtpbnB1dENvbmZpZy5jb25maWdLZXldO1xuICAgIGlucHV0Q29uZmlnLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImlucHV0XCIsXG4gICAgICBudW1iZXJJbnB1dENoYW5nZUV2ZW50TGlzdGVuZXIoaW5wdXRDb25maWcpXG4gICAgKTtcbiAgfSk7XG5cbiAgY2hlY2tib3hDb25maWdzLmZvckVhY2goKGNoZWNrYm94Q29uZmlnKSA9PiB7XG4gICAgY2hlY2tib3hDb25maWcuY2hlY2tib3guY2hlY2tlZCA9IGNvbmZpZy5leHBvcnRzW2NoZWNrYm94Q29uZmlnLmNvbmZpZ0tleV07XG4gICAgY2hlY2tib3hDb25maWcuY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwiY2xpY2tcIixcbiAgICAgIGNoZWNrYm94Q2hhbmdlRXZlbnRMaXN0ZW5lcihjaGVja2JveENvbmZpZylcbiAgICApO1xuICB9KTtcblxuICBzcHJpdGVOYW1lc1RleHQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc3ByaXRlTmFtZXNUZXh0LnZhbHVlLnJlcGxhY2UoXCIgXCIsIFwiXCIpO1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3ByaXRlTmFtZXMgPSB2YWx1ZS5zcGxpdCgvXFxyP1xcbi9nKS5tYXAoKHMpID0+IHMudHJpbSgpKTtcbiAgICBjb25maWcuc3ByaXRlLnNwcml0ZU5hbWVzID0gc3ByaXRlTmFtZXM7XG4gIH0pO1xuXG4gIGV4cG9ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlRXhwb3J0KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0KCkge1xuICBleHBvcnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBcIlwiO1xuICBleHBvcnREZXNjcmlwdGlvbi5jbGFzc0xpc3QucmVtb3ZlKFwidGV4dC1ncmF5LTUwMFwiKTtcbiAgZXhwb3J0RGVzY3JpcHRpb24uY2xhc3NMaXN0LnJlbW92ZShcInRleHQtcmVkLTUwMFwiKTtcbiAgaWYgKGNvbmZpZy5waXhlbEltZyA9PSBudWxsKSB7XG4gICAgZXhwb3J0RGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcInRleHQtcmVkLTUwMFwiKTtcbiAgICBleHBvcnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBcIlVwbG9hZCBhIHBpeGVsIGFydCBiZWZvcmUgZXhwb3J0aW5nLlwiO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaGFzRXJyb3IpIHtcbiAgICBleHBvcnREZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwidGV4dC1yZWQtNTAwXCIpO1xuICAgIGV4cG9ydERlc2NyaXB0aW9uLmlubmVyVGV4dCA9IFwiVGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgZm9ybSBmaWVsZHMuXCI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGFueUV4cG9ydFR5cGVTZWxlY3RlZCA9IGNoZWNrYm94Q29uZmlncy5zb21lKChjaGVja2JveENvbmZpZykgPT4ge1xuICAgIHJldHVybiBjb25maWcuZXhwb3J0c1tjaGVja2JveENvbmZpZy5jb25maWdLZXldO1xuICB9KTtcbiAgaWYgKCFhbnlFeHBvcnRUeXBlU2VsZWN0ZWQpIHtcbiAgICBleHBvcnREZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwidGV4dC1yZWQtNTAwXCIpO1xuICAgIGV4cG9ydERlc2NyaXB0aW9uLmlubmVyVGV4dCA9XG4gICAgICBcIkF0IGxlYXN0IG9uZSBleHBvcnQgdHlwZSBzaG91bGQgYmUgc2VsZWN0ZWQuXCI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV4cG9ydEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gIGV4cG9ydERlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoXCJ0ZXh0LWdyYXktNTAwXCIpO1xuICBleHBvcnRTdmcoY29uZmlnLCBleHBvcnREZXNjcmlwdGlvbiwgKCkgPT4gKGV4cG9ydEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlKSk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0Q2hhbmdlRXZlbnRMaXN0ZW5lcih7IGlucHV0LCBtaW4sIGNvbmZpZ0tleSB9KSB7XG4gIHJldHVybiAoZSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gaW5wdXQudmFsdWU7XG4gICAgY29uc3QgbnVtYmVyVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmIChpc05hTihudW1iZXJWYWx1ZSkgfHwgbnVtYmVyVmFsdWUgPCBtaW4pIHtcbiAgICAgIC8vIEFkZCBlcnJvclxuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZChcImJvcmRlci1yZWQtNTAwXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgZXJyb3JcbiAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJib3JkZXItcmVkLTUwMFwiKTtcbiAgICBjb25maWcuc3ByaXRlW2NvbmZpZ0tleV0gPSBudW1iZXJWYWx1ZTtcbiAgICBsb2NhbFN0b3JhZ2VOdW1iZXIoY29uZmlnS2V5LCBudW1iZXJWYWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoZWNrYm94Q2hhbmdlRXZlbnRMaXN0ZW5lcih7IGNoZWNrYm94LCBjb25maWdLZXkgfSkge1xuICByZXR1cm4gKGUpID0+IHtcbiAgICBjb25zdCBjaGVja2VkID0gY2hlY2tib3guY2hlY2tlZDtcbiAgICBjb25maWcuZXhwb3J0c1tjb25maWdLZXldID0gY2hlY2tlZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ltYWdlRmlsZShlKSB7XG4gIGNvbnN0IGZpbGUgPSBlLmN1cnJlbnRUYXJnZXQuZmlsZXNbMF07XG4gIGlmICghZmlsZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICByZWFkZXIub25sb2FkID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHBpeGVsSW1nID0gYXdhaXQgbG9hZEltYWdlKHJlYWRlci5yZXN1bHQpO1xuICAgIGNvbmZpZy5waXhlbEltZ0Jhc2U2NCA9IHJlYWRlci5yZXN1bHQ7XG4gICAgY29uZmlnLnBpeGVsSW1nID0gcGl4ZWxJbWc7XG5cbiAgICBwcmV2aWV3VGFnLnNyYyA9IHBpeGVsSW1nLnNyYztcbiAgfTtcbiAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG59XG4iLCJleHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBwaXhlbEltZzogdW5kZWZpbmVkLFxuICBwaXhlbEltZ0Jhc2U2NDogdW5kZWZpbmVkLFxuICBzcHJpdGU6IHtcbiAgICBwaXhlbHNQZXJVbml0OiAxMCxcbiAgICB3aWR0aDogMjQsXG4gICAgaGVpZ2h0OiAyNCxcbiAgICBwYWRkaW5nOiA0LFxuICAgIG91dHB1dFBpeGVsU2l6ZTogMTAsXG4gICAgc3ByaXRlTmFtZXM6IFtdLFxuICB9LFxuICBleHBvcnRzOiB7XG4gICAgd2l0aEJhY2tncm91bmQ6IHRydWUsIC8vIE9ubHkgaWYgcGFkZGluZyA+PSAxXG4gICAgd2l0aG91dEJhY2tncm91bmQ6IHRydWUsXG4gICAgd2l0aFNpemVHdWlkZTogdHJ1ZSwgLy8gT25seSBpZiBwYWRkaW5nID49IDFcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBTVkcgfSBmcm9tIFwiQHN2Z2RvdGpzL3N2Zy5qc1wiO1xuaW1wb3J0ICogYXMgSlNaaXAgZnJvbSBcImpzemlwXCI7XG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tIFwiZmlsZS1zYXZlclwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0U3ZnKGNvbmZpZywgcHJvZ3Jlc3NFbCwgb25GaW5pc2gpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwaXhlbEltZyA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKGNvbmZpZy5waXhlbEltZyk7XG4gICAgY29uc3Qgb2Zmc2NyZWVuQ2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcyhcbiAgICAgIHBpeGVsSW1nLndpZHRoLFxuICAgICAgcGl4ZWxJbWcuaGVpZ2h0XG4gICAgKTtcblxuICAgIGNvbnN0IHN2Z3MgPSB7XG4gICAgICB3aXRoQmFja2dyb3VuZDogW10sXG4gICAgICB3aXRob3V0QmFja2dyb3VuZDogW10sXG4gICAgICB3aXRoU2l6ZUd1aWRlOiBbXSxcbiAgICB9O1xuXG4gICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcihuZXcgVVJMKFwiLi9jb252ZXJ0X3dvcmtlci5qc1wiLCBpbXBvcnQubWV0YS51cmwpKTtcblxuICAgIHdvcmtlci5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgc3dpdGNoIChlLmRhdGEudHlwZSkge1xuICAgICAgICBjYXNlIFwicHJvZ3Jlc3NcIjoge1xuICAgICAgICAgIHByb2dyZXNzRWwuaW5uZXJUZXh0ID0gYFByb2Nlc3NpbmcgJHtlLmRhdGEuZGV0YWlsc31gO1xuICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZFN2ZyA9IG1ha2VTdmcoZS5kYXRhLnN2Z0RhdGEsIGNvbmZpZy5leHBvcnRzKTtcbiAgICAgICAgICBmb3IgKGxldCBbZXhwb3J0VHlwZSwgc3ZnSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoY29udmVydGVkU3ZnKSkge1xuICAgICAgICAgICAgc3Znc1tleHBvcnRUeXBlXS5wdXNoKHN2Z0luZm8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW5kXCI6IHtcbiAgICAgICAgICBwcm9ncmVzc0VsLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgICAgb25GaW5pc2goKTtcbiAgICAgICAgICBkb3dubG9hZFN2ZyhzdmdzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaW5mb1wiOiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJXOlwiLCBlLmRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgeyBlcnJvcjogXCJVbmtub3duIG1lc3NhZ2UgZnJvbSB3b3JrZXJcIiwgbWVzc2FnZTogZS5kYXRhIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdvcmtlci5wb3N0TWVzc2FnZShcbiAgICAgIHtcbiAgICAgICAgY2FudmFzOiBvZmZzY3JlZW5DYW52YXMsXG4gICAgICAgIHBpeGVsSW1nLFxuICAgICAgICBzcHJpdGVDb25maWc6IGNvbmZpZy5zcHJpdGUsXG4gICAgICAgIGV4cG9ydFR5cGVzOiBjb25maWcuZXhwb3J0cyxcbiAgICAgIH0sXG4gICAgICBbb2Zmc2NyZWVuQ2FudmFzXVxuICAgICk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVN2ZyhkYXRhLCBleHBvcnRzKSB7XG4gIGNvbnN0IHN2Z0luZm8gPSB7fTtcbiAgY29uc3QgeyB3aXRoQmFja2dyb3VuZCwgd2l0aG91dEJhY2tncm91bmQsIHdpdGhTaXplR3VpZGUgfSA9IGV4cG9ydHM7XG5cbiAgY29uc3QgdmVjID0gU1ZHKCkuc2l6ZShkYXRhLncsIGRhdGEuaCkudmlld2JveCgwLCAwLCBkYXRhLncsIGRhdGEuaCk7XG4gIGNvbnN0IGdyb3VwID0gdmVjLmdyb3VwKCk7XG4gIGRhdGEucGl4ZWxzLmZvckVhY2goKHBpeGVsKSA9PiB7XG4gICAgZ3JvdXBcbiAgICAgIC5yZWN0KHBpeGVsLncsIHBpeGVsLmgpXG4gICAgICAuZmlsbCh7IGNvbG9yOiBwaXhlbC5maWxsLCBvcGFjaXR5OiBwaXhlbC5vcGFjaXR5IH0pXG4gICAgICAueChwaXhlbC54KVxuICAgICAgLnkocGl4ZWwueSk7XG4gIH0pO1xuICBpZiAod2l0aG91dEJhY2tncm91bmQpIHtcbiAgICBzdmdJbmZvLndpdGhvdXRCYWNrZ3JvdW5kID0ge1xuICAgICAgc3ZnOiB2ZWMuc3ZnKCksXG4gICAgICBmaWxlbmFtZTogYCR7ZGF0YS5maWxlbmFtZX1fbm9fYmcuc3ZnYCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEucGFkZGluZyA+IDAgJiYgKHdpdGhCYWNrZ3JvdW5kIHx8IHdpdGhTaXplR3VpZGUpKSB7XG4gICAgY29uc3QgYmcgPSBkYXRhLmJhY2tncm91bmQ7XG4gICAgY29uc3QgdmVjQmcgPSBTVkcoKS5zaXplKGJnLncsIGJnLmgpLnZpZXdib3goMCwgMCwgYmcudywgYmcuaCk7XG4gICAgdmVjQmcucmVjdChiZy53LCBiZy5oKS5maWxsKGJnLmZpbGwpLngoYmcueCkueShiZy55KTtcbiAgICB2ZWNCZy5zdmcoZ3JvdXAuc3ZnKCkpO1xuICAgIGNvbnN0IGJnR3JvdXAgPSB2ZWNCZy5nZXQoMSk7XG4gICAgYmdHcm91cC5tb3ZlKGJnR3JvdXAueCgpICsgZGF0YS5wYWRkaW5nLCBiZ0dyb3VwLnkoKSArIGRhdGEucGFkZGluZyk7XG4gICAgaWYgKHdpdGhCYWNrZ3JvdW5kKSB7XG4gICAgICBzdmdJbmZvLndpdGhCYWNrZ3JvdW5kID0ge1xuICAgICAgICBzdmc6IHZlY0JnLnN2ZygpLFxuICAgICAgICBmaWxlbmFtZTogYCR7ZGF0YS5maWxlbmFtZX1fd2l0aF9iZy5zdmdgLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAod2l0aFNpemVHdWlkZSkge1xuICAgICAgY29uc3QgdmVjR3VpZGUgPSBTVkcoKTtcbiAgICAgIHZlY0d1aWRlLnN2Zyh2ZWNCZy5zdmcoZmFsc2UpKTtcblxuICAgICAgY29uc3QgZ3VpZGUgPSBkYXRhLmd1aWRlO1xuICAgICAgY29uc3QgZ3VpZGVHcm91cCA9IHZlY0d1aWRlLmdyb3VwKCk7XG4gICAgICBndWlkZUdyb3VwLmJhY2t3YXJkKCk7XG4gICAgICBjb25zdCBtYXNrID0gZ3VpZGVHcm91cC5tYXNrKCk7XG4gICAgICBndWlkZS5tYXNrLmZvckVhY2goKG1hc2tSZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBndWlkZUdyb3VwXG4gICAgICAgICAgLnJlY3QobWFza1JlY3QudywgbWFza1JlY3QuaClcbiAgICAgICAgICAuZmlsbChtYXNrUmVjdC5maWxsKVxuICAgICAgICAgIC54KG1hc2tSZWN0LngpXG4gICAgICAgICAgLnkobWFza1JlY3QueSk7XG4gICAgICAgIG1hc2suYWRkKHJlY3QpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBtYXNrZWRSZWN0ID0gZ3VpZGVHcm91cFxuICAgICAgICAucmVjdChndWlkZS5tYXNrZWQudywgZ3VpZGUubWFza2VkLmgpXG4gICAgICAgIC5maWxsKGd1aWRlLm1hc2tlZC5maWxsKVxuICAgICAgICAueChndWlkZS5tYXNrZWQueClcbiAgICAgICAgLnkoZ3VpZGUubWFza2VkLnkpO1xuICAgICAgbWFza2VkUmVjdC5tYXNrV2l0aChtYXNrKTtcblxuICAgICAgc3ZnSW5mby53aXRoU2l6ZUd1aWRlID0ge1xuICAgICAgICBzdmc6IHZlY0d1aWRlLnN2ZygpLFxuICAgICAgICBmaWxlbmFtZTogYCR7ZGF0YS5maWxlbmFtZX1fd2l0aF9ndWlkZS5zdmdgLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ZnSW5mbztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRTdmcoc3Zncykge1xuICBjb25zdCB6aXAgPSBuZXcgSlNaaXAoKTtcbiAgZm9yIChsZXQgW2V4cG9ydFR5cGUsIHN2Z0luZm9MaXN0XSBvZiBPYmplY3QuZW50cmllcyhzdmdzKSkge1xuICAgIGZvciAoY29uc3Qgc3ZnSW5mbyBvZiBzdmdJbmZvTGlzdCkge1xuICAgICAgemlwLmZpbGUoXG4gICAgICAgIGBjb252ZXJ0ZWRfc3Zncy8ke2V4cG9ydFR5cGV9LyR7c3ZnSW5mby5maWxlbmFtZX1gLFxuICAgICAgICBzdmdJbmZvLnN2ZyxcbiAgICAgICAge1xuICAgICAgICAgIGNyZWF0ZUZvbGRlcnM6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgemlwLmdlbmVyYXRlQXN5bmMoeyB0eXBlOiBcImJsb2JcIiB9KS50aGVuKChjb250ZW50KSA9PiB7XG4gICAgc2F2ZUFzKGNvbnRlbnQsIFwiY29udmVydGVkX3N2Z3MuemlwXCIpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJjIiwiYSIsImIiLCJkIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwiZyIsInJlc3BvbnNlIiwib25lcnJvciIsImNvbnNvbGUiLCJlcnJvciIsInNlbmQiLCJzdGF0dXMiLCJlIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJ3aW5kb3ciLCJmIiwic2VsZiIsImdsb2JhbCIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJzYXZlQXMiLCJIVE1MQW5jaG9yRWxlbWVudCIsInByb3RvdHlwZSIsImgiLCJVUkwiLCJ3ZWJraXRVUkwiLCJqIiwiY3JlYXRlRWxlbWVudCIsIm5hbWUiLCJkb3dubG9hZCIsInJlbCIsImhyZWYiLCJvcmlnaW4iLCJsb2NhdGlvbiIsInRhcmdldCIsImNyZWF0ZU9iamVjdFVSTCIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJtc1NhdmVPck9wZW5CbG9iIiwiYXV0b0JvbSIsIndhcm4iLCJ0eXBlIiwiQmxvYiIsInRpdGxlIiwiYm9keSIsImlubmVyVGV4dCIsIkhUTUxFbGVtZW50Iiwic2FmYXJpIiwiRmlsZVJlYWRlciIsIm9ubG9hZGVuZCIsInJlc3VsdCIsInJlcGxhY2UiLCJyZWFkQXNEYXRhVVJMIiwibCIsIm0iLCJzIiwibyIsInUiLCJyIiwibiIsIkVycm9yIiwiY29kZSIsImNhbGwiLCJ0IiwicCIsImVuY29kZSIsImdldFR5cGVPZiIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJkZWNvZGUiLCJzdWJzdHIiLCJ1aW50OGFycmF5IiwiVWludDhBcnJheSIsIkFycmF5IiwiaW5kZXhPZiIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImNyYzMyIiwiY29tcHJlc3Npb24iLCJjb21wcmVzc2VkQ29udGVudCIsImdldENvbnRlbnRXb3JrZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBpcGUiLCJ1bmNvbXByZXNzV29ya2VyIiwib24iLCJzdHJlYW1JbmZvIiwiZGF0YV9sZW5ndGgiLCJnZXRDb21wcmVzc2VkV29ya2VyIiwid2l0aFN0cmVhbUluZm8iLCJjcmVhdGVXb3JrZXJGcm9tIiwiY29tcHJlc3NXb3JrZXIiLCJTVE9SRSIsIm1hZ2ljIiwiREVGTEFURSIsImJpbmFyeSIsImRpciIsImNyZWF0ZUZvbGRlcnMiLCJkYXRlIiwiY29tcHJlc3Npb25PcHRpb25zIiwiY29tbWVudCIsInVuaXhQZXJtaXNzaW9ucyIsImRvc1Blcm1pc3Npb25zIiwibGllIiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIl9wYWtvIiwiX3Bha29BY3Rpb24iLCJfcGFrb09wdGlvbnMiLCJtZXRhIiwiaW5oZXJpdHMiLCJwcm9jZXNzQ2h1bmsiLCJfY3JlYXRlUGFrbyIsInRyYW5zZm9ybVRvIiwiZmx1c2giLCJjbGVhblVwIiwicmF3IiwibGV2ZWwiLCJvbkRhdGEiLCJwYWtvIiwiQSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImZpbGUiLCJPIiwidXRmOGVuY29kZSIsIkkiLCJfIiwidiIsInkiLCJ3IiwieCIsIlMiLCJ6IiwiQyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsIkIiLCJFIiwiZmlsZVJlY29yZCIsIlIiLCJMT0NBTF9GSUxFX0hFQURFUiIsImRpclJlY29yZCIsIkNFTlRSQUxfRklMRV9IRUFERVIiLCJieXRlc1dyaXR0ZW4iLCJ6aXBDb21tZW50IiwiemlwUGxhdGZvcm0iLCJlbmNvZGVGaWxlTmFtZSIsInN0cmVhbUZpbGVzIiwiYWNjdW11bGF0ZSIsImNvbnRlbnRCdWZmZXIiLCJkaXJSZWNvcmRzIiwiY3VycmVudFNvdXJjZU9mZnNldCIsImVudHJpZXNDb3VudCIsImN1cnJlbnRGaWxlIiwiX3NvdXJjZXMiLCJwZXJjZW50Iiwib3BlbmVkU291cmNlIiwiY2xvc2VkU291cmNlIiwiREFUQV9ERVNDUklQVE9SIiwic2hpZnQiLCJDRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJwcmVwYXJlTmV4dFNvdXJjZSIsInByZXZpb3VzIiwiaXNQYXVzZWQiLCJwYXVzZSIsInJlc3VtZSIsInJlZ2lzdGVyUHJldmlvdXMiLCJlbmQiLCJnZW5lcmF0ZWRFcnJvciIsImxvY2siLCJnZW5lcmF0ZVdvcmtlciIsInBsYXRmb3JtIiwiZm9yRWFjaCIsIm9wdGlvbnMiLCJfY29tcHJlc3NXb3JrZXIiLCJhcmd1bWVudHMiLCJmaWxlcyIsIk9iamVjdCIsImNyZWF0ZSIsInJvb3QiLCJjbG9uZSIsImxvYWRBc3luYyIsInN1cHBvcnQiLCJkZWZhdWx0cyIsInZlcnNpb24iLCJleHRlcm5hbCIsImRlY29tcHJlc3NlZCIsImV4dGVuZCIsImNoZWNrQ1JDMzIiLCJvcHRpbWl6ZWRCaW5hcnlTdHJpbmciLCJkZWNvZGVGaWxlTmFtZSIsInV0ZjhkZWNvZGUiLCJpc05vZGUiLCJpc1N0cmVhbSIsInJlamVjdCIsInByZXBhcmVDb250ZW50IiwidGhlbiIsImxvYWQiLCJhbGwiLCJmaWxlTmFtZVN0ciIsImZpbGVDb21tZW50U3RyIiwidW5zYWZlT3JpZ2luYWxOYW1lIiwiX3Vwc3RyZWFtRW5kZWQiLCJfYmluZFN0cmVhbSIsIl9zdHJlYW0iLCJSZWFkYWJsZSIsIl9oZWxwZXIiLCJlbWl0IiwiX3JlYWQiLCJCdWZmZXIiLCJuZXdCdWZmZXJGcm9tIiwiZnJvbSIsImFsbG9jQnVmZmVyIiwiYWxsb2MiLCJmaWxsIiwiaXNCdWZmZXIiLCJEYXRlIiwidG9VcHBlckNhc2UiLCJwYXJzZUludCIsInNsaWNlIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJmaWx0ZXIiLCJmb2xkZXIiLCJyZW1vdmUiLCJnZW5lcmF0ZSIsImdlbmVyYXRlSW50ZXJuYWxTdHJlYW0iLCJtaW1lVHlwZSIsInRvTG93ZXJDYXNlIiwiY2hlY2tTdXBwb3J0IiwiZ2VuZXJhdGVBc3luYyIsImdlbmVyYXRlTm9kZVN0cmVhbSIsInRvTm9kZWpzU3RyZWFtIiwic3RyZWFtIiwiYnl0ZUF0IiwiemVybyIsImxhc3RJbmRleE9mU2lnbmF0dXJlIiwicmVhZEFuZENoZWNrU2lnbmF0dXJlIiwicmVhZERhdGEiLCJjaGVja09mZnNldCIsImluZGV4IiwiY2hlY2tJbmRleCIsInNldEluZGV4Iiwic2tpcCIsInJlYWRJbnQiLCJyZWFkU3RyaW5nIiwicmVhZERhdGUiLCJVVEMiLCJzdWJhcnJheSIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IiLCJaSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJkZXN0VHlwZSIsInByb3BOYW1lIiwiZGF0YUlzUmVhZHkiLCJtYXgiLCJfdGlja1NjaGVkdWxlZCIsIl90aWNrQW5kUmVwZWF0IiwiZGVsYXkiLCJpc0ZpbmlzaGVkIiwiX3RpY2siLCJNYXRoIiwibWluIiwiZXh0cmFTdHJlYW1JbmZvIiwiaXNMb2NrZWQiLCJfbGlzdGVuZXJzIiwibWVyZ2VTdHJlYW1JbmZvIiwiaGFzT3duUHJvcGVydHkiLCJub2Rlc3RyZWFtIiwiX2ludGVybmFsVHlwZSIsIl9vdXRwdXRUeXBlIiwiX21pbWVUeXBlIiwiX3dvcmtlciIsIm5ld0Jsb2IiLCJhcHBseSIsInNldCIsIm9iamVjdE1vZGUiLCJhcnJheSIsInN0cmluZyIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJub2RlYnVmZmVyIiwiYmxvYiIsInNpemUiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiYXBwZW5kIiwiZ2V0QmxvYiIsImxlZnRPdmVyIiwiYXBwbHlGcm9tQ2hhckNvZGUiLCJVdGY4RGVjb2RlV29ya2VyIiwiVXRmOEVuY29kZVdvcmtlciIsInN0cmluZ2lmeUJ5Q2h1bmsiLCJzdHJpbmdpZnlCeUNoYXIiLCJhcHBseUNhbkJlVXNlZCIsImZsb29yIiwiYnVmZmVyIiwiYnl0ZUxlbmd0aCIsInNwbGl0IiwicG9wIiwiTUFYX1ZBTFVFXzE2QklUUyIsIk1BWF9WQUxVRV8zMkJJVFMiLCJwcmV0dHkiLCJzZXRJbW1lZGlhdGUiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInNldGltbWVkaWF0ZSIsImxvYWRPcHRpb25zIiwiY2hlY2tTaWduYXR1cmUiLCJyZWFkZXIiLCJpc1NpZ25hdHVyZSIsInJlYWRCbG9ja0VuZE9mQ2VudHJhbCIsImRpc2tOdW1iZXIiLCJkaXNrV2l0aENlbnRyYWxEaXJTdGFydCIsImNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayIsImNlbnRyYWxEaXJSZWNvcmRzIiwiY2VudHJhbERpclNpemUiLCJjZW50cmFsRGlyT2Zmc2V0IiwiemlwQ29tbWVudExlbmd0aCIsInJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsIiwiemlwNjRFbmRPZkNlbnRyYWxTaXplIiwiemlwNjRFeHRlbnNpYmxlRGF0YSIsInZhbHVlIiwicmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yIiwiZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydCIsInJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIiLCJkaXNrc0NvdW50IiwicmVhZExvY2FsRmlsZXMiLCJsb2NhbEhlYWRlck9mZnNldCIsInJlYWRMb2NhbFBhcnQiLCJoYW5kbGVVVEY4IiwicHJvY2Vzc0F0dHJpYnV0ZXMiLCJyZWFkQ2VudHJhbERpciIsInppcDY0IiwicmVhZENlbnRyYWxQYXJ0IiwicmVhZEVuZE9mQ2VudHJhbCIsImFicyIsInByZXBhcmVSZWFkZXIiLCJpc0VuY3J5cHRlZCIsImJpdEZsYWciLCJ1c2VVVEY4IiwiZmlsZU5hbWVMZW5ndGgiLCJmaWxlTmFtZSIsImNvbXByZXNzaW9uTWV0aG9kIiwidmVyc2lvbk1hZGVCeSIsImV4dHJhRmllbGRzTGVuZ3RoIiwiZmlsZUNvbW1lbnRMZW5ndGgiLCJkaXNrTnVtYmVyU3RhcnQiLCJpbnRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwiZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyIsInJlYWRFeHRyYUZpZWxkcyIsInBhcnNlWklQNjRFeHRyYUZpZWxkIiwiZmlsZUNvbW1lbnQiLCJleHRyYUZpZWxkcyIsImZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50IiwiX2RhdGEiLCJfZGF0YUJpbmFyeSIsImludGVybmFsU3RyZWFtIiwiX2RlY29tcHJlc3NXb3JrZXIiLCJhc3luYyIsIm5vZGVTdHJlYW0iLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJNZXNzYWdlQ2hhbm5lbCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImRvY3VtZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwiVHlwZUVycm9yIiwic3RhdGUiLCJxdWV1ZSIsIm91dGNvbWUiLCJwcm9taXNlIiwib25GdWxmaWxsZWQiLCJjYWxsRnVsZmlsbGVkIiwib3RoZXJDYWxsRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhbGxSZWplY3RlZCIsIm90aGVyQ2FsbFJlamVjdGVkIiwiZmluYWxseSIsImNvbnN0cnVjdG9yIiwiY2F0Y2giLCJyYWNlIiwiaW1tZWRpYXRlIiwiYXNzaWduIiwibWV0aG9kIiwiY2h1bmtTaXplIiwid2luZG93Qml0cyIsIm1lbUxldmVsIiwic3RyYXRlZ3kiLCJ0byIsImd6aXAiLCJlcnIiLCJtc2ciLCJlbmRlZCIsImNodW5rcyIsInN0cm0iLCJhdmFpbF9vdXQiLCJkZWZsYXRlSW5pdDIiLCJoZWFkZXIiLCJkZWZsYXRlU2V0SGVhZGVyIiwiZGljdGlvbmFyeSIsInN0cmluZzJidWYiLCJkZWZsYXRlU2V0RGljdGlvbmFyeSIsIl9kaWN0X3NldCIsImlucHV0IiwibmV4dF9pbiIsImF2YWlsX2luIiwib3V0cHV0IiwiQnVmOCIsIm5leHRfb3V0IiwiZGVmbGF0ZSIsIm9uRW5kIiwiYnVmMmJpbnN0cmluZyIsInNocmlua0J1ZiIsImRlZmxhdGVFbmQiLCJmbGF0dGVuQ2h1bmtzIiwiRGVmbGF0ZSIsImRlZmxhdGVSYXciLCJpbmZsYXRlSW5pdDIiLCJaX09LIiwiaW5mbGF0ZUdldEhlYWRlciIsIlpfRklOSVNIIiwiWl9OT19GTFVTSCIsImJpbnN0cmluZzJidWYiLCJpbmZsYXRlIiwiWl9ORUVEX0RJQ1QiLCJpbmZsYXRlU2V0RGljdGlvbmFyeSIsIlpfQlVGX0VSUk9SIiwiWl9TVFJFQU1fRU5EIiwiWl9TWU5DX0ZMVVNIIiwidXRmOGJvcmRlciIsImJ1ZjJzdHJpbmciLCJhcnJheVNldCIsImluZmxhdGVFbmQiLCJJbmZsYXRlIiwiaW5mbGF0ZVJhdyIsInVuZ3ppcCIsIkludDMyQXJyYXkiLCJzZXRUeXBlZCIsIkJ1ZjE2IiwiQnVmMzIiLCJaX1BBUlRJQUxfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0JMT0NLIiwiWl9UUkVFUyIsIlpfRVJSTk8iLCJaX1NUUkVBTV9FUlJPUiIsIlpfREFUQV9FUlJPUiIsIlpfTk9fQ09NUFJFU1NJT04iLCJaX0JFU1RfU1BFRUQiLCJaX0JFU1RfQ09NUFJFU1NJT04iLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJaX0ZJTFRFUkVEIiwiWl9IVUZGTUFOX09OTFkiLCJaX1JMRSIsIlpfRklYRUQiLCJaX0RFRkFVTFRfU1RSQVRFR1kiLCJaX0JJTkFSWSIsIlpfVEVYVCIsIlpfVU5LTk9XTiIsIlpfREVGTEFURUQiLCJUIiwiRCIsIkYiLCJwZW5kaW5nIiwicGVuZGluZ19idWYiLCJwZW5kaW5nX291dCIsInRvdGFsX291dCIsIk4iLCJfdHJfZmx1c2hfYmxvY2siLCJibG9ja19zdGFydCIsInN0cnN0YXJ0IiwiVSIsIlAiLCJMIiwibWF4X2NoYWluX2xlbmd0aCIsInByZXZfbGVuZ3RoIiwibmljZV9tYXRjaCIsIndfc2l6ZSIsIndfbWFzayIsInByZXYiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJ3aW5kb3dfc2l6ZSIsImhhc2hfc2l6ZSIsImhlYWQiLCJ3cmFwIiwiYWRsZXIiLCJ0b3RhbF9pbiIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsIloiLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsImxhc3RfbGl0IiwiVyIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJNIiwiZ29vZF9sZW5ndGgiLCJtYXhfbGF6eSIsIm5pY2VfbGVuZ3RoIiwibWF4X2NoYWluIiwiZnVuYyIsIkgiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiaGVhcCIsImhlYXBfbGVuIiwiaGVhcF9tYXgiLCJkZXB0aCIsImxfYnVmIiwibGl0X2J1ZnNpemUiLCJkX2J1ZiIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwibWF0Y2hlcyIsImJpX2J1ZiIsImJpX3ZhbGlkIiwiRyIsImRhdGFfdHlwZSIsIl90cl9pbml0IiwiSyIsIlkiLCJkZWZsYXRlSW5pdCIsImRlZmxhdGVSZXNldCIsImRlZmxhdGVSZXNldEtlZXAiLCJ0ZXh0IiwiaGNyYyIsImV4dHJhIiwidGltZSIsIm9zIiwiX3RyX2FsaWduIiwiX3RyX3N0b3JlZF9ibG9jayIsImRlZmxhdGVJbmZvIiwieGZsYWdzIiwiZXh0cmFfbGVuIiwiZG9uZSIsImRtYXgiLCJ3c2l6ZSIsIndoYXZlIiwid25leHQiLCJob2xkIiwiYml0cyIsImxlbmNvZGUiLCJkaXN0Y29kZSIsImxlbmJpdHMiLCJkaXN0Yml0cyIsIm1vZGUiLCJzYW5lIiwibGFzdCIsImhhdmVkaWN0IiwiZmxhZ3MiLCJjaGVjayIsInRvdGFsIiwid2JpdHMiLCJvZmZzZXQiLCJuY29kZSIsIm5sZW4iLCJuZGlzdCIsImhhdmUiLCJuZXh0IiwibGVucyIsIndvcmsiLCJsZW5keW4iLCJkaXN0ZHluIiwiYmFjayIsIndhcyIsImluZmxhdGVSZXNldCIsImluZmxhdGVSZXNldDIiLCJpbmZsYXRlUmVzZXRLZWVwIiwiaW5mbGF0ZUluaXQiLCJpbmZsYXRlSW5mbyIsInN0YXRpY190cmVlIiwiZXh0cmFfYml0cyIsImV4dHJhX2Jhc2UiLCJlbGVtcyIsIm1heF9sZW5ndGgiLCJoYXNfc3RyZWUiLCJkeW5fdHJlZSIsIm1heF9jb2RlIiwic3RhdF9kZXNjIiwiWCIsIlYiLCJxIiwiSiIsImdldFByb3RvdHlwZU9mIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiaW1wb3J0U2NyaXB0cyIsInJhbmRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIkZ1bmN0aW9uIiwiY2FsbGJhY2siLCJhcmdzIiwiY2xlYXJJbW1lZGlhdGUiLCJzb3VyY2UiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsInN0eWxlIiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY2h1bmtJZCIsImdsb2JhbFRoaXMiLCJwcm9wIiwiYmFzZVVSSSIsIm5jIiwibG9jYWxTdG9yYWdlTnVtYmVyIiwic3RvcmVkVmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiTnVtYmVyIiwic2V0SXRlbSIsImxvZyIsIm1ldGhvZHMkMSIsIm5hbWVzIiwicmVnaXN0ZXJNZXRob2RzIiwiaXNBcnJheSIsIl9uYW1lIiwiYWRkTWV0aG9kTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0TWV0aG9kc0ZvciIsIl9uYW1lcyIsImJsb2NrIiwiaWwiLCJyYWRpYW5zIiwiUEkiLCJjYW1lbENhc2UiLCJjYXBpdGFsaXplIiwicHJvcG9ydGlvbmFsU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiYm94IiwiYmJveCIsImdldE9yaWdpbiIsIm94Iiwib3JpZ2luWCIsIm95Iiwib3JpZ2luWSIsImNvbmRYIiwiY29uZFkiLCJpbmNsdWRlcyIsInN2ZyIsInhtbG5zIiwieGxpbmsiLCJnbG9iYWxzIiwiQmFzZSIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwibWFrZUluc3RhbmNlIiwiaXNIVE1MIiwiYWRvcHRlciIsIndyYXBwZXIiLCJpbm5lckhUTUwiLCJub2RlT3JOZXciLCJub2RlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiTm9kZSIsImFkb3B0IiwiaW5zdGFuY2UiLCJub2RlTmFtZSIsIkZyYWdtZW50IiwiY2xhc3NOYW1lIiwicmVnaXN0ZXIiLCJhc1Jvb3QiLCJkaWQiLCJlaWQiLCJhc3NpZ25OZXdJZCIsImNoaWxkcmVuIiwibWV0aG9kcyIsIndyYXBXaXRoQXR0ckNoZWNrIiwiZm4iLCJhdHRyIiwic2libGluZ3MiLCJwYXJlbnQiLCJwb3NpdGlvbiIsImZvcndhcmQiLCJhZGQiLCJiYWNrd2FyZCIsImZyb250IiwiYmVmb3JlIiwiYWZ0ZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRBZnRlciIsIm51bWJlckFuZFVuaXQiLCJoZXgiLCJyZ2IiLCJyZWZlcmVuY2UiLCJ0cmFuc2Zvcm1zIiwid2hpdGVzcGFjZSIsImlzSGV4IiwiaXNSZ2IiLCJpc0JsYW5rIiwiaXNOdW1iZXIiLCJpc0ltYWdlIiwiZGVsaW1pdGVyIiwiaXNQYXRoTGV0dGVyIiwiY29tcG9uZW50SGV4IiwiY29tcG9uZW50IiwiaW50ZWdlciIsInJvdW5kIiwiaXMiLCJvYmplY3QiLCJzcGFjZSIsImh1ZVRvUmdiIiwiY2xhc3NlcyIsInRyaW0iLCJoYXNDbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInZhbCIsInJldCIsImVsIiwiY2FzZWQiLCJzaG93IiwiaGlkZSIsInZpc2libGUiLCJwYXJzZSIsInJlbWVtYmVyIiwibWVtb3J5IiwiZm9yZ2V0IiwiX21lbW9yeSIsIkNvbG9yIiwiaW5wdXRzIiwiaW5pdCIsInN0YXRpYyIsImNvbG9yIiwic2luIiwicGkiLCJncmV5IiwiY215ayIsIl9hIiwiX2IiLCJfYyIsImhzbCIsImlzR3JleSIsImRlbHRhIiwiX2QiLCJ2YWx1ZXMiLCJwYXJhbXMiLCJnZXRQYXJhbWV0ZXJzIiwibm9XaGl0ZXNwYWNlIiwiZXhlYyIsImhleFBhcnNlIiwic2l4RGlnaXRIZXgiLCJjb21wb25lbnRzIiwibGFiIiwieHl6IiwibGNoIiwic3FydCIsImF0YW4yIiwiZFRvUiIsImNvcyIsInlMIiwieEwiLCJ6TCIsImN0IiwibXgiLCJubSIsInJVIiwiZ1UiLCJiVSIsInBvdyIsImJkIiwidG9BcnJheSIsInRvSGV4IiwiX2NsYW1wZWQiLCJ0b1JnYiIsInJWIiwiZ1YiLCJiViIsInIyNTUiLCJnMjU1IiwiYjI1NSIsInJMIiwiZ0wiLCJiTCIsInhVIiwieVUiLCJ6VSIsIlBvaW50IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtTyIsIk1hdHJpeCIsImlzTWF0cml4TGlrZSIsImNsb3NlRW5vdWdoIiwidGhyZXNob2xkIiwiZmxpcEJvdGgiLCJmbGlwIiwiZmxpcFgiLCJmbGlwWSIsInNrZXdYIiwic2tldyIsImlzRmluaXRlIiwic2tld1kiLCJzY2FsZVgiLCJzY2FsZSIsInNjYWxlWSIsInNoZWFyIiwidGhldGEiLCJyb3RhdGUiLCJhcm91bmQiLCJweCIsInBvc2l0aW9uWCIsIk5hTiIsInB5IiwicG9zaXRpb25ZIiwidHJhbnNsYXRlIiwidHgiLCJ0cmFuc2xhdGVYIiwidHkiLCJ0cmFuc2xhdGVZIiwicmVsYXRpdmUiLCJyeCIsInJlbGF0aXZlWCIsInJ5IiwicmVsYXRpdmVZIiwiY3giLCJjeSIsIm1hdHJpeCIsImFyb3VuZE8iLCJkeCIsImR5IiwidHJhbnNsYXRlTyIsImxtdWx0aXBseU8iLCJkZWNvbXBvc2UiLCJkZXRlcm1pbmFudCIsImNjdyIsInN4IiwidGhldGFSYWQiLCJzdCIsImxhbSIsInN5IiwiZXF1YWxzIiwib3RoZXIiLCJjb21wIiwiYXhpcyIsImZsaXBPIiwic2NhbGVPIiwiZnJvbUFycmF5IiwiRWxlbWVudCIsIm1hdHJpeGlmeSIsInBhcnNlRmxvYXQiLCJpbnZlcnNlIiwiaW52ZXJzZU8iLCJkZXQiLCJuYSIsIm5iIiwibmQiLCJuZSIsIm5mIiwibG11bHRpcGx5IiwibWF0cml4TXVsdGlwbHkiLCJtdWx0aXBseSIsIm11bHRpcGx5TyIsInJvdGF0ZU8iLCJzaGVhck8iLCJseCIsInNrZXdPIiwidGFuIiwibHkiLCJmb3JtYXRUcmFuc2Zvcm1zIiwidHJhbnNmb3JtZXIiLCJ2YWx1ZU9mIiwicGFyc2VyIiwibm9kZXMiLCJwYXRoIiwiYWRkVG8iLCJpc051bGxlZEJveCIsIkJveCIsImFkZE9mZnNldCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJsZWZ0IiwidG9wIiwieDIiLCJ5MiIsImlzTnVsbGVkIiwibWVyZ2UiLCJ4TWluIiwiSW5maW5pdHkiLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJnZXRCb3giLCJnZXRCQm94Rm4iLCJyZXRyeSIsImNvbnRhaW5zIiwidmlld2JveCIsInpvb20iLCJwb2ludCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwiem9vbVgiLCJ6b29tWSIsInpvb21BbW91bnQiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTGlzdCIsImFyciIsInN1cGVyIiwiZWFjaCIsImZuT3JNZXRob2ROYW1lIiwicmVzZXJ2ZWQiLCJiYXNlRmluZCIsInF1ZXJ5IiwicXVlcnlTZWxlY3RvckFsbCIsInJlZHVjZSIsImF0dHJzIiwibGlzdGVuZXJJZCIsIndpbmRvd0V2ZW50cyIsImdldEV2ZW50cyIsImdldEV2ZW50SG9sZGVyIiwiZXZlbnRzIiwiZ2V0RXZlbnRUYXJnZXQiLCJsaXN0ZW5lciIsImJpbmRpbmciLCJiaW5kIiwiYmFnIiwiX3N2Z2pzTGlzdGVuZXJJZCIsImV2ZW50IiwiZXYiLCJvZmYiLCJuYW1lc3BhY2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYXJFdmVudHMiLCJFdmVudFRhcmdldCIsImRpc3BhdGNoIiwiRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImNhbmNlbGFibGUiLCJkZWZhdWx0UHJldmVudGVkIiwiZmlyZSIsIm5vb3AiLCJ0aW1lbGluZSIsInN0cm9rZSIsIm9wYWNpdHkiLCJTVkdBcnJheSIsInRvU2V0IiwiU2V0IiwiU1ZHTnVtYmVyIiwiY29udmVydCIsInVuaXQiLCJkaXZpZGUiLCJudW1iZXIiLCJpc05hTiIsIm1hdGNoIiwibWludXMiLCJwbHVzIiwidGltZXMiLCJ0b0pTT04iLCJob29rcyIsIkRvbSIsInJlbW92ZU5hbWVzcGFjZSIsIlNWR0VsZW1lbnQiLCJjaGlsZE5vZGVzIiwicHV0IiwiY2xlYXIiLCJoYXNDaGlsZE5vZGVzIiwibGFzdENoaWxkIiwiZGVlcCIsIndyaXRlRGF0YVRvRG9tIiwiY2xvbmVOb2RlIiwiZmlyc3QiLCJoYXMiLCJodG1sIiwiaHRtbE9yRm4iLCJvdXRlckhUTUwiLCJ4bWwiLCJzZWxlY3RvciIsIm1hdGNoZXIiLCJtYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJwdXRJbiIsInJlbW92ZUVsZW1lbnQiLCJyZXBsYWNlQ2hpbGQiLCJwcmVjaXNpb24iLCJmYWN0b3IiLCJzdmdPckZuIiwib3V0ZXJTVkciLCJ3b3JkcyIsInRleHRDb250ZW50IiwieG1sT3JGbiIsIm91dGVyWE1MIiwiY3VycmVudCIsIl90aGlzIiwid2VsbCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImxlbiIsImZpcnN0RWxlbWVudENoaWxkIiwibm9kZVZhbHVlIiwiY3VyciIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsIl92YWwiLCJob29rIiwiaXNDb2xvciIsImxlYWRpbmciLCJzZXRBdHRyaWJ1dGVOUyIsInJlYnVpbGQiLCJmaW5kIiwiZmluZE9uZSIsImRvbSIsImhhc0F0dHJpYnV0ZSIsInNldERhdGEiLCJjZW50ZXIiLCJkZWZzIiwiZG1vdmUiLCJtb3ZlIiwicGFyZW50cyIsInVudGlsIiwiaXNTZWxlY3RvciIsImtleXMiLCJnZXRCQm94IiwicmJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcmVlbkNUTSIsImluc2lkZSIsImN0bSIsImdldENUTSIsImlzUm9vdCIsInJlY3QiLCJnZXRTY3JlZW5DVE0iLCJzdWdhciIsInByZWZpeCIsImV4dGVuc2lvbiIsIm1hdCIsImFuZ2xlIiwiZGlyZWN0aW9uIiwicmFkaXVzIiwiX2VsZW1lbnQiLCJnZXRUb3RhbExlbmd0aCIsInBvaW50QXQiLCJnZXRQb2ludEF0TGVuZ3RoIiwiZm9udCIsInVudHJhbnNmb3JtIiwic3RyIiwia3YiLCJyZXZlcnNlIiwidG9QYXJlbnQiLCJwQ3RtIiwidG9Sb290IiwiZGVjb21wb3NlZCIsIkNvbnRhaW5lciIsImZsYXR0ZW4iLCJ1bmdyb3VwIiwiRGVmcyIsIlNoYXBlIiwieCQzIiwieSQzIiwiY3gkMSIsImN5JDEiLCJ3aWR0aCQyIiwiaGVpZ2h0JDIiLCJjaXJjbGVkIiwiX19wcm90b19fIiwiRWxsaXBzZSIsImVsbGlwc2UiLCJmeCIsImZ5IiwieDEiLCJ5MSIsImdyYWRpZW50ZWQiLCJHcmFkaWVudCIsInRhcmdldHMiLCJ1cmwiLCJncmFkaWVudCIsIlBhdHRlcm4iLCJwYXR0ZXJuIiwicGF0dGVyblVuaXRzIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJpbWFnZSIsIlBvaW50QXJyYXkiLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwicG9pbnRzIiwidG9MaW5lIiwicG9pbnRlZCIsIk1vcnBoQXJyYXkiLCJMaW5lIiwicGxvdCIsImxpbmUiLCJNYXJrZXIiLCJvcmllbnQiLCJyZWYiLCJtYWtlU2V0dGVyR2V0dGVyIiwibWFya2VyIiwiZWFzaW5nIiwicG9zIiwiYmV6aWVyIiwic3RlcHMiLCJzdGVwUG9zaXRpb24iLCJqdW1wcyIsImJlZm9yZUZsYWciLCJzdGVwIiwianVtcGluZyIsIlN0ZXBwZXIiLCJFYXNlIiwiZWFzZSIsIkNvbnRyb2xsZXIiLCJzdGVwcGVyIiwiZHQiLCJyZWNhbGN1bGF0ZSIsImR1cmF0aW9uIiwiX2R1cmF0aW9uIiwib3ZlcnNob290IiwiX292ZXJzaG9vdCIsInpldGEiLCJ3biIsInZlbG9jaXR5IiwiYWNjZWxlcmF0aW9uIiwibmV3UG9zaXRpb24iLCJ3aW5kdXAiLCJpbnRlZ3JhbCIsIl93aW5kdXAiLCJzZWdtZW50UGFyYW1ldGVycyIsIlEiLCJwYXRoSGFuZGxlcnMiLCJwMCIsIm1saHZxdGNzYXoiLCJqbCIsInNlZ21lbnRDb21wbGV0ZSIsInNlZ21lbnQiLCJzdGFydE5ld1NlZ21lbnQiLCJ0b2tlbiIsImluTnVtYmVyIiwiZmluYWxpemVOdW1iZXIiLCJwYXRoTGV0dGVyIiwibGFzdENvbW1hbmQiLCJzbWFsbCIsImlzU21hbGwiLCJpblNlZ21lbnQiLCJwb2ludFNlZW4iLCJoYXNFeHBvbmVudCIsImZpbmFsaXplU2VnbWVudCIsImFic29sdXRlIiwiY29tbWFuZCIsIm1ha2VBYnNvbHV0Iiwic2VnbWVudHMiLCJpc0FyY0ZsYWciLCJpc0FyYyIsImlzRXhwb25lbnRpYWwiLCJsYXN0VG9rZW4iLCJQYXRoQXJyYXkiLCJ0b0Fic29sdXRlIiwicGF0aFBhcnNlciIsImFycmF5VG9TdHJpbmciLCJnZXRDbGFzc0ZvclR5cGUiLCJOb25Nb3JwaGFibGUiLCJtb3JwaGFibGVUeXBlcyIsIk9iamVjdEJhZyIsIk1vcnBoYWJsZSIsIl9zdGVwcGVyIiwiX2Zyb20iLCJfdG8iLCJfdHlwZSIsIl9jb250ZXh0IiwiX21vcnBoT2JqIiwiYXQiLCJtb3JwaCIsIl9zZXQiLCJhbGlnbiIsInRvQ29uc3VtYWJsZSIsIlRyYW5zZm9ybUJhZyIsInNvcnRCeUtleSIsImRlZmF1bHRPYmplY3QiLCJ0b0RlbGV0ZSIsIm9iak9yQXJyIiwiZW50cmllcyIsIlR5cGUiLCJzb3J0IiwibnVtIiwiUGF0aCIsIl9hcnJheSIsInBvbHkiLCJQb2x5Z29uIiwicG9seWdvbiIsIlBvbHlsaW5lIiwicG9seWxpbmUiLCJSZWN0IiwiUXVldWUiLCJfZmlyc3QiLCJfbGFzdCIsIkFuaW1hdG9yIiwibmV4dERyYXciLCJmcmFtZXMiLCJ0aW1lb3V0cyIsImltbWVkaWF0ZXMiLCJ0aW1lciIsInBlcmZvcm1hbmNlIiwiZnJhbWUiLCJydW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfZHJhdyIsInRpbWVvdXQiLCJub3ciLCJjYW5jZWxGcmFtZSIsImNsZWFyVGltZW91dCIsImNhbmNlbEltbWVkaWF0ZSIsIm5leHRUaW1lb3V0IiwibGFzdFRpbWVvdXQiLCJuZXh0RnJhbWUiLCJsYXN0RnJhbWUiLCJuZXh0SW1tZWRpYXRlIiwibWFrZVNjaGVkdWxlIiwicnVubmVySW5mbyIsInN0YXJ0IiwicnVubmVyIiwiZGVmYXVsdFNvdXJjZSIsIlRpbWVsaW5lIiwidGltZVNvdXJjZSIsIl90aW1lU291cmNlIiwiX3N0YXJ0VGltZSIsIl9zcGVlZCIsIl9wZXJzaXN0IiwiX25leHRGcmFtZSIsIl9wYXVzZWQiLCJfcnVubmVycyIsIl9ydW5uZXJJZHMiLCJfbGFzdFJ1bm5lcklkIiwiX3RpbWUiLCJfbGFzdFNvdXJjZVRpbWUiLCJfbGFzdFN0ZXBUaW1lIiwiX3N0ZXAiLCJfc3RlcEZuIiwiX3N0ZXBJbW1lZGlhdGUiLCJhY3RpdmUiLCJmaW5pc2giLCJnZXRFbmRUaW1lT2ZUaW1lbGluZSIsImdldEVuZFRpbWUiLCJsYXN0UnVubmVySW5mbyIsImdldExhc3RSdW5uZXJJbmZvIiwibGFzdER1cmF0aW9uIiwiZW5kVGltZXMiLCJnZXRSdW5uZXJJbmZvQnlJZCIsIl9jb250aW51ZSIsInBlcnNpc3QiLCJkdE9yRm9yZXZlciIsInBsYXkiLCJ1cGRhdGVUaW1lIiwieWVzIiwiY3VycmVudFNwZWVkIiwic3BlZWQiLCJwb3NpdGl2ZSIsInNjaGVkdWxlIiwid2hlbiIsImFic29sdXRlU3RhcnRUaW1lIiwiZW5kVGltZSIsInVuc2NoZWR1bGUiLCJpbmZvIiwic2VlayIsInN0b3AiLCJpbW1lZGlhdGVTdGVwIiwiZHRTb3VyY2UiLCJkdFRpbWUiLCJyZXNldCIsInJ1bm5lcnNMZWZ0IiwiZHRUb1N0YXJ0IiwiX3RpbWVsaW5lIiwiUnVubmVyIiwiX3F1ZXVlIiwiX2lzRGVjbGFyYXRpdmUiLCJfaGlzdG9yeSIsImVuYWJsZWQiLCJfbGFzdFRpbWUiLCJfcmVzZXRlZCIsInRyYW5zZm9ybUlkIiwiX2hhdmVSZXZlcnNlZCIsIl9yZXZlcnNlIiwiX2xvb3BzRG9uZSIsIl9zd2luZyIsIl93YWl0IiwiX3RpbWVzIiwiX2ZyYW1lSWQiLCJzd2luZyIsIndhaXQiLCJhZGRUcmFuc2Zvcm0iLCJhbmltYXRlIiwic2FuaXRpc2UiLCJsb29wIiwiY2xlYXJUcmFuc2Zvcm0iLCJjbGVhclRyYW5zZm9ybXNGcm9tUXVldWUiLCJpc1RyYW5zZm9ybSIsImR1cmluZyIsIl9wcmVwYXJlUnVubmVyIiwibG9vcHMiLCJsb29wRHVyYXRpb24iLCJsb29wc0RvbmUiLCJwYXJ0aWFsIiwic3dpbmdpbmciLCJiYWNrd2FyZHMiLCJ1bmNsaXBlZCIsInN3aW5nRm9yd2FyZCIsInByb2dyZXNzIiwiaW5pdEZuIiwicnVuRm4iLCJyZXRhcmdldEZuIiwiaW5pdGlhbGlzZXIiLCJyZXRhcmdldCIsImluaXRpYWxpc2VkIiwiZmluaXNoZWQiLCJydW5uaW5nIiwiX2xhc3RQb3NpdGlvbiIsImp1c3RTdGFydGVkIiwianVzdEZpbmlzaGVkIiwiZGVjbGFyYXRpdmUiLCJjb252ZXJnZWQiLCJfaW5pdGlhbGlzZSIsIl9ydW4iLCJuZWVkc0l0IiwiX3JlbWVtYmVyTW9ycGhlciIsIm1vcnBoZXIiLCJjYWxsZXIiLCJwb3NpdGlvbk9yRHQiLCJhbGxmaW5pc2hlZCIsIl90cnlSZXRhcmdldCIsIkZha2VSdW5uZXIiLCJtZXJnZVdpdGgiLCJnZXRSdW5uZXJUcmFuc2Zvcm0iLCJtZXJnZVRyYW5zZm9ybXMiLCJuZXRUcmFuc2Zvcm0iLCJfdHJhbnNmb3JtYXRpb25SdW5uZXJzIiwicnVubmVycyIsIlJ1bm5lckFycmF5IiwiaWRzIiwiY2xlYXJCZWZvcmUiLCJkZWxldGVDbnQiLCJlZGl0IiwibmV3UnVubmVyIiwiZ2V0QnlJRCIsImxhc3RSdW5uZXIiLCJieSIsIl9jbGVhclRyYW5zZm9ybVJ1bm5lcnNCZWZvcmUiLCJjdXJyZW50UnVubmVyIiwiX2N1cnJlbnRUcmFuc2Zvcm0iLCJfYWRkUnVubmVyIiwic3R5bGVBdHRyIiwibmFtZU9yQXR0cnMiLCJuZXdUb0F0dHJzIiwibmV3S2V5cyIsImRpZmZlcmVuY2VzIiwiYWRkZWRGcm9tQXR0cnMiLCJvbGRGcm9tQXR0cnMiLCJvbGRUb0F0dHJzIiwibmV3TGV2ZWwiLCJuZXdQb2ludCIsImFmZmluZSIsImlzTWF0cml4IiwiY3VycmVudEFuZ2xlIiwic3RhcnRUcmFuc2Zvcm0iLCJyVGFyZ2V0IiwickN1cnJlbnQiLCJwb3NzaWJpbGl0aWVzIiwiZGlzdGFuY2VzIiwic2hvcnRlc3QiLCJhZmZpbmVQYXJhbWV0ZXJzIiwibmV3VHJhbnNmb3JtcyIsIl9xdWV1ZU51bWJlciIsIl9xdWV1ZU51bWJlckRlbHRhIiwibmV3VG8iLCJfcXVldWVPYmplY3QiLCJTdmciLCJuZXN0ZWQiLCJTeW1ib2wiLCJzeW1ib2wiLCJ0ZXh0YWJsZSIsInBsYWluIiwiX2J1aWxkIiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwiYXgiLCJheSIsImFtb3ZlIiwiYnVpbGQiLCJUZXh0IiwiX3JlYnVpbGQiLCJibGFua0xpbmVPZmZzZXQiLCJmb250U2l6ZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibmV3TGluZWQiLCJmaXJzdExpbmUiLCJub2RlVHlwZSIsIm5ld0xpbmUiLCJUc3BhbiIsInRzcGFuIiwiQ2lyY2xlIiwiY2lyY2xlIiwiQ2xpcFBhdGgiLCJ1bmNsaXAiLCJjbGlwIiwiY2xpcHBlciIsImNsaXBXaXRoIiwiRm9yZWlnbk9iamVjdCIsImZvcmVpZ25PYmplY3QiLCJjb250YWluZXJHZW9tZXRyeSIsImNoaWxkIiwiZ3JvdXAiLCJsaW5rIiwidW5saW5rIiwibGlua2VyIiwibGlua1RvIiwiTWFzayIsInVubWFzayIsIm1hc2siLCJtYXNrZXIiLCJtYXNrV2l0aCIsIlN0b3AiLCJTdHlsZSIsImFkZFRleHQiLCJydWxlIiwiZm9udEZhbWlseSIsImNzc1J1bGUiLCJmb250ZmFjZSIsIlRleHRQYXRoIiwidHJhY2siLCJwYXRoQXJyYXkiLCJ0ZXh0UGF0aCIsImltcG9ydE5vZGVzIiwiVXNlIiwidXNlIiwiU1ZHIiwicmVnaXN0ZXJNb3JwaGFibGVUeXBlIiwiY29udGV4dCIsImNvbmZpZyIsInByZXZpZXdUYWciLCJwaXhlbHNQZXJVbml0SW5wdXQiLCJ3aWR0aElucHV0IiwiaGVpZ2h0SW5wdXQiLCJwYWRkaW5nSW5wdXQiLCJvdXRwdXRQaXhlbFNpemVJbnB1dCIsIndpdGhCYWNrZ3JvdW5kQ2hlY2tib3giLCJ3aXRob3V0QmFja2dyb3VuZENoZWNrYm94Iiwid2l0aFNpemVHdWlkZUNoZWNrYm94Iiwic3ByaXRlTmFtZXNUZXh0IiwiZXhwb3J0QnV0dG9uIiwiZXhwb3J0RGVzY3JpcHRpb24iLCJjaGVja2JveENvbmZpZ3MiLCJoYXNFcnJvciIsInBpeGVsSW1nIiwicGl4ZWxJbWdCYXNlNjQiLCJzcHJpdGUiLCJwaXhlbHNQZXJVbml0IiwicGFkZGluZyIsIm91dHB1dFBpeGVsU2l6ZSIsInNwcml0ZU5hbWVzIiwid2l0aEJhY2tncm91bmQiLCJ3aXRob3V0QmFja2dyb3VuZCIsIndpdGhTaXplR3VpZGUiLCJjaGVja2JveCIsImNvbmZpZ0tleSIsImN1cnJlbnRUYXJnZXQiLCJpbWdQYXRoIiwibG9hZEltYWdlIiwiaW5wdXRDb25maWciLCJudW1iZXJWYWx1ZSIsImNsYXNzTGlzdCIsIm51bWJlcklucHV0Q2hhbmdlRXZlbnRMaXN0ZW5lciIsImNoZWNrYm94Q29uZmlnIiwiY2hlY2tlZCIsImNoZWNrYm94Q2hhbmdlRXZlbnRMaXN0ZW5lciIsInNvbWUiLCJkaXNhYmxlZCIsInByb2dyZXNzRWwiLCJvbkZpbmlzaCIsImNyZWF0ZUltYWdlQml0bWFwIiwib2Zmc2NyZWVuQ2FudmFzIiwiT2Zmc2NyZWVuQ2FudmFzIiwic3ZncyIsIndvcmtlciIsIldvcmtlciIsImRldGFpbHMiLCJjb252ZXJ0ZWRTdmciLCJzdmdJbmZvIiwidmVjIiwicGl4ZWxzIiwicGl4ZWwiLCJmaWxlbmFtZSIsImJnIiwiYmFja2dyb3VuZCIsInZlY0JnIiwiYmdHcm91cCIsInZlY0d1aWRlIiwiZ3VpZGUiLCJndWlkZUdyb3VwIiwibWFza1JlY3QiLCJtYXNrZWQiLCJtYWtlU3ZnIiwic3ZnRGF0YSIsImV4cG9ydFR5cGUiLCJ6aXAiLCJzdmdJbmZvTGlzdCIsImRvd25sb2FkU3ZnIiwibWVzc2FnZSIsImNhbnZhcyIsInNwcml0ZUNvbmZpZyIsImV4cG9ydFR5cGVzIiwiZXhwb3J0U3ZnIl0sInNvdXJjZVJvb3QiOiIifQ==