(()=>{"use strict";function t(t){return t.toString(16).padStart(2,"0")}function e(e,a,s){return"#"+t(e)+t(a)+t(s)}onmessage=async t=>{try{await async function(t){const{canvas:a,pixelImg:s,spriteConfig:i}=t,{width:n,height:l,nRows:o,nCols:g,padding:r,outputPixelSize:p,outputPadding:d,spriteNames:c}=i,u=a.getContext("2d",{willReadFrequently:!0,antialias:!1});u.drawImage(s,0,0);const f=a.width/g,h=a.height/o,y=f/(n+2*r),m=o*g;postMessage({type:"info",message:`We have ${m} images in ${o} rows and ${g} columns, ${y} ppu`});let w=1;for(let t=0;t<o;++t)for(let a=0;a<g;++a){let s=`image${w}`;c.length>w-1&&(s=c[w-1]);const i={filename:s,padding:d*p,w:n*p,h:l*p,pixels:[]};let o;if(r>0){o=u.getImageData(f*a,h*t,1,1).data;const s=e(o[0],o[1],o[2]);i.background={fill:s,x:0,y:0,w:(n+2*d)*p,h:(l+2*d)*p},d>0&&(i.guide={mask:[{x:(d-1)*p,y:(d-1)*p,w:(n+2)*p,h:(l+2)*p,fill:"#3F3F3F"},{x:d*p,y:d*p,w:n*p,h:n*p,fill:"#000000"}],masked:{x:(d-1)*p,y:(d-1)*p,w:(n+2)*p,h:(l+2)*p,fill:"#000000"}})}for(let s=0;s<l;++s)for(let l=0;l<n;++l){const n=f*a+(l+r)*y,g=h*t+(s+r)*y,d=u.getImageData(n,g,1,1).data,c=d[3]/255;if($=o,null!=(x=d)&&null!=$&&x[0]===$[0]&&x[1]===$[1]&&x[2]===$[2]||0===c)continue;const m=e(d[0],d[1],d[2]);i.pixels.push({fill:m,opacity:c,x:l*p,y:s*p,w:p,h:p})}postMessage({type:"progress",details:`${w}/${m}`,svgData:i}),w+=1}var x,$}(t.data),postMessage({type:"end"})}catch(t){postMessage({type:"error",error:t})}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,