(()=>{"use strict";function e(e){return e.toString(16).padStart(2,"0")}function t(t,s,a){return"#"+e(t)+e(s)+e(a)}onmessage=async e=>{try{await async function(e){const{canvas:s,pixelImg:a,spriteConfig:i}=e,{width:n,height:o,nRows:l,nCols:g,padding:r,outputPixelSize:p,spriteNames:c}=i,d=s.getContext("2d",{willReadFrequently:!0,antialias:!1});d.drawImage(a,0,0);const h=s.width,f=s.height,u=h/g,y=f/l,m=u/(n+2*r),w=l*g;postMessage({type:"info",message:`We have ${w} images in ${l} rows and ${g} columns, ${m} ppu`}),postMessage({type:"info",message:`sheetw: ${h}, sheeth: ${f}`});let x=1;for(let e=0;e<l;++e)for(let s=0;s<g;++s){let a=`image${x}`;c.length>x-1&&(a=c[x-1]);const i={filename:a,padding:r*p,w:n*p,h:o*p,pixels:[]};let l;if(r>0){l=d.getImageData(u*s,y*e,1,1).data;const a=t(l[0],l[1],l[2]);i.background={fill:a,x:0,y:0,w:(n+2*r)*p,h:(o+2*r)*p},i.guide={mask:[{x:(r-1)*p,y:(r-1)*p,w:(n+2)*p,h:(o+2)*p,fill:"#3F3F3F"},{x:r*p,y:r*p,w:n*p,h:n*p,fill:"#000000"}],masked:{x:(r-1)*p,y:(r-1)*p,w:(n+2)*p,h:(o+2)*p,fill:"#000000"}}}for(let a=0;a<o;++a)for(let o=0;o<n;++o){const n=u*s+(o+r)*m,g=y*e+(a+r)*m,c=d.getImageData(n,g,1,1).data,h=c[3]/255;if(M=l,null!=($=c)&&null!=M&&$[0]===M[0]&&$[1]===M[1]&&$[2]===M[2]||0===h)continue;const f=t(c[0],c[1],c[2]);i.pixels.push({fill:f,opacity:h,x:o*p,y:a*p,w:p,h:p})}postMessage({type:"progress",details:`${x}/${w}`,svgData:i}),x+=1}var $,M}(e.data),postMessage({type:"end"})}catch(e){postMessage({type:"error",error:e})}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,