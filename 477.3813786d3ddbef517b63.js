(()=>{"use strict";function e(e){return e.toString(16).padStart(2,"0")}function t(t,a,s){return"#"+e(t)+e(a)+e(s)}onmessage=async e=>{try{await async function(e){const{canvas:a,pixelImg:s,spriteConfig:i}=e,{pixelsPerUnit:n,width:o,height:l,padding:r,outputPixelSize:g}=i,d=a.getContext("2d",{willReadFrequently:!0,antialias:!1});d.drawImage(s,0,0);const f=a.width,p=a.height,c=(o+2*r)*n,h=(l+2*r)*n,u=Math.floor(p/h),y=Math.floor(f/c),m=u*y;postMessage({type:"info",message:`We have ${m} images in ${u} rows and ${y} columns`});let w=1;for(let e=0;e<u;++e)for(let a=0;a<y;++a){const s={filename:`image${w}`,padding:r*g,w:o*g,h:l*g,pixels:[]};let i;if(r>0){i=d.getImageData(c*a,h*e,1,1).data;const n=t(i[0],i[1],i[2]);s.background={fill:n,x:0,y:0,w:(o+2*r)*g,h:(l+2*r)*g},s.guide={mask:[{x:(r-1)*g,y:(r-1)*g,w:(o+2)*g,h:(l+2)*g,fill:"#3F3F3F"},{x:r*g,y:r*g,w:o*g,h:o*g,fill:"#000000"}],masked:{x:(r-1)*g,y:(r-1)*g,w:(o+2)*g,h:(l+2)*g,fill:"#000000"}}}for(let f=0;f<l;++f)for(let l=0;l<o;++l){const o=c*a+(l+r)*n,p=h*e+(f+r)*n,u=d.getImageData(o,p,1,1).data;if(M=i,(x=u)[0]===M[0]&&x[1]===M[1]&&x[2]===M[2])continue;const y=t(u[0],u[1],u[2]);s.pixels.push({fill:y,x:l*g,y:f*g,w:g,h:g})}postMessage({type:"progress",details:`${w}/${m}`,svgData:s}),w+=1}var x,M}(e.data),postMessage({type:"end"})}catch(e){postMessage({type:"error",error:e})}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,